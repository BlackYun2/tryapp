
tryapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000354  00800060  000045e2  00004656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003d74  00000000  00000000  000049ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001b60  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  0000a440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  0000a654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000cc66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000f440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000f620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000f927  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <main>
      7a:	0c 94 ef 22 	jmp	0x45de	; 0x45de <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e8       	ldi	r26, 0x8C	; 140
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e8       	ldi	r24, 0x8C	; 140
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e8       	ldi	r22, 0x8C	; 140
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ec 56       	subi	r30, 0x6C	; 108
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <SSD_Init>:
 *      Author: 20100
 */
#include"SSD.h"

void SSD_Init(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE DATA LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN4, OUTPUT);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN5, OUTPUT);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	65 e0       	ldi	r22, 0x05	; 5
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN6, OUTPUT);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	66 e0       	ldi	r22, 0x06	; 6
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN7, OUTPUT);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	67 e0       	ldi	r22, 0x07	; 7
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>


	// CONFIGURE CONTROL LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN1, OUTPUT);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN2, OUTPUT);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>

}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <SSD_DisplayNumber>:
because the second one is at the end so it
will stay on untill the function work again
but the first one will be off at
that time so your eye will notice*/
SSD_DisplayNumber(u8 num)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	af 97       	sbiw	r28, 0x2f	; 47
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8d a7       	std	Y+45, r24	; 0x2d
	u8 loc_FirstDigit = (num/10)<<4;
     f3a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f3c:	9a e0       	ldi	r25, 0x0A	; 10
     f3e:	69 2f       	mov	r22, r25
     f40:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__udivmodqi4>
     f44:	82 95       	swap	r24
     f46:	80 7f       	andi	r24, 0xF0	; 240
     f48:	8c a7       	std	Y+44, r24	; 0x2c
	u8 loc_SecondtDigit = (num%10)<<4;
     f4a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f4c:	9a e0       	ldi	r25, 0x0A	; 10
     f4e:	69 2f       	mov	r22, r25
     f50:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__udivmodqi4>
     f54:	89 2f       	mov	r24, r25
     f56:	82 95       	swap	r24
     f58:	80 7f       	andi	r24, 0xF0	; 240
     f5a:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	60 ef       	ldi	r22, 0xF0	; 240
     f60:	4c a5       	ldd	r20, Y+44	; 0x2c
     f62:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	8f a3       	std	Y+39, r24	; 0x27
     f70:	98 a7       	std	Y+40, r25	; 0x28
     f72:	a9 a7       	std	Y+41, r26	; 0x29
     f74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6f a1       	ldd	r22, Y+39	; 0x27
     f78:	78 a5       	ldd	r23, Y+40	; 0x28
     f7a:	89 a5       	ldd	r24, Y+41	; 0x29
     f7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a ef       	ldi	r20, 0xFA	; 250
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8b a3       	std	Y+35, r24	; 0x23
     f90:	9c a3       	std	Y+36, r25	; 0x24
     f92:	ad a3       	std	Y+37, r26	; 0x25
     f94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <SSD_DisplayNumber+0x94>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9a a3       	std	Y+34, r25	; 0x22
     fb4:	89 a3       	std	Y+33, r24	; 0x21
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <SSD_DisplayNumber+0x112>
	else if (__tmp > 65535)
     fb8:	6b a1       	ldd	r22, Y+35	; 0x23
     fba:	7c a1       	ldd	r23, Y+36	; 0x24
     fbc:	8d a1       	ldd	r24, Y+37	; 0x25
     fbe:	9e a1       	ldd	r25, Y+38	; 0x26
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <SSD_DisplayNumber+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6f a1       	ldd	r22, Y+39	; 0x27
     fd2:	78 a5       	ldd	r23, Y+40	; 0x28
     fd4:	89 a5       	ldd	r24, Y+41	; 0x29
     fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <SSD_DisplayNumber+0xf4>
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	98 a3       	std	Y+32, r25	; 0x20
    1000:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1004:	98 a1       	ldd	r25, Y+32	; 0x20
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <SSD_DisplayNumber+0xe2>
    100a:	98 a3       	std	Y+32, r25	; 0x20
    100c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	89 a1       	ldd	r24, Y+33	; 0x21
    1010:	9a a1       	ldd	r25, Y+34	; 0x22
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9a a3       	std	Y+34, r25	; 0x22
    1016:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	89 a1       	ldd	r24, Y+33	; 0x21
    101a:	9a a1       	ldd	r25, Y+34	; 0x22
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <SSD_DisplayNumber+0xd6>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <SSD_DisplayNumber+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6b a1       	ldd	r22, Y+35	; 0x23
    1024:	7c a1       	ldd	r23, Y+36	; 0x24
    1026:	8d a1       	ldd	r24, Y+37	; 0x25
    1028:	9e a1       	ldd	r25, Y+38	; 0x26
    102a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9a a3       	std	Y+34, r25	; 0x22
    1034:	89 a3       	std	Y+33, r24	; 0x21
    1036:	89 a1       	ldd	r24, Y+33	; 0x21
    1038:	9a a1       	ldd	r25, Y+34	; 0x22
    103a:	9e 8f       	std	Y+30, r25	; 0x1e
    103c:	8d 8f       	std	Y+29, r24	; 0x1d
    103e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <SSD_DisplayNumber+0x11e>
    1046:	9e 8f       	std	Y+30, r25	; 0x1e
    1048:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//enable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	//disable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	//DIO_PORTA_REG = (num/10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	60 ef       	ldi	r22, 0xF0	; 240
    1062:	4c a5       	ldd	r20, Y+44	; 0x2c
    1064:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e8       	ldi	r26, 0x80	; 128
    106e:	bf e3       	ldi	r27, 0x3F	; 63
    1070:	89 8f       	std	Y+25, r24	; 0x19
    1072:	9a 8f       	std	Y+26, r25	; 0x1a
    1074:	ab 8f       	std	Y+27, r26	; 0x1b
    1076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	69 8d       	ldd	r22, Y+25	; 0x19
    107a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8d 8b       	std	Y+21, r24	; 0x15
    1092:	9e 8b       	std	Y+22, r25	; 0x16
    1094:	af 8b       	std	Y+23, r26	; 0x17
    1096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1098:	6d 89       	ldd	r22, Y+21	; 0x15
    109a:	7e 89       	ldd	r23, Y+22	; 0x16
    109c:	8f 89       	ldd	r24, Y+23	; 0x17
    109e:	98 8d       	ldd	r25, Y+24	; 0x18
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <SSD_DisplayNumber+0x196>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 8b       	std	Y+20, r25	; 0x14
    10b6:	8b 8b       	std	Y+19, r24	; 0x13
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <SSD_DisplayNumber+0x214>
	else if (__tmp > 65535)
    10ba:	6d 89       	ldd	r22, Y+21	; 0x15
    10bc:	7e 89       	ldd	r23, Y+22	; 0x16
    10be:	8f 89       	ldd	r24, Y+23	; 0x17
    10c0:	98 8d       	ldd	r25, Y+24	; 0x18
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <SSD_DisplayNumber+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	69 8d       	ldd	r22, Y+25	; 0x19
    10d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9c 8b       	std	Y+20, r25	; 0x14
    10f8:	8b 8b       	std	Y+19, r24	; 0x13
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <SSD_DisplayNumber+0x1f6>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9a 8b       	std	Y+18, r25	; 0x12
    1102:	89 8b       	std	Y+17, r24	; 0x11
    1104:	89 89       	ldd	r24, Y+17	; 0x11
    1106:	9a 89       	ldd	r25, Y+18	; 0x12
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <SSD_DisplayNumber+0x1e4>
    110c:	9a 8b       	std	Y+18, r25	; 0x12
    110e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8b 89       	ldd	r24, Y+19	; 0x13
    1112:	9c 89       	ldd	r25, Y+20	; 0x14
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9c 8b       	std	Y+20, r25	; 0x14
    1118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <SSD_DisplayNumber+0x1d8>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <SSD_DisplayNumber+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6d 89       	ldd	r22, Y+21	; 0x15
    1126:	7e 89       	ldd	r23, Y+22	; 0x16
    1128:	8f 89       	ldd	r24, Y+23	; 0x17
    112a:	98 8d       	ldd	r25, Y+24	; 0x18
    112c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9c 8b       	std	Y+20, r25	; 0x14
    1136:	8b 8b       	std	Y+19, r24	; 0x13
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	9c 89       	ldd	r25, Y+20	; 0x14
    113c:	98 8b       	std	Y+16, r25	; 0x10
    113e:	8f 87       	std	Y+15, r24	; 0x0f
    1140:	8f 85       	ldd	r24, Y+15	; 0x0f
    1142:	98 89       	ldd	r25, Y+16	; 0x10
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <SSD_DisplayNumber+0x220>
    1148:	98 8b       	std	Y+16, r25	; 0x10
    114a:	8f 87       	std	Y+15, r24	; 0x0f
	//wait (1m)
	_delay_ms(1);
	//disable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	//enable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	//DIO_PORTA_REG = (num%10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_SecondtDigit);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	60 ef       	ldi	r22, 0xF0	; 240
    1164:	4b a5       	ldd	r20, Y+43	; 0x2b
    1166:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	bf e3       	ldi	r27, 0x3F	; 63
    1172:	8b 87       	std	Y+11, r24	; 0x0b
    1174:	9c 87       	std	Y+12, r25	; 0x0c
    1176:	ad 87       	std	Y+13, r26	; 0x0d
    1178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117a:	6b 85       	ldd	r22, Y+11	; 0x0b
    117c:	7c 85       	ldd	r23, Y+12	; 0x0c
    117e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1180:	9e 85       	ldd	r25, Y+14	; 0x0e
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a ef       	ldi	r20, 0xFA	; 250
    1188:	54 e4       	ldi	r21, 0x44	; 68
    118a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8f 83       	std	Y+7, r24	; 0x07
    1194:	98 87       	std	Y+8, r25	; 0x08
    1196:	a9 87       	std	Y+9, r26	; 0x09
    1198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <SSD_DisplayNumber+0x298>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <SSD_DisplayNumber+0x316>
	else if (__tmp > 65535)
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	4c f5       	brge	.+82     	; 0x1226 <SSD_DisplayNumber+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11da:	9e 85       	ldd	r25, Y+14	; 0x0e
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <SSD_DisplayNumber+0x2f8>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <SSD_DisplayNumber+0x2e6>
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9e 83       	std	Y+6, r25	; 0x06
    121a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f7       	brne	.-38     	; 0x11fe <SSD_DisplayNumber+0x2da>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <SSD_DisplayNumber+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	6f 81       	ldd	r22, Y+7	; 0x07
    1228:	78 85       	ldd	r23, Y+8	; 0x08
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <SSD_DisplayNumber+0x322>
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	//wait (1m)
	_delay_ms(1);
}
    124e:	af 96       	adiw	r28, 0x2f	; 47
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <LED_Init>:
 */
#include"led.h"


void LED_Init(void)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_PIN, OUTPUT);//LED 0
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,2);
	Dio_ConfigChannel(LED1_PORT, LED1_PIN, OUTPUT);//LED 1
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	67 e0       	ldi	r22, 0x07	; 7
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,7);
	Dio_ConfigChannel(LED2_PORT, LED2_PIN, OUTPUT);//LED 2
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	63 e0       	ldi	r22, 0x03	; 3
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRD_REG,3);

}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <LED_ON>:
void LED_ON(led_type ledId)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <LED_ON+0x6>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3b 83       	std	Y+3, r19	; 0x03
    12a2:	2a 83       	std	Y+2, r18	; 0x02
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	79 f0       	breq	.+30     	; 0x12cc <LED_ON+0x40>
    12ae:	2a 81       	ldd	r18, Y+2	; 0x02
    12b0:	3b 81       	ldd	r19, Y+3	; 0x03
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <LED_ON+0x4c>
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	89 f4       	brne	.+34     	; 0x12e2 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_HIGH);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    12ca:	0b c0       	rjmp	.+22     	; 0x12e2 <LED_ON+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_HIGH);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	67 e0       	ldi	r22, 0x07	; 7
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <LED_ON+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_HIGH);
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	63 e0       	ldi	r22, 0x03	; 3
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
		break;

	}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <LED_OFF>:
void LED_OFF(led_type ledId)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <LED_OFF+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3b 83       	std	Y+3, r19	; 0x03
    1304:	2a 83       	std	Y+2, r18	; 0x02
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	79 f0       	breq	.+30     	; 0x132e <LED_OFF+0x40>
    1310:	2a 81       	ldd	r18, Y+2	; 0x02
    1312:	3b 81       	ldd	r19, Y+3	; 0x03
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	81 f0       	breq	.+32     	; 0x133a <LED_OFF+0x4c>
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	89 f4       	brne	.+34     	; 0x1344 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_LOW);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <LED_OFF+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_LOW);
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <LED_OFF+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_LOW);
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	63 e0       	ldi	r22, 0x03	; 3
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
		break;
	}


}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <LED_TOGGLE+0x6>
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01

	switch (ledId)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3b 83       	std	Y+3, r19	; 0x03
    1366:	2a 83       	std	Y+2, r18	; 0x02
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	71 f0       	breq	.+28     	; 0x138e <LED_TOGGLE+0x3e>
    1372:	2a 81       	ldd	r18, Y+2	; 0x02
    1374:	3b 81       	ldd	r19, Y+3	; 0x03
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	71 f0       	breq	.+28     	; 0x1398 <LED_TOGGLE+0x48>
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	9b 81       	ldd	r25, Y+3	; 0x03
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	71 f4       	brne	.+28     	; 0x13a0 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	62 e0       	ldi	r22, 0x02	; 2
    1388:	0e 94 ef 10 	call	0x21de	; 0x21de <Dio_ToggleChannel>
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <LED_TOGGLE+0x50>
		break;
	case LED1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	67 e0       	ldi	r22, 0x07	; 7
    1392:	0e 94 ef 10 	call	0x21de	; 0x21de <Dio_ToggleChannel>
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <LED_TOGGLE+0x50>
		break;
	case LED2:
		Dio_ToggleChannel(LED2_PORT, LED2_PIN);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	63 e0       	ldi	r22, 0x03	; 3
    139c:	0e 94 ef 10 	call	0x21de	; 0x21de <Dio_ToggleChannel>
		break;
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <Lcd_WriteCustom+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    13b6:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	2c c0       	rjmp	.+88     	; 0x1416 <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 96       	adiw	r24, 0x08	; 8
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    13d6:	1a 82       	std	Y+2, r1	; 0x02
    13d8:	18 c0       	rjmp	.+48     	; 0x140a <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	48 2f       	mov	r20, r24
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	ca 01       	movw	r24, r20
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	fc 01       	movw	r30, r24
    13fa:	ec 56       	subi	r30, 0x6C	; 108
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	80 81       	ld	r24, Z
    1400:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	28 f3       	brcs	.-54     	; 0x13da <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	88 f2       	brcs	.-94     	; 0x13be <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <Lcd_Init>:

void Lcd_Init(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	e4 97       	sbiw	r28, 0x34	; 52
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	64 e0       	ldi	r22, 0x04	; 4
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	65 e0       	ldi	r22, 0x05	; 5
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	66 e0       	ldi	r22, 0x06	; 6
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	67 e0       	ldi	r22, 0x07	; 7
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e7       	ldi	r26, 0x70	; 112
    1490:	b1 e4       	ldi	r27, 0x41	; 65
    1492:	89 ab       	std	Y+49, r24	; 0x31
    1494:	9a ab       	std	Y+50, r25	; 0x32
    1496:	ab ab       	std	Y+51, r26	; 0x33
    1498:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149a:	69 a9       	ldd	r22, Y+49	; 0x31
    149c:	7a a9       	ldd	r23, Y+50	; 0x32
    149e:	8b a9       	ldd	r24, Y+51	; 0x33
    14a0:	9c a9       	ldd	r25, Y+52	; 0x34
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4a ef       	ldi	r20, 0xFA	; 250
    14a8:	54 e4       	ldi	r21, 0x44	; 68
    14aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8d a7       	std	Y+45, r24	; 0x2d
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	af a7       	std	Y+47, r26	; 0x2f
    14b8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    14bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    14be:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c0:	98 a9       	ldd	r25, Y+48	; 0x30
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <Lcd_Init+0xb6>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c a7       	std	Y+44, r25	; 0x2c
    14d8:	8b a7       	std	Y+43, r24	; 0x2b
    14da:	3f c0       	rjmp	.+126    	; 0x155a <Lcd_Init+0x134>
	else if (__tmp > 65535)
    14dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14de:	7e a5       	ldd	r23, Y+46	; 0x2e
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	4c f5       	brge	.+82     	; 0x1546 <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9c a7       	std	Y+44, r25	; 0x2c
    151a:	8b a7       	std	Y+43, r24	; 0x2b
    151c:	0f c0       	rjmp	.+30     	; 0x153c <Lcd_Init+0x116>
    151e:	88 ec       	ldi	r24, 0xC8	; 200
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9a a7       	std	Y+42, r25	; 0x2a
    1524:	89 a7       	std	Y+41, r24	; 0x29
    1526:	89 a5       	ldd	r24, Y+41	; 0x29
    1528:	9a a5       	ldd	r25, Y+42	; 0x2a
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <Lcd_Init+0x104>
    152e:	9a a7       	std	Y+42, r25	; 0x2a
    1530:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	8b a5       	ldd	r24, Y+43	; 0x2b
    1534:	9c a5       	ldd	r25, Y+44	; 0x2c
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	9c a7       	std	Y+44, r25	; 0x2c
    153a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	8b a5       	ldd	r24, Y+43	; 0x2b
    153e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f7       	brne	.-38     	; 0x151e <Lcd_Init+0xf8>
    1544:	14 c0       	rjmp	.+40     	; 0x156e <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	6d a5       	ldd	r22, Y+45	; 0x2d
    1548:	7e a5       	ldd	r23, Y+46	; 0x2e
    154a:	8f a5       	ldd	r24, Y+47	; 0x2f
    154c:	98 a9       	ldd	r25, Y+48	; 0x30
    154e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9c a7       	std	Y+44, r25	; 0x2c
    1558:	8b a7       	std	Y+43, r24	; 0x2b
    155a:	8b a5       	ldd	r24, Y+43	; 0x2b
    155c:	9c a5       	ldd	r25, Y+44	; 0x2c
    155e:	98 a7       	std	Y+40, r25	; 0x28
    1560:	8f a3       	std	Y+39, r24	; 0x27
    1562:	8f a1       	ldd	r24, Y+39	; 0x27
    1564:	98 a5       	ldd	r25, Y+40	; 0x28
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <Lcd_Init+0x140>
    156a:	98 a7       	std	Y+40, r25	; 0x28
    156c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 ea       	ldi	r26, 0xA0	; 160
    157a:	b0 e4       	ldi	r27, 0x40	; 64
    157c:	8b a3       	std	Y+35, r24	; 0x23
    157e:	9c a3       	std	Y+36, r25	; 0x24
    1580:	ad a3       	std	Y+37, r26	; 0x25
    1582:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b a1       	ldd	r22, Y+35	; 0x23
    1586:	7c a1       	ldd	r23, Y+36	; 0x24
    1588:	8d a1       	ldd	r24, Y+37	; 0x25
    158a:	9e a1       	ldd	r25, Y+38	; 0x26
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a ef       	ldi	r20, 0xFA	; 250
    1592:	54 e4       	ldi	r21, 0x44	; 68
    1594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 8f       	std	Y+31, r24	; 0x1f
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	a9 a3       	std	Y+33, r26	; 0x21
    15a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15a6:	78 a1       	ldd	r23, Y+32	; 0x20
    15a8:	89 a1       	ldd	r24, Y+33	; 0x21
    15aa:	9a a1       	ldd	r25, Y+34	; 0x22
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <Lcd_Init+0x1a0>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 8f       	std	Y+30, r25	; 0x1e
    15c2:	8d 8f       	std	Y+29, r24	; 0x1d
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    15c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15c8:	78 a1       	ldd	r23, Y+32	; 0x20
    15ca:	89 a1       	ldd	r24, Y+33	; 0x21
    15cc:	9a a1       	ldd	r25, Y+34	; 0x22
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b a1       	ldd	r22, Y+35	; 0x23
    15e0:	7c a1       	ldd	r23, Y+36	; 0x24
    15e2:	8d a1       	ldd	r24, Y+37	; 0x25
    15e4:	9e a1       	ldd	r25, Y+38	; 0x26
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 8f       	std	Y+30, r25	; 0x1e
    1604:	8d 8f       	std	Y+29, r24	; 0x1d
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <Lcd_Init+0x200>
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8f       	std	Y+28, r25	; 0x1c
    160e:	8b 8f       	std	Y+27, r24	; 0x1b
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <Lcd_Init+0x1ee>
    1618:	9c 8f       	std	Y+28, r25	; 0x1c
    161a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 8f       	std	Y+30, r25	; 0x1e
    1624:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <Lcd_Init+0x1e2>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1632:	78 a1       	ldd	r23, Y+32	; 0x20
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 8f       	std	Y+30, r25	; 0x1e
    1642:	8d 8f       	std	Y+29, r24	; 0x1d
    1644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1648:	9a 8f       	std	Y+26, r25	; 0x1a
    164a:	89 8f       	std	Y+25, r24	; 0x19
    164c:	89 8d       	ldd	r24, Y+25	; 0x19
    164e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <Lcd_Init+0x22a>
    1654:	9a 8f       	std	Y+26, r25	; 0x1a
    1656:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a8 ec       	ldi	r26, 0xC8	; 200
    1664:	b2 e4       	ldi	r27, 0x42	; 66
    1666:	8d 8b       	std	Y+21, r24	; 0x15
    1668:	9e 8b       	std	Y+22, r25	; 0x16
    166a:	af 8b       	std	Y+23, r26	; 0x17
    166c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	2b ea       	ldi	r18, 0xAB	; 171
    1678:	3a ea       	ldi	r19, 0xAA	; 170
    167a:	4a e2       	ldi	r20, 0x2A	; 42
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	89 8b       	std	Y+17, r24	; 0x11
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	ab 8b       	std	Y+19, r26	; 0x13
    168c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    168e:	69 89       	ldd	r22, Y+17	; 0x11
    1690:	7a 89       	ldd	r23, Y+18	; 0x12
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	1c f4       	brge	.+6      	; 0x16ac <Lcd_Init+0x286>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	88 8b       	std	Y+16, r24	; 0x10
    16aa:	91 c0       	rjmp	.+290    	; 0x17ce <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    16ac:	69 89       	ldd	r22, Y+17	; 0x11
    16ae:	7a 89       	ldd	r23, Y+18	; 0x12
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <Lcd_Init+0x2a0>
    16c4:	7b c0       	rjmp	.+246    	; 0x17bc <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8c 87       	std	Y+12, r24	; 0x0c
    16e0:	9d 87       	std	Y+13, r25	; 0x0d
    16e2:	ae 87       	std	Y+14, r26	; 0x0e
    16e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    16e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    16ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	88 87       	std	Y+8, r24	; 0x08
    1700:	99 87       	std	Y+9, r25	; 0x09
    1702:	aa 87       	std	Y+10, r26	; 0x0a
    1704:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1706:	68 85       	ldd	r22, Y+8	; 0x08
    1708:	79 85       	ldd	r23, Y+9	; 0x09
    170a:	8a 85       	ldd	r24, Y+10	; 0x0a
    170c:	9b 85       	ldd	r25, Y+11	; 0x0b
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <Lcd_Init+0x302>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9f 83       	std	Y+7, r25	; 0x07
    1724:	8e 83       	std	Y+6, r24	; 0x06
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <Lcd_Init+0x380>
	else if (__tmp > 65535)
    1728:	68 85       	ldd	r22, Y+8	; 0x08
    172a:	79 85       	ldd	r23, Y+9	; 0x09
    172c:	8a 85       	ldd	r24, Y+10	; 0x0a
    172e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6c 85       	ldd	r22, Y+12	; 0x0c
    1742:	7d 85       	ldd	r23, Y+13	; 0x0d
    1744:	8e 85       	ldd	r24, Y+14	; 0x0e
    1746:	9f 85       	ldd	r25, Y+15	; 0x0f
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9f 83       	std	Y+7, r25	; 0x07
    1766:	8e 83       	std	Y+6, r24	; 0x06
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <Lcd_Init+0x362>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9d 83       	std	Y+5, r25	; 0x05
    1770:	8c 83       	std	Y+4, r24	; 0x04
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <Lcd_Init+0x350>
    177a:	9d 83       	std	Y+5, r25	; 0x05
    177c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9f 83       	std	Y+7, r25	; 0x07
    1786:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	9f 81       	ldd	r25, Y+7	; 0x07
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <Lcd_Init+0x344>
    1790:	24 c0       	rjmp	.+72     	; 0x17da <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	68 85       	ldd	r22, Y+8	; 0x08
    1794:	79 85       	ldd	r23, Y+9	; 0x09
    1796:	8a 85       	ldd	r24, Y+10	; 0x0a
    1798:	9b 85       	ldd	r25, Y+11	; 0x0b
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9f 83       	std	Y+7, r25	; 0x07
    17a4:	8e 83       	std	Y+6, r24	; 0x06
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	9b 83       	std	Y+3, r25	; 0x03
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Lcd_Init+0x38c>
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17bc:	69 89       	ldd	r22, Y+17	; 0x11
    17be:	7a 89       	ldd	r23, Y+18	; 0x12
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	88 8b       	std	Y+16, r24	; 0x10
    17ce:	88 89       	ldd	r24, Y+16	; 0x10
    17d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8a 95       	dec	r24
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Lcd_Init+0x3ae>
    17d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_Cmd(2);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    17e6:	88 e2       	ldi	r24, 0x28	; 40
    17e8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_WriteCustom();
    17ec:	0e 94 d6 09 	call	0x13ac	; 0x13ac <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    17f8:	8c e0       	ldi	r24, 0x0C	; 12
    17fa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
}
    17fe:	e4 96       	adiw	r28, 0x34	; 52
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Enable_Pulse>:
static void Enable_Pulse(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	a6 97       	sbiw	r28, 0x26	; 38
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e8       	ldi	r26, 0x80	; 128
    1834:	bf e3       	ldi	r27, 0x3F	; 63
    1836:	8b a3       	std	Y+35, r24	; 0x23
    1838:	9c a3       	std	Y+36, r25	; 0x24
    183a:	ad a3       	std	Y+37, r26	; 0x25
    183c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	2b ea       	ldi	r18, 0xAB	; 171
    1848:	3a ea       	ldi	r19, 0xAA	; 170
    184a:	4a e2       	ldi	r20, 0x2A	; 42
    184c:	50 e4       	ldi	r21, 0x40	; 64
    184e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8f 8f       	std	Y+31, r24	; 0x1f
    1858:	98 a3       	std	Y+32, r25	; 0x20
    185a:	a9 a3       	std	Y+33, r26	; 0x21
    185c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    185e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1860:	78 a1       	ldd	r23, Y+32	; 0x20
    1862:	89 a1       	ldd	r24, Y+33	; 0x21
    1864:	9a a1       	ldd	r25, Y+34	; 0x22
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	1c f4       	brge	.+6      	; 0x187c <Enable_Pulse+0x6c>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8e 8f       	std	Y+30, r24	; 0x1e
    187a:	91 c0       	rjmp	.+290    	; 0x199e <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    187c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    187e:	78 a1       	ldd	r23, Y+32	; 0x20
    1880:	89 a1       	ldd	r24, Y+33	; 0x21
    1882:	9a a1       	ldd	r25, Y+34	; 0x22
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	53 e4       	ldi	r21, 0x43	; 67
    188c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	0c f0       	brlt	.+2      	; 0x1896 <Enable_Pulse+0x86>
    1894:	7b c0       	rjmp	.+246    	; 0x198c <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8a 8f       	std	Y+26, r24	; 0x1a
    18b0:	9b 8f       	std	Y+27, r25	; 0x1b
    18b2:	ac 8f       	std	Y+28, r26	; 0x1c
    18b4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a ef       	ldi	r20, 0xFA	; 250
    18c4:	54 e4       	ldi	r21, 0x44	; 68
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8e 8b       	std	Y+22, r24	; 0x16
    18d0:	9f 8b       	std	Y+23, r25	; 0x17
    18d2:	a8 8f       	std	Y+24, r26	; 0x18
    18d4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18d6:	6e 89       	ldd	r22, Y+22	; 0x16
    18d8:	7f 89       	ldd	r23, Y+23	; 0x17
    18da:	88 8d       	ldd	r24, Y+24	; 0x18
    18dc:	99 8d       	ldd	r25, Y+25	; 0x19
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <Enable_Pulse+0xe8>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9d 8b       	std	Y+21, r25	; 0x15
    18f4:	8c 8b       	std	Y+20, r24	; 0x14
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    18f8:	6e 89       	ldd	r22, Y+22	; 0x16
    18fa:	7f 89       	ldd	r23, Y+23	; 0x17
    18fc:	88 8d       	ldd	r24, Y+24	; 0x18
    18fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1912:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1916:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9d 8b       	std	Y+21, r25	; 0x15
    1936:	8c 8b       	std	Y+20, r24	; 0x14
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <Enable_Pulse+0x148>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9b 8b       	std	Y+19, r25	; 0x13
    1940:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1942:	8a 89       	ldd	r24, Y+18	; 0x12
    1944:	9b 89       	ldd	r25, Y+19	; 0x13
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <Enable_Pulse+0x136>
    194a:	9b 8b       	std	Y+19, r25	; 0x13
    194c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8c 89       	ldd	r24, Y+20	; 0x14
    1950:	9d 89       	ldd	r25, Y+21	; 0x15
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9d 8b       	std	Y+21, r25	; 0x15
    1956:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8c 89       	ldd	r24, Y+20	; 0x14
    195a:	9d 89       	ldd	r25, Y+21	; 0x15
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <Enable_Pulse+0x12a>
    1960:	24 c0       	rjmp	.+72     	; 0x19aa <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6e 89       	ldd	r22, Y+22	; 0x16
    1964:	7f 89       	ldd	r23, Y+23	; 0x17
    1966:	88 8d       	ldd	r24, Y+24	; 0x18
    1968:	99 8d       	ldd	r25, Y+25	; 0x19
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9d 8b       	std	Y+21, r25	; 0x15
    1974:	8c 8b       	std	Y+20, r24	; 0x14
    1976:	8c 89       	ldd	r24, Y+20	; 0x14
    1978:	9d 89       	ldd	r25, Y+21	; 0x15
    197a:	99 8b       	std	Y+17, r25	; 0x11
    197c:	88 8b       	std	Y+16, r24	; 0x10
    197e:	88 89       	ldd	r24, Y+16	; 0x10
    1980:	99 89       	ldd	r25, Y+17	; 0x11
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <Enable_Pulse+0x172>
    1986:	99 8b       	std	Y+17, r25	; 0x11
    1988:	88 8b       	std	Y+16, r24	; 0x10
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    198c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    198e:	78 a1       	ldd	r23, Y+32	; 0x20
    1990:	89 a1       	ldd	r24, Y+33	; 0x21
    1992:	9a a1       	ldd	r25, Y+34	; 0x22
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8e 8f       	std	Y+30, r24	; 0x1e
    199e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	8a 95       	dec	r24
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <Enable_Pulse+0x194>
    19a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	63 e0       	ldi	r22, 0x03	; 3
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <Enable_Pulse+0x1f6>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <Enable_Pulse+0x256>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Enable_Pulse+0x244>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <Enable_Pulse+0x238>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <Enable_Pulse+0x280>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a98:	a6 96       	adiw	r28, 0x26	; 38
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <Lcd_Data+0x6>
    1ab0:	0f 92       	push	r0
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	82 95       	swap	r24
    1ac0:	80 7f       	andi	r24, 0xF0	; 240
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	60 ef       	ldi	r22, 0xF0	; 240
    1ad2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ad4:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
	Enable_Pulse();
    1ad8:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	60 ef       	ldi	r22, 0xF0	; 240
    1ae0:	49 81       	ldd	r20, Y+1	; 0x01
    1ae2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
	Enable_Pulse();
    1ae6:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <Lcd_Cmd+0x6>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	82 95       	swap	r24
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	60 ef       	ldi	r22, 0xF0	; 240
    1b1e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b20:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
	Enable_Pulse();
    1b24:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	60 ef       	ldi	r22, 0xF0	; 240
    1b2c:	49 81       	ldd	r20, Y+1	; 0x01
    1b2e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <Dio_WriteGroup>
	Enable_Pulse();
    1b32:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_Data>
}
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <Lcd_DisplayStr+0x6>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b70:	80 81       	ld	r24, Z
    1b72:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
		str++;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	80 81       	ld	r24, Z
    1b86:	88 23       	and	r24, r24
    1b88:	89 f7       	brne	.-30     	; 0x1b6c <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <Lcd_Goto_Row_Column+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <Lcd_Goto_Row_Column+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	31 f0       	breq	.+12     	; 0x1bc2 <Lcd_Goto_Row_Column+0x2e>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	21 30       	cpi	r18, 0x01	; 1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	31 f0       	breq	.+12     	; 0x1bcc <Lcd_Goto_Row_Column+0x38>
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 58       	subi	r24, 0x80	; 128
    1bc6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 54       	subi	r24, 0x40	; 64
    1bd0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
		break;
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <Lcd_DisplayNum>:

void Lcd_DisplayNum(u16 num)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <Lcd_DisplayNum+0x6>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	28 ee       	ldi	r18, 0xE8	; 232
    1bf6:	33 e0       	ldi	r19, 0x03	; 3
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1bfe:	cb 01       	movw	r24, r22
    1c00:	80 5d       	subi	r24, 0xD0	; 208
    1c02:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	28 ee       	ldi	r18, 0xE8	; 232
    1c0c:	33 e0       	ldi	r19, 0x03	; 3
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c14:	24 e6       	ldi	r18, 0x64	; 100
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	b9 01       	movw	r22, r18
    1c1a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c1e:	cb 01       	movw	r24, r22
    1c20:	80 5d       	subi	r24, 0xD0	; 208
    1c22:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	28 ee       	ldi	r18, 0xE8	; 232
    1c2c:	33 e0       	ldi	r19, 0x03	; 3
    1c2e:	b9 01       	movw	r22, r18
    1c30:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c34:	24 e6       	ldi	r18, 0x64	; 100
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	b9 01       	movw	r22, r18
    1c3a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	80 5d       	subi	r24, 0xD0	; 208
    1c4c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	28 ee       	ldi	r18, 0xE8	; 232
    1c56:	33 e0       	ldi	r19, 0x03	; 3
    1c58:	b9 01       	movw	r22, r18
    1c5a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c5e:	24 e6       	ldi	r18, 0x64	; 100
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	b9 01       	movw	r22, r18
    1c64:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    1c72:	80 5d       	subi	r24, 0xD0	; 208
    1c74:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	69 87       	std	Y+9, r22	; 0x09
    1c98:	7a 87       	std	Y+10, r23	; 0x0a
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1c9e:	18 86       	std	Y+8, r1	; 0x08
    1ca0:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	ad 83       	std	Y+5, r26	; 0x05
    1cb0:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1cb2:	1a 82       	std	Y+2, r1	; 0x02
    1cb4:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1cb6:	69 85       	ldd	r22, Y+9	; 0x09
    1cb8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	cc 01       	movw	r24, r24
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	69 85       	ldd	r22, Y+9	; 0x09
    1ce2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ce4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ce8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	ad 83       	std	Y+5, r26	; 0x05
    1cf6:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1cf8:	6b 81       	ldd	r22, Y+3	; 0x03
    1cfa:	7c 81       	ldd	r23, Y+4	; 0x04
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	48 ec       	ldi	r20, 0xC8	; 200
    1d06:	52 e4       	ldi	r21, 0x42	; 66
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1d20:	8f 81       	ldd	r24, Y+7	; 0x07
    1d22:	98 85       	ldd	r25, Y+8	; 0x08
    1d24:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1d28:	8e e2       	ldi	r24, 0x2E	; 46
    1d2a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <Lcd_DisplayNum>
}
    1d36:	2c 96       	adiw	r28, 0x0c	; 12
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <Dio_ConfigChannel>:
 *  Created on: Feb 12, 2022
 *      Author: 20100
 */
#include "Dio.h"
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <Dio_ConfigChannel+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <Dio_ConfigChannel+0x8>
    1d50:	0f 92       	push	r0
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	6a 83       	std	Y+2, r22	; 0x02
    1d5a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3d 83       	std	Y+5, r19	; 0x05
    1d64:	2c 83       	std	Y+4, r18	; 0x04
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <Dio_ConfigChannel+0x2a>
    1d70:	43 c0       	rjmp	.+134    	; 0x1df8 <Dio_ConfigChannel+0xb0>
    1d72:	2c 81       	ldd	r18, Y+4	; 0x04
    1d74:	3d 81       	ldd	r19, Y+5	; 0x05
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <Dio_ConfigChannel+0x3e>
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	71 f0       	breq	.+28     	; 0x1da0 <Dio_ConfigChannel+0x58>
    1d84:	bc c0       	rjmp	.+376    	; 0x1efe <Dio_ConfigChannel+0x1b6>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <Dio_ConfigChannel+0x4a>
    1d90:	5f c0       	rjmp	.+190    	; 0x1e50 <Dio_ConfigChannel+0x108>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <Dio_ConfigChannel+0x56>
    1d9c:	85 c0       	rjmp	.+266    	; 0x1ea8 <Dio_ConfigChannel+0x160>
    1d9e:	af c0       	rjmp	.+350    	; 0x1efe <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction == INPUT)
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 23       	and	r24, r24
    1da4:	a9 f4       	brne	.+42     	; 0x1dd0 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    1da6:	aa e3       	ldi	r26, 0x3A	; 58
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ea e3       	ldi	r30, 0x3A	; 58
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <Dio_ConfigChannel+0x7c>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <Dio_ConfigChannel+0x78>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	97 c0       	rjmp	.+302    	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1dd0:	aa e3       	ldi	r26, 0x3A	; 58
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ea e3       	ldi	r30, 0x3A	; 58
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <Dio_ConfigChannel+0xa6>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <Dio_ConfigChannel+0xa2>
    1df2:	84 2b       	or	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	83 c0       	rjmp	.+262    	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction == INPUT)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 23       	and	r24, r24
    1dfc:	a9 f4       	brne	.+42     	; 0x1e28 <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    1dfe:	a7 e3       	ldi	r26, 0x37	; 55
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e7 e3       	ldi	r30, 0x37	; 55
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <Dio_ConfigChannel+0xd4>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <Dio_ConfigChannel+0xd0>
    1e20:	80 95       	com	r24
    1e22:	84 23       	and	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	6b c0       	rjmp	.+214    	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    1e28:	a7 e3       	ldi	r26, 0x37	; 55
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e7 e3       	ldi	r30, 0x37	; 55
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <Dio_ConfigChannel+0xfe>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <Dio_ConfigChannel+0xfa>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	57 c0       	rjmp	.+174    	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(direction == INPUT)
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	88 23       	and	r24, r24
    1e54:	a9 f4       	brne	.+42     	; 0x1e80 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    1e56:	a4 e3       	ldi	r26, 0x34	; 52
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e4 e3       	ldi	r30, 0x34	; 52
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <Dio_ConfigChannel+0x12c>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <Dio_ConfigChannel+0x128>
    1e78:	80 95       	com	r24
    1e7a:	84 23       	and	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1e80:	a4 e3       	ldi	r26, 0x34	; 52
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e4 e3       	ldi	r30, 0x34	; 52
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <Dio_ConfigChannel+0x156>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <Dio_ConfigChannel+0x152>
    1ea2:	84 2b       	or	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	2b c0       	rjmp	.+86     	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(direction == INPUT)
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 23       	and	r24, r24
    1eac:	a9 f4       	brne	.+42     	; 0x1ed8 <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    1eae:	a1 e3       	ldi	r26, 0x31	; 49
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e1 e3       	ldi	r30, 0x31	; 49
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <Dio_ConfigChannel+0x184>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <Dio_ConfigChannel+0x180>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	13 c0       	rjmp	.+38     	; 0x1efe <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    1ed8:	a1 e3       	ldi	r26, 0x31	; 49
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e1 e3       	ldi	r30, 0x31	; 49
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <Dio_ConfigChannel+0x1ae>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <Dio_ConfigChannel+0x1aa>
    1efa:	84 2b       	or	r24, r20
    1efc:	8c 93       	st	X, r24
		}
		break;
	}

}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <Dio_WriteChannel+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <Dio_WriteChannel+0x8>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6a 83       	std	Y+2, r22	; 0x02
    1f20:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	2c 83       	std	Y+4, r18	; 0x04
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <Dio_WriteChannel+0x2a>
    1f36:	43 c0       	rjmp	.+134    	; 0x1fbe <Dio_WriteChannel+0xb0>
    1f38:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <Dio_WriteChannel+0x3e>
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	71 f0       	breq	.+28     	; 0x1f66 <Dio_WriteChannel+0x58>
    1f4a:	bc c0       	rjmp	.+376    	; 0x20c4 <Dio_WriteChannel+0x1b6>
    1f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <Dio_WriteChannel+0x4a>
    1f56:	5f c0       	rjmp	.+190    	; 0x2016 <Dio_WriteChannel+0x108>
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <Dio_WriteChannel+0x56>
    1f62:	85 c0       	rjmp	.+266    	; 0x206e <Dio_WriteChannel+0x160>
    1f64:	af c0       	rjmp	.+350    	; 0x20c4 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level == STD_HIGH)
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	a1 f4       	brne	.+40     	; 0x1f94 <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    1f6c:	ab e3       	ldi	r26, 0x3B	; 59
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	eb e3       	ldi	r30, 0x3B	; 59
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <Dio_WriteChannel+0x7c>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <Dio_WriteChannel+0x78>
    1f8e:	84 2b       	or	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	98 c0       	rjmp	.+304    	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    1f94:	ab e3       	ldi	r26, 0x3B	; 59
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	eb e3       	ldi	r30, 0x3B	; 59
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	48 2f       	mov	r20, r24
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <Dio_WriteChannel+0xa4>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <Dio_WriteChannel+0xa0>
    1fb6:	80 95       	com	r24
    1fb8:	84 23       	and	r24, r20
    1fba:	8c 93       	st	X, r24
    1fbc:	83 c0       	rjmp	.+262    	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(level == STD_HIGH)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	a1 f4       	brne	.+40     	; 0x1fec <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    1fc4:	a8 e3       	ldi	r26, 0x38	; 56
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e8 e3       	ldi	r30, 0x38	; 56
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	48 2f       	mov	r20, r24
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 2e       	mov	r0, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <Dio_WriteChannel+0xd4>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	0a 94       	dec	r0
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <Dio_WriteChannel+0xd0>
    1fe6:	84 2b       	or	r24, r20
    1fe8:	8c 93       	st	X, r24
    1fea:	6c c0       	rjmp	.+216    	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    1fec:	a8 e3       	ldi	r26, 0x38	; 56
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e8 e3       	ldi	r30, 0x38	; 56
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <Dio_WriteChannel+0xfc>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <Dio_WriteChannel+0xf8>
    200e:	80 95       	com	r24
    2010:	84 23       	and	r24, r20
    2012:	8c 93       	st	X, r24
    2014:	57 c0       	rjmp	.+174    	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(level == STD_HIGH)
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	a1 f4       	brne	.+40     	; 0x2044 <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    201c:	a5 e3       	ldi	r26, 0x35	; 53
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e3       	ldi	r30, 0x35	; 53
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <Dio_WriteChannel+0x12c>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <Dio_WriteChannel+0x128>
    203e:	84 2b       	or	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	40 c0       	rjmp	.+128    	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    2044:	a5 e3       	ldi	r26, 0x35	; 53
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e5 e3       	ldi	r30, 0x35	; 53
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 2e       	mov	r0, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <Dio_WriteChannel+0x154>
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	0a 94       	dec	r0
    2064:	e2 f7       	brpl	.-8      	; 0x205e <Dio_WriteChannel+0x150>
    2066:	80 95       	com	r24
    2068:	84 23       	and	r24, r20
    206a:	8c 93       	st	X, r24
    206c:	2b c0       	rjmp	.+86     	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(level == STD_HIGH)
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	a1 f4       	brne	.+40     	; 0x209c <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2074:	a2 e3       	ldi	r26, 0x32	; 50
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e2 e3       	ldi	r30, 0x32	; 50
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <Dio_WriteChannel+0x184>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <Dio_WriteChannel+0x180>
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    209c:	a2 e3       	ldi	r26, 0x32	; 50
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e2 e3       	ldi	r30, 0x32	; 50
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <Dio_WriteChannel+0x1ac>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <Dio_WriteChannel+0x1a8>
    20be:	80 95       	com	r24
    20c0:	84 23       	and	r24, r20
    20c2:	8c 93       	st	X, r24
		}
		break;
	}
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <Dio_WriteGroup+0x6>
    20da:	00 d0       	rcall	.+0      	; 0x20dc <Dio_WriteGroup+0x8>
    20dc:	0f 92       	push	r0
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	6a 83       	std	Y+2, r22	; 0x02
    20e6:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3d 83       	std	Y+5, r19	; 0x05
    20f0:	2c 83       	std	Y+4, r18	; 0x04
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	91 05       	cpc	r25, r1
    20fa:	59 f1       	breq	.+86     	; 0x2152 <Dio_WriteGroup+0x7e>
    20fc:	2c 81       	ldd	r18, Y+4	; 0x04
    20fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	2c f4       	brge	.+10     	; 0x2110 <Dio_WriteGroup+0x3c>
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	69 f0       	breq	.+26     	; 0x2128 <Dio_WriteGroup+0x54>
    210e:	5f c0       	rjmp	.+190    	; 0x21ce <Dio_WriteGroup+0xfa>
    2110:	2c 81       	ldd	r18, Y+4	; 0x04
    2112:	3d 81       	ldd	r19, Y+5	; 0x05
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	89 f1       	breq	.+98     	; 0x217c <Dio_WriteGroup+0xa8>
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	91 05       	cpc	r25, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <Dio_WriteGroup+0x52>
    2124:	40 c0       	rjmp	.+128    	; 0x21a6 <Dio_WriteGroup+0xd2>
    2126:	53 c0       	rjmp	.+166    	; 0x21ce <Dio_WriteGroup+0xfa>
	{
	case DIO_PORTA:

		DIO_PORTA_REG &= ~mask;
    2128:	ab e3       	ldi	r26, 0x3B	; 59
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	eb e3       	ldi	r30, 0x3B	; 59
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	98 2f       	mov	r25, r24
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	80 95       	com	r24
    2138:	89 23       	and	r24, r25
    213a:	8c 93       	st	X, r24
		DIO_PORTA_REG |= (data & mask);
    213c:	ab e3       	ldi	r26, 0x3B	; 59
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	eb e3       	ldi	r30, 0x3B	; 59
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	20 81       	ld	r18, Z
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	89 23       	and	r24, r25
    214c:	82 2b       	or	r24, r18
    214e:	8c 93       	st	X, r24
    2150:	3e c0       	rjmp	.+124    	; 0x21ce <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG &= ~mask;
    2152:	a8 e3       	ldi	r26, 0x38	; 56
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e8 e3       	ldi	r30, 0x38	; 56
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	98 2f       	mov	r25, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	80 95       	com	r24
    2162:	89 23       	and	r24, r25
    2164:	8c 93       	st	X, r24
		DIO_PORTB_REG |= (data & mask);
    2166:	a8 e3       	ldi	r26, 0x38	; 56
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e8 e3       	ldi	r30, 0x38	; 56
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	20 81       	ld	r18, Z
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	89 23       	and	r24, r25
    2176:	82 2b       	or	r24, r18
    2178:	8c 93       	st	X, r24
    217a:	29 c0       	rjmp	.+82     	; 0x21ce <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG &= ~mask;
    217c:	a5 e3       	ldi	r26, 0x35	; 53
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e3       	ldi	r30, 0x35	; 53
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	98 2f       	mov	r25, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	80 95       	com	r24
    218c:	89 23       	and	r24, r25
    218e:	8c 93       	st	X, r24
		DIO_PORTC_REG |= (data & mask);
    2190:	a5 e3       	ldi	r26, 0x35	; 53
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e3       	ldi	r30, 0x35	; 53
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	20 81       	ld	r18, Z
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	89 23       	and	r24, r25
    21a0:	82 2b       	or	r24, r18
    21a2:	8c 93       	st	X, r24
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG &= ~mask;
    21a6:	a2 e3       	ldi	r26, 0x32	; 50
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e2 e3       	ldi	r30, 0x32	; 50
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	98 2f       	mov	r25, r24
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	80 95       	com	r24
    21b6:	89 23       	and	r24, r25
    21b8:	8c 93       	st	X, r24
		DIO_PORTD_REG |= (data & mask);
    21ba:	a2 e3       	ldi	r26, 0x32	; 50
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e2 e3       	ldi	r30, 0x32	; 50
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	20 81       	ld	r18, Z
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	89 23       	and	r24, r25
    21ca:	82 2b       	or	r24, r18
    21cc:	8c 93       	st	X, r24
		break;
	}
}
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <Dio_ToggleChannel>:
void Dio_ToggleChannel(port_type port, pin_type pin)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <Dio_ToggleChannel+0x6>
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <Dio_ToggleChannel+0x8>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	3c 83       	std	Y+4, r19	; 0x04
    21f6:	2b 83       	std	Y+3, r18	; 0x03
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	91 05       	cpc	r25, r1
    2200:	49 f1       	breq	.+82     	; 0x2254 <Dio_ToggleChannel+0x76>
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	2c f4       	brge	.+10     	; 0x2216 <Dio_ToggleChannel+0x38>
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	61 f0       	breq	.+24     	; 0x222c <Dio_ToggleChannel+0x4e>
    2214:	5a c0       	rjmp	.+180    	; 0x22ca <Dio_ToggleChannel+0xec>
    2216:	2b 81       	ldd	r18, Y+3	; 0x03
    2218:	3c 81       	ldd	r19, Y+4	; 0x04
    221a:	22 30       	cpi	r18, 0x02	; 2
    221c:	31 05       	cpc	r19, r1
    221e:	71 f1       	breq	.+92     	; 0x227c <Dio_ToggleChannel+0x9e>
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	83 30       	cpi	r24, 0x03	; 3
    2226:	91 05       	cpc	r25, r1
    2228:	e9 f1       	breq	.+122    	; 0x22a4 <Dio_ToggleChannel+0xc6>
    222a:	4f c0       	rjmp	.+158    	; 0x22ca <Dio_ToggleChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    222c:	ab e3       	ldi	r26, 0x3B	; 59
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	eb e3       	ldi	r30, 0x3B	; 59
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <Dio_ToggleChannel+0x6c>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <Dio_ToggleChannel+0x68>
    224e:	84 27       	eor	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	3b c0       	rjmp	.+118    	; 0x22ca <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    2254:	a8 e3       	ldi	r26, 0x38	; 56
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e8 e3       	ldi	r30, 0x38	; 56
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 2e       	mov	r0, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <Dio_ToggleChannel+0x94>
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <Dio_ToggleChannel+0x90>
    2276:	84 27       	eor	r24, r20
    2278:	8c 93       	st	X, r24
    227a:	27 c0       	rjmp	.+78     	; 0x22ca <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    227c:	a5 e3       	ldi	r26, 0x35	; 53
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e5 e3       	ldi	r30, 0x35	; 53
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	48 2f       	mov	r20, r24
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	02 2e       	mov	r0, r18
    2294:	02 c0       	rjmp	.+4      	; 0x229a <Dio_ToggleChannel+0xbc>
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <Dio_ToggleChannel+0xb8>
    229e:	84 27       	eor	r24, r20
    22a0:	8c 93       	st	X, r24
    22a2:	13 c0       	rjmp	.+38     	; 0x22ca <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    22a4:	a2 e3       	ldi	r26, 0x32	; 50
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e2 e3       	ldi	r30, 0x32	; 50
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <Dio_ToggleChannel+0xe4>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <Dio_ToggleChannel+0xe0>
    22c6:	84 27       	eor	r24, r20
    22c8:	8c 93       	st	X, r24
		break;
	}
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <Dio_ReadChannel+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <Dio_ReadChannel+0x8>
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	6b 83       	std	Y+3, r22	; 0x03
	level_type res = STD_LOW;
    22ea:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	3d 83       	std	Y+5, r19	; 0x05
    22f4:	2c 83       	std	Y+4, r18	; 0x04
    22f6:	4c 81       	ldd	r20, Y+4	; 0x04
    22f8:	5d 81       	ldd	r21, Y+5	; 0x05
    22fa:	41 30       	cpi	r20, 0x01	; 1
    22fc:	51 05       	cpc	r21, r1
    22fe:	79 f1       	breq	.+94     	; 0x235e <Dio_ReadChannel+0x86>
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	9d 81       	ldd	r25, Y+5	; 0x05
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	91 05       	cpc	r25, r1
    2308:	34 f4       	brge	.+12     	; 0x2316 <Dio_ReadChannel+0x3e>
    230a:	2c 81       	ldd	r18, Y+4	; 0x04
    230c:	3d 81       	ldd	r19, Y+5	; 0x05
    230e:	21 15       	cp	r18, r1
    2310:	31 05       	cpc	r19, r1
    2312:	69 f0       	breq	.+26     	; 0x232e <Dio_ReadChannel+0x56>
    2314:	6b c0       	rjmp	.+214    	; 0x23ec <Dio_ReadChannel+0x114>
    2316:	4c 81       	ldd	r20, Y+4	; 0x04
    2318:	5d 81       	ldd	r21, Y+5	; 0x05
    231a:	42 30       	cpi	r20, 0x02	; 2
    231c:	51 05       	cpc	r21, r1
    231e:	b9 f1       	breq	.+110    	; 0x238e <Dio_ReadChannel+0xb6>
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <Dio_ReadChannel+0x54>
    232a:	49 c0       	rjmp	.+146    	; 0x23be <Dio_ReadChannel+0xe6>
    232c:	5f c0       	rjmp	.+190    	; 0x23ec <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if (GET_BIT(DIO_PINA_REG,pin))
    232e:	e9 e3       	ldi	r30, 0x39	; 57
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a9 01       	movw	r20, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <Dio_ReadChannel+0x6e>
    2342:	55 95       	asr	r21
    2344:	47 95       	ror	r20
    2346:	8a 95       	dec	r24
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <Dio_ReadChannel+0x6a>
    234a:	ca 01       	movw	r24, r20
    234c:	81 70       	andi	r24, 0x01	; 1
    234e:	90 70       	andi	r25, 0x00	; 0
    2350:	88 23       	and	r24, r24
    2352:	19 f0       	breq	.+6      	; 0x235a <Dio_ReadChannel+0x82>
			res = STD_HIGH;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	49 c0       	rjmp	.+146    	; 0x23ec <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    235a:	19 82       	std	Y+1, r1	; 0x01
    235c:	47 c0       	rjmp	.+142    	; 0x23ec <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTB:
		if (GET_BIT(DIO_PINB_REG,pin))
    235e:	e6 e3       	ldi	r30, 0x36	; 54
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a9 01       	movw	r20, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <Dio_ReadChannel+0x9e>
    2372:	55 95       	asr	r21
    2374:	47 95       	ror	r20
    2376:	8a 95       	dec	r24
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <Dio_ReadChannel+0x9a>
    237a:	ca 01       	movw	r24, r20
    237c:	81 70       	andi	r24, 0x01	; 1
    237e:	90 70       	andi	r25, 0x00	; 0
    2380:	88 23       	and	r24, r24
    2382:	19 f0       	breq	.+6      	; 0x238a <Dio_ReadChannel+0xb2>
			res = STD_HIGH;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	31 c0       	rjmp	.+98     	; 0x23ec <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    238a:	19 82       	std	Y+1, r1	; 0x01
    238c:	2f c0       	rjmp	.+94     	; 0x23ec <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTC:
		if (GET_BIT(DIO_PINC_REG,pin))
    238e:	e3 e3       	ldi	r30, 0x33	; 51
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a9 01       	movw	r20, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <Dio_ReadChannel+0xce>
    23a2:	55 95       	asr	r21
    23a4:	47 95       	ror	r20
    23a6:	8a 95       	dec	r24
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <Dio_ReadChannel+0xca>
    23aa:	ca 01       	movw	r24, r20
    23ac:	81 70       	andi	r24, 0x01	; 1
    23ae:	90 70       	andi	r25, 0x00	; 0
    23b0:	88 23       	and	r24, r24
    23b2:	19 f0       	breq	.+6      	; 0x23ba <Dio_ReadChannel+0xe2>
			res = STD_HIGH;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	19 c0       	rjmp	.+50     	; 0x23ec <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    23ba:	19 82       	std	Y+1, r1	; 0x01
    23bc:	17 c0       	rjmp	.+46     	; 0x23ec <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTD:
		if (GET_BIT(DIO_PIND_REG,pin))
    23be:	e0 e3       	ldi	r30, 0x30	; 48
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a9 01       	movw	r20, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <Dio_ReadChannel+0xfe>
    23d2:	55 95       	asr	r21
    23d4:	47 95       	ror	r20
    23d6:	8a 95       	dec	r24
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <Dio_ReadChannel+0xfa>
    23da:	ca 01       	movw	r24, r20
    23dc:	81 70       	andi	r24, 0x01	; 1
    23de:	90 70       	andi	r25, 0x00	; 0
    23e0:	88 23       	and	r24, r24
    23e2:	19 f0       	breq	.+6      	; 0x23ea <Dio_ReadChannel+0x112>
			res = STD_HIGH;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    23ea:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return res;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <BUZZER_Init>:
 *      Author: 20100
 */
#include "Buzzer.h"

void BUZZER_Init(void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	63 e0       	ldi	r22, 0x03	; 3
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <BUZZER_ON>:
void BUZZER_ON(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_HIGH);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	63 e0       	ldi	r22, 0x03	; 3
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_LOW);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Dio_WriteChannel>
}
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <BUZZER_TOGGLE>:
void BUZZER_TOGGLE(void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	Dio_ToggleChannel(BUZZER_PORT, BUZZER_PIN);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	63 e0       	ldi	r22, 0x03	; 3
    2452:	0e 94 ef 10 	call	0x21de	; 0x21de <Dio_ToggleChannel>
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <Buzzer_GetStatus>:
buzzer_type Buzzer_GetStatus(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	buzzer_type status = OFF;
    2466:	19 82       	std	Y+1, r1	; 0x01
	if(Dio_ReadChannel(BUZZER_PORT, BUZZER_PIN) == STD_HIGH)
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	63 e0       	ldi	r22, 0x03	; 3
    246c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <Dio_ReadChannel>
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	19 f4       	brne	.+6      	; 0x247a <Buzzer_GetStatus+0x1e>
	{
		status = ON;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	01 c0       	rjmp	.+2      	; 0x247c <Buzzer_GetStatus+0x20>
	}
	else
	{
		status = OFF;
    247a:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <Button_Init>:
 */

#include "Button.h"

void Button_Init(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT, BUTTON0_PIN, INPUT);//BUTTON 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRB_REG,0);
	Dio_ConfigChannel(BUTTON1_PORT, BUTTON1_PIN, INPUT);//BUTTON 1
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	66 e0       	ldi	r22, 0x06	; 6
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,6);
	Dio_ConfigChannel(BUTTON2_PORT, BUTTON2_PIN, INPUT);//BUTTON 2
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	62 e0       	ldi	r22, 0x02	; 2
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,2);
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <Button_GetStatus+0x6>
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <Button_GetStatus+0x8>
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    24c0:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	3c 83       	std	Y+4, r19	; 0x04
    24ca:	2b 83       	std	Y+3, r18	; 0x03
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	91 05       	cpc	r25, r1
    24d4:	a1 f0       	breq	.+40     	; 0x24fe <Button_GetStatus+0x4c>
    24d6:	2b 81       	ldd	r18, Y+3	; 0x03
    24d8:	3c 81       	ldd	r19, Y+4	; 0x04
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	d1 f0       	breq	.+52     	; 0x2514 <Button_GetStatus+0x62>
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	01 f5       	brne	.+64     	; 0x2528 <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if(Dio_ReadChannel(BUTTON0_PORT, BUTTON0_PIN) == STD_HIGH)
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <Dio_ReadChannel>
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	19 f4       	brne	.+6      	; 0x24fa <Button_GetStatus+0x48>
		{
			status = PRESSED;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	17 c0       	rjmp	.+46     	; 0x2528 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	15 c0       	rjmp	.+42     	; 0x2528 <Button_GetStatus+0x76>
		}
		break;
	case BUTTON1:
		if(Dio_ReadChannel(BUTTON1_PORT, BUTTON1_PIN) == STD_HIGH)
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	66 e0       	ldi	r22, 0x06	; 6
    2502:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <Dio_ReadChannel>
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	19 f4       	brne	.+6      	; 0x2510 <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	0c c0       	rjmp	.+24     	; 0x2528 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    2510:	19 82       	std	Y+1, r1	; 0x01
    2512:	0a c0       	rjmp	.+20     	; 0x2528 <Button_GetStatus+0x76>
		}
		break;
	case BUTTON2:
		if(Dio_ReadChannel(BUTTON2_PORT, BUTTON2_PIN) == STD_HIGH)
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <Dio_ReadChannel>
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	19 f4       	brne	.+6      	; 0x2526 <Button_GetStatus+0x74>
		{
			status = PRESSED;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    2526:	19 82       	std	Y+1, r1	; 0x01
		}
		break;


	}
	return status;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <ndigit>:
	vdown
}axis;


int ndigit(int n)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <ndigit+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <ndigit+0x8>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
    if (n/10 == 0)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	09 96       	adiw	r24, 0x09	; 9
    254e:	83 31       	cpi	r24, 0x13	; 19
    2550:	91 05       	cpc	r25, r1
    2552:	28 f4       	brcc	.+10     	; 0x255e <ndigit+0x26>
        return 1;
    2554:	21 e0       	ldi	r18, 0x01	; 1
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	3c 83       	std	Y+4, r19	; 0x04
    255a:	2b 83       	std	Y+3, r18	; 0x03
    255c:	0f c0       	rjmp	.+30     	; 0x257c <ndigit+0x44>
    return 1 + ndigit(n / 10);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	b9 01       	movw	r22, r18
    2568:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__divmodhi4>
    256c:	cb 01       	movw	r24, r22
    256e:	0e 94 9c 12 	call	0x2538	; 0x2538 <ndigit>
    2572:	9c 01       	movw	r18, r24
    2574:	2f 5f       	subi	r18, 0xFF	; 255
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	3c 83       	std	Y+4, r19	; 0x04
    257a:	2b 83       	std	Y+3, r18	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <GLCD_Command>:

void GLCD_Command(char Command) /* GLCD command function */
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	e1 97       	sbiw	r28, 0x31	; 49
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Command;        /* Copy command on data pin */
    25a4:	eb e3       	ldi	r30, 0x3B	; 59
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	89 a9       	ldd	r24, Y+49	; 0x31
    25aa:	80 83       	st	Z, r24
    Command_Port &= ~(1 << RS); /* Make RS LOW to select command register */
    25ac:	a5 e3       	ldi	r26, 0x35	; 53
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e5 e3       	ldi	r30, 0x35	; 53
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	8e 7f       	andi	r24, 0xFE	; 254
    25b8:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    25ba:	a5 e3       	ldi	r26, 0x35	; 53
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e3       	ldi	r30, 0x35	; 53
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8d 7f       	andi	r24, 0xFD	; 253
    25c6:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    25c8:	a5 e3       	ldi	r26, 0x35	; 53
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e3       	ldi	r30, 0x35	; 53
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	84 60       	ori	r24, 0x04	; 4
    25d4:	8c 93       	st	X, r24
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 ea       	ldi	r26, 0xA0	; 160
    25dc:	b0 e4       	ldi	r27, 0x40	; 64
    25de:	8d a7       	std	Y+45, r24	; 0x2d
    25e0:	9e a7       	std	Y+46, r25	; 0x2e
    25e2:	af a7       	std	Y+47, r26	; 0x2f
    25e4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    25e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    25ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ec:	98 a9       	ldd	r25, Y+48	; 0x30
    25ee:	2b ea       	ldi	r18, 0xAB	; 171
    25f0:	3a ea       	ldi	r19, 0xAA	; 170
    25f2:	4a e2       	ldi	r20, 0x2A	; 42
    25f4:	50 e4       	ldi	r21, 0x40	; 64
    25f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 a7       	std	Y+41, r24	; 0x29
    2600:	9a a7       	std	Y+42, r25	; 0x2a
    2602:	ab a7       	std	Y+43, r26	; 0x2b
    2604:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2606:	69 a5       	ldd	r22, Y+41	; 0x29
    2608:	7a a5       	ldd	r23, Y+42	; 0x2a
    260a:	8b a5       	ldd	r24, Y+43	; 0x2b
    260c:	9c a5       	ldd	r25, Y+44	; 0x2c
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	1c f4       	brge	.+6      	; 0x2624 <GLCD_Command+0x96>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	88 a7       	std	Y+40, r24	; 0x28
    2622:	91 c0       	rjmp	.+290    	; 0x2746 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    2624:	69 a5       	ldd	r22, Y+41	; 0x29
    2626:	7a a5       	ldd	r23, Y+42	; 0x2a
    2628:	8b a5       	ldd	r24, Y+43	; 0x2b
    262a:	9c a5       	ldd	r25, Y+44	; 0x2c
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	53 e4       	ldi	r21, 0x43	; 67
    2634:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	0c f0       	brlt	.+2      	; 0x263e <GLCD_Command+0xb0>
    263c:	7b c0       	rjmp	.+246    	; 0x2734 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    263e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2640:	7e a5       	ldd	r23, Y+46	; 0x2e
    2642:	8f a5       	ldd	r24, Y+47	; 0x2f
    2644:	98 a9       	ldd	r25, Y+48	; 0x30
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a e7       	ldi	r20, 0x7A	; 122
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8c a3       	std	Y+36, r24	; 0x24
    2658:	9d a3       	std	Y+37, r25	; 0x25
    265a:	ae a3       	std	Y+38, r26	; 0x26
    265c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6c a1       	ldd	r22, Y+36	; 0x24
    2660:	7d a1       	ldd	r23, Y+37	; 0x25
    2662:	8e a1       	ldd	r24, Y+38	; 0x26
    2664:	9f a1       	ldd	r25, Y+39	; 0x27
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a ef       	ldi	r20, 0xFA	; 250
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	88 a3       	std	Y+32, r24	; 0x20
    2678:	99 a3       	std	Y+33, r25	; 0x21
    267a:	aa a3       	std	Y+34, r26	; 0x22
    267c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    267e:	68 a1       	ldd	r22, Y+32	; 0x20
    2680:	79 a1       	ldd	r23, Y+33	; 0x21
    2682:	8a a1       	ldd	r24, Y+34	; 0x22
    2684:	9b a1       	ldd	r25, Y+35	; 0x23
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <GLCD_Command+0x112>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9f 8f       	std	Y+31, r25	; 0x1f
    269c:	8e 8f       	std	Y+30, r24	; 0x1e
    269e:	3f c0       	rjmp	.+126    	; 0x271e <GLCD_Command+0x190>
	else if (__tmp > 65535)
    26a0:	68 a1       	ldd	r22, Y+32	; 0x20
    26a2:	79 a1       	ldd	r23, Y+33	; 0x21
    26a4:	8a a1       	ldd	r24, Y+34	; 0x22
    26a6:	9b a1       	ldd	r25, Y+35	; 0x23
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6c a1       	ldd	r22, Y+36	; 0x24
    26ba:	7d a1       	ldd	r23, Y+37	; 0x25
    26bc:	8e a1       	ldd	r24, Y+38	; 0x26
    26be:	9f a1       	ldd	r25, Y+39	; 0x27
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9f 8f       	std	Y+31, r25	; 0x1f
    26de:	8e 8f       	std	Y+30, r24	; 0x1e
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <GLCD_Command+0x172>
    26e2:	88 ec       	ldi	r24, 0xC8	; 200
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9d 8f       	std	Y+29, r25	; 0x1d
    26e8:	8c 8f       	std	Y+28, r24	; 0x1c
    26ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <GLCD_Command+0x160>
    26f2:	9d 8f       	std	Y+29, r25	; 0x1d
    26f4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9f 8f       	std	Y+31, r25	; 0x1f
    26fe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2702:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <GLCD_Command+0x154>
    2708:	24 c0       	rjmp	.+72     	; 0x2752 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	68 a1       	ldd	r22, Y+32	; 0x20
    270c:	79 a1       	ldd	r23, Y+33	; 0x21
    270e:	8a a1       	ldd	r24, Y+34	; 0x22
    2710:	9b a1       	ldd	r25, Y+35	; 0x23
    2712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9f 8f       	std	Y+31, r25	; 0x1f
    271c:	8e 8f       	std	Y+30, r24	; 0x1e
    271e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2720:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2722:	9b 8f       	std	Y+27, r25	; 0x1b
    2724:	8a 8f       	std	Y+26, r24	; 0x1a
    2726:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2728:	9b 8d       	ldd	r25, Y+27	; 0x1b
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <GLCD_Command+0x19c>
    272e:	9b 8f       	std	Y+27, r25	; 0x1b
    2730:	8a 8f       	std	Y+26, r24	; 0x1a
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2734:	69 a5       	ldd	r22, Y+41	; 0x29
    2736:	7a a5       	ldd	r23, Y+42	; 0x2a
    2738:	8b a5       	ldd	r24, Y+43	; 0x2b
    273a:	9c a5       	ldd	r25, Y+44	; 0x2c
    273c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	88 a7       	std	Y+40, r24	; 0x28
    2746:	88 a5       	ldd	r24, Y+40	; 0x28
    2748:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    274a:	89 8d       	ldd	r24, Y+25	; 0x19
    274c:	8a 95       	dec	r24
    274e:	f1 f7       	brne	.-4      	; 0x274c <GLCD_Command+0x1be>
    2750:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    2752:	a5 e3       	ldi	r26, 0x35	; 53
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e5 e3       	ldi	r30, 0x35	; 53
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8b 7f       	andi	r24, 0xFB	; 251
    275e:	8c 93       	st	X, r24
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a0 ea       	ldi	r26, 0xA0	; 160
    2766:	b0 e4       	ldi	r27, 0x40	; 64
    2768:	8d 8b       	std	Y+21, r24	; 0x15
    276a:	9e 8b       	std	Y+22, r25	; 0x16
    276c:	af 8b       	std	Y+23, r26	; 0x17
    276e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2770:	6d 89       	ldd	r22, Y+21	; 0x15
    2772:	7e 89       	ldd	r23, Y+22	; 0x16
    2774:	8f 89       	ldd	r24, Y+23	; 0x17
    2776:	98 8d       	ldd	r25, Y+24	; 0x18
    2778:	2b ea       	ldi	r18, 0xAB	; 171
    277a:	3a ea       	ldi	r19, 0xAA	; 170
    277c:	4a e2       	ldi	r20, 0x2A	; 42
    277e:	50 e4       	ldi	r21, 0x40	; 64
    2780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	89 8b       	std	Y+17, r24	; 0x11
    278a:	9a 8b       	std	Y+18, r25	; 0x12
    278c:	ab 8b       	std	Y+19, r26	; 0x13
    278e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2790:	69 89       	ldd	r22, Y+17	; 0x11
    2792:	7a 89       	ldd	r23, Y+18	; 0x12
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	1c f4       	brge	.+6      	; 0x27ae <GLCD_Command+0x220>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	88 8b       	std	Y+16, r24	; 0x10
    27ac:	91 c0       	rjmp	.+290    	; 0x28d0 <GLCD_Command+0x342>
	else if (__tmp > 255)
    27ae:	69 89       	ldd	r22, Y+17	; 0x11
    27b0:	7a 89       	ldd	r23, Y+18	; 0x12
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	53 e4       	ldi	r21, 0x43	; 67
    27be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <GLCD_Command+0x23a>
    27c6:	7b c0       	rjmp	.+246    	; 0x28be <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    27c8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ca:	7e 89       	ldd	r23, Y+22	; 0x16
    27cc:	8f 89       	ldd	r24, Y+23	; 0x17
    27ce:	98 8d       	ldd	r25, Y+24	; 0x18
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8c 87       	std	Y+12, r24	; 0x0c
    27e2:	9d 87       	std	Y+13, r25	; 0x0d
    27e4:	ae 87       	std	Y+14, r26	; 0x0e
    27e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	88 87       	std	Y+8, r24	; 0x08
    2802:	99 87       	std	Y+9, r25	; 0x09
    2804:	aa 87       	std	Y+10, r26	; 0x0a
    2806:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2808:	68 85       	ldd	r22, Y+8	; 0x08
    280a:	79 85       	ldd	r23, Y+9	; 0x09
    280c:	8a 85       	ldd	r24, Y+10	; 0x0a
    280e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <GLCD_Command+0x29c>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9f 83       	std	Y+7, r25	; 0x07
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    282a:	68 85       	ldd	r22, Y+8	; 0x08
    282c:	79 85       	ldd	r23, Y+9	; 0x09
    282e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2830:	9b 85       	ldd	r25, Y+11	; 0x0b
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6c 85       	ldd	r22, Y+12	; 0x0c
    2844:	7d 85       	ldd	r23, Y+13	; 0x0d
    2846:	8e 85       	ldd	r24, Y+14	; 0x0e
    2848:	9f 85       	ldd	r25, Y+15	; 0x0f
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9f 83       	std	Y+7, r25	; 0x07
    2868:	8e 83       	std	Y+6, r24	; 0x06
    286a:	0f c0       	rjmp	.+30     	; 0x288a <GLCD_Command+0x2fc>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9d 83       	std	Y+5, r25	; 0x05
    2872:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	9d 81       	ldd	r25, Y+5	; 0x05
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <GLCD_Command+0x2ea>
    287c:	9d 83       	std	Y+5, r25	; 0x05
    287e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8e 81       	ldd	r24, Y+6	; 0x06
    2882:	9f 81       	ldd	r25, Y+7	; 0x07
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9f 83       	std	Y+7, r25	; 0x07
    2888:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8e 81       	ldd	r24, Y+6	; 0x06
    288c:	9f 81       	ldd	r25, Y+7	; 0x07
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <GLCD_Command+0x2de>
    2892:	24 c0       	rjmp	.+72     	; 0x28dc <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	68 85       	ldd	r22, Y+8	; 0x08
    2896:	79 85       	ldd	r23, Y+9	; 0x09
    2898:	8a 85       	ldd	r24, Y+10	; 0x0a
    289a:	9b 85       	ldd	r25, Y+11	; 0x0b
    289c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9f 83       	std	Y+7, r25	; 0x07
    28a6:	8e 83       	std	Y+6, r24	; 0x06
    28a8:	8e 81       	ldd	r24, Y+6	; 0x06
    28aa:	9f 81       	ldd	r25, Y+7	; 0x07
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	9b 81       	ldd	r25, Y+3	; 0x03
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <GLCD_Command+0x326>
    28b8:	9b 83       	std	Y+3, r25	; 0x03
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28be:	69 89       	ldd	r22, Y+17	; 0x11
    28c0:	7a 89       	ldd	r23, Y+18	; 0x12
    28c2:	8b 89       	ldd	r24, Y+19	; 0x13
    28c4:	9c 89       	ldd	r25, Y+20	; 0x14
    28c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	88 8b       	std	Y+16, r24	; 0x10
    28d0:	88 89       	ldd	r24, Y+16	; 0x10
    28d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	8a 95       	dec	r24
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <GLCD_Command+0x348>
    28da:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    28dc:	e1 96       	adiw	r28, 0x31	; 49
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <GLCD_Data>:

void GLCD_Data(char Data) /* GLCD data function */
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	e1 97       	sbiw	r28, 0x31	; 49
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Data;           /* Copy data on data pin */
    2904:	eb e3       	ldi	r30, 0x3B	; 59
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	89 a9       	ldd	r24, Y+49	; 0x31
    290a:	80 83       	st	Z, r24
    Command_Port |= (1 << RS);  /* Make RS HIGH to select data register */
    290c:	a5 e3       	ldi	r26, 0x35	; 53
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e5 e3       	ldi	r30, 0x35	; 53
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	81 60       	ori	r24, 0x01	; 1
    2918:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    291a:	a5 e3       	ldi	r26, 0x35	; 53
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e5 e3       	ldi	r30, 0x35	; 53
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8d 7f       	andi	r24, 0xFD	; 253
    2926:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    2928:	a5 e3       	ldi	r26, 0x35	; 53
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e5 e3       	ldi	r30, 0x35	; 53
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	84 60       	ori	r24, 0x04	; 4
    2934:	8c 93       	st	X, r24
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b0 e4       	ldi	r27, 0x40	; 64
    293e:	8d a7       	std	Y+45, r24	; 0x2d
    2940:	9e a7       	std	Y+46, r25	; 0x2e
    2942:	af a7       	std	Y+47, r26	; 0x2f
    2944:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2946:	6d a5       	ldd	r22, Y+45	; 0x2d
    2948:	7e a5       	ldd	r23, Y+46	; 0x2e
    294a:	8f a5       	ldd	r24, Y+47	; 0x2f
    294c:	98 a9       	ldd	r25, Y+48	; 0x30
    294e:	2b ea       	ldi	r18, 0xAB	; 171
    2950:	3a ea       	ldi	r19, 0xAA	; 170
    2952:	4a e2       	ldi	r20, 0x2A	; 42
    2954:	50 e4       	ldi	r21, 0x40	; 64
    2956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	89 a7       	std	Y+41, r24	; 0x29
    2960:	9a a7       	std	Y+42, r25	; 0x2a
    2962:	ab a7       	std	Y+43, r26	; 0x2b
    2964:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2966:	69 a5       	ldd	r22, Y+41	; 0x29
    2968:	7a a5       	ldd	r23, Y+42	; 0x2a
    296a:	8b a5       	ldd	r24, Y+43	; 0x2b
    296c:	9c a5       	ldd	r25, Y+44	; 0x2c
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	1c f4       	brge	.+6      	; 0x2984 <GLCD_Data+0x96>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	88 a7       	std	Y+40, r24	; 0x28
    2982:	91 c0       	rjmp	.+290    	; 0x2aa6 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    2984:	69 a5       	ldd	r22, Y+41	; 0x29
    2986:	7a a5       	ldd	r23, Y+42	; 0x2a
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	9c a5       	ldd	r25, Y+44	; 0x2c
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	53 e4       	ldi	r21, 0x43	; 67
    2994:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	0c f0       	brlt	.+2      	; 0x299e <GLCD_Data+0xb0>
    299c:	7b c0       	rjmp	.+246    	; 0x2a94 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    299e:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    29a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a4:	98 a9       	ldd	r25, Y+48	; 0x30
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a e7       	ldi	r20, 0x7A	; 122
    29ac:	54 e4       	ldi	r21, 0x44	; 68
    29ae:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8c a3       	std	Y+36, r24	; 0x24
    29b8:	9d a3       	std	Y+37, r25	; 0x25
    29ba:	ae a3       	std	Y+38, r26	; 0x26
    29bc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6c a1       	ldd	r22, Y+36	; 0x24
    29c0:	7d a1       	ldd	r23, Y+37	; 0x25
    29c2:	8e a1       	ldd	r24, Y+38	; 0x26
    29c4:	9f a1       	ldd	r25, Y+39	; 0x27
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	88 a3       	std	Y+32, r24	; 0x20
    29d8:	99 a3       	std	Y+33, r25	; 0x21
    29da:	aa a3       	std	Y+34, r26	; 0x22
    29dc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29de:	68 a1       	ldd	r22, Y+32	; 0x20
    29e0:	79 a1       	ldd	r23, Y+33	; 0x21
    29e2:	8a a1       	ldd	r24, Y+34	; 0x22
    29e4:	9b a1       	ldd	r25, Y+35	; 0x23
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <GLCD_Data+0x112>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9f 8f       	std	Y+31, r25	; 0x1f
    29fc:	8e 8f       	std	Y+30, r24	; 0x1e
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <GLCD_Data+0x190>
	else if (__tmp > 65535)
    2a00:	68 a1       	ldd	r22, Y+32	; 0x20
    2a02:	79 a1       	ldd	r23, Y+33	; 0x21
    2a04:	8a a1       	ldd	r24, Y+34	; 0x22
    2a06:	9b a1       	ldd	r25, Y+35	; 0x23
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6c a1       	ldd	r22, Y+36	; 0x24
    2a1a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a1c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a1e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <GLCD_Data+0x172>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9d 8f       	std	Y+29, r25	; 0x1d
    2a48:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <GLCD_Data+0x160>
    2a52:	9d 8f       	std	Y+29, r25	; 0x1d
    2a54:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a5e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <GLCD_Data+0x154>
    2a68:	24 c0       	rjmp	.+72     	; 0x2ab2 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	68 a1       	ldd	r22, Y+32	; 0x20
    2a6c:	79 a1       	ldd	r23, Y+33	; 0x21
    2a6e:	8a a1       	ldd	r24, Y+34	; 0x22
    2a70:	9b a1       	ldd	r25, Y+35	; 0x23
    2a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a7c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a82:	9b 8f       	std	Y+27, r25	; 0x1b
    2a84:	8a 8f       	std	Y+26, r24	; 0x1a
    2a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a88:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <GLCD_Data+0x19c>
    2a8e:	9b 8f       	std	Y+27, r25	; 0x1b
    2a90:	8a 8f       	std	Y+26, r24	; 0x1a
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a94:	69 a5       	ldd	r22, Y+41	; 0x29
    2a96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	88 a7       	std	Y+40, r24	; 0x28
    2aa6:	88 a5       	ldd	r24, Y+40	; 0x28
    2aa8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aaa:	89 8d       	ldd	r24, Y+25	; 0x19
    2aac:	8a 95       	dec	r24
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <GLCD_Data+0x1be>
    2ab0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    2ab2:	a5 e3       	ldi	r26, 0x35	; 53
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e5 e3       	ldi	r30, 0x35	; 53
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8b 7f       	andi	r24, 0xFB	; 251
    2abe:	8c 93       	st	X, r24
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ac6:	b0 e4       	ldi	r27, 0x40	; 64
    2ac8:	8d 8b       	std	Y+21, r24	; 0x15
    2aca:	9e 8b       	std	Y+22, r25	; 0x16
    2acc:	af 8b       	std	Y+23, r26	; 0x17
    2ace:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad8:	2b ea       	ldi	r18, 0xAB	; 171
    2ada:	3a ea       	ldi	r19, 0xAA	; 170
    2adc:	4a e2       	ldi	r20, 0x2A	; 42
    2ade:	50 e4       	ldi	r21, 0x40	; 64
    2ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
    2aea:	9a 8b       	std	Y+18, r25	; 0x12
    2aec:	ab 8b       	std	Y+19, r26	; 0x13
    2aee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2af0:	69 89       	ldd	r22, Y+17	; 0x11
    2af2:	7a 89       	ldd	r23, Y+18	; 0x12
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e8       	ldi	r20, 0x80	; 128
    2afe:	5f e3       	ldi	r21, 0x3F	; 63
    2b00:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	1c f4       	brge	.+6      	; 0x2b0e <GLCD_Data+0x220>
		__ticks = 1;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	88 8b       	std	Y+16, r24	; 0x10
    2b0c:	91 c0       	rjmp	.+290    	; 0x2c30 <GLCD_Data+0x342>
	else if (__tmp > 255)
    2b0e:	69 89       	ldd	r22, Y+17	; 0x11
    2b10:	7a 89       	ldd	r23, Y+18	; 0x12
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	53 e4       	ldi	r21, 0x43	; 67
    2b1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <GLCD_Data+0x23a>
    2b26:	7b c0       	rjmp	.+246    	; 0x2c1e <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    2b28:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8c 87       	std	Y+12, r24	; 0x0c
    2b42:	9d 87       	std	Y+13, r25	; 0x0d
    2b44:	ae 87       	std	Y+14, r26	; 0x0e
    2b46:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b48:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a ef       	ldi	r20, 0xFA	; 250
    2b56:	54 e4       	ldi	r21, 0x44	; 68
    2b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	88 87       	std	Y+8, r24	; 0x08
    2b62:	99 87       	std	Y+9, r25	; 0x09
    2b64:	aa 87       	std	Y+10, r26	; 0x0a
    2b66:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b68:	68 85       	ldd	r22, Y+8	; 0x08
    2b6a:	79 85       	ldd	r23, Y+9	; 0x09
    2b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	2c f4       	brge	.+10     	; 0x2b8a <GLCD_Data+0x29c>
		__ticks = 1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9f 83       	std	Y+7, r25	; 0x07
    2b86:	8e 83       	std	Y+6, r24	; 0x06
    2b88:	3f c0       	rjmp	.+126    	; 0x2c08 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    2b8a:	68 85       	ldd	r22, Y+8	; 0x08
    2b8c:	79 85       	ldd	r23, Y+9	; 0x09
    2b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	4f e7       	ldi	r20, 0x7F	; 127
    2b98:	57 e4       	ldi	r21, 0x47	; 71
    2b9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b9e:	18 16       	cp	r1, r24
    2ba0:	4c f5       	brge	.+82     	; 0x2bf4 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ba4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ba6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9f 83       	std	Y+7, r25	; 0x07
    2bc8:	8e 83       	std	Y+6, r24	; 0x06
    2bca:	0f c0       	rjmp	.+30     	; 0x2bea <GLCD_Data+0x2fc>
    2bcc:	88 ec       	ldi	r24, 0xC8	; 200
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	9d 83       	std	Y+5, r25	; 0x05
    2bd2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <GLCD_Data+0x2ea>
    2bdc:	9d 83       	std	Y+5, r25	; 0x05
    2bde:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be0:	8e 81       	ldd	r24, Y+6	; 0x06
    2be2:	9f 81       	ldd	r25, Y+7	; 0x07
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9f 83       	std	Y+7, r25	; 0x07
    2be8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	8e 81       	ldd	r24, Y+6	; 0x06
    2bec:	9f 81       	ldd	r25, Y+7	; 0x07
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <GLCD_Data+0x2de>
    2bf2:	24 c0       	rjmp	.+72     	; 0x2c3c <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	68 85       	ldd	r22, Y+8	; 0x08
    2bf6:	79 85       	ldd	r23, Y+9	; 0x09
    2bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9f 83       	std	Y+7, r25	; 0x07
    2c06:	8e 83       	std	Y+6, r24	; 0x06
    2c08:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0c:	9b 83       	std	Y+3, r25	; 0x03
    2c0e:	8a 83       	std	Y+2, r24	; 0x02
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <GLCD_Data+0x326>
    2c18:	9b 83       	std	Y+3, r25	; 0x03
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c1e:	69 89       	ldd	r22, Y+17	; 0x11
    2c20:	7a 89       	ldd	r23, Y+18	; 0x12
    2c22:	8b 89       	ldd	r24, Y+19	; 0x13
    2c24:	9c 89       	ldd	r25, Y+20	; 0x14
    2c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	88 8b       	std	Y+16, r24	; 0x10
    2c30:	88 89       	ldd	r24, Y+16	; 0x10
    2c32:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	8a 95       	dec	r24
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <GLCD_Data+0x348>
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    2c3c:	e1 96       	adiw	r28, 0x31	; 49
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <GLCD_Init>:

void GLCD_Init() /* GLCD initialize function */
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	2e 97       	sbiw	r28, 0x0e	; 14
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    Data_Port_Dir = 0xFF;
    2c62:	ea e3       	ldi	r30, 0x3A	; 58
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	80 83       	st	Z, r24
    Command_Port_Dir = 0xFF;
    2c6a:	e4 e3       	ldi	r30, 0x34	; 52
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	80 83       	st	Z, r24
    /* Select both left & right half of display & Keep reset pin high */
    Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    2c72:	a5 e3       	ldi	r26, 0x35	; 53
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e5 e3       	ldi	r30, 0x35	; 53
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 63       	ori	r24, 0x38	; 56
    2c7e:	8c 93       	st	X, r24
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 ea       	ldi	r26, 0xA0	; 160
    2c86:	b1 e4       	ldi	r27, 0x41	; 65
    2c88:	8b 87       	std	Y+11, r24	; 0x0b
    2c8a:	9c 87       	std	Y+12, r25	; 0x0c
    2c8c:	ad 87       	std	Y+13, r26	; 0x0d
    2c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4a ef       	ldi	r20, 0xFA	; 250
    2c9e:	54 e4       	ldi	r21, 0x44	; 68
    2ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	8f 83       	std	Y+7, r24	; 0x07
    2caa:	98 87       	std	Y+8, r25	; 0x08
    2cac:	a9 87       	std	Y+9, r26	; 0x09
    2cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb2:	78 85       	ldd	r23, Y+8	; 0x08
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	5f e3       	ldi	r21, 0x3F	; 63
    2cc0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cc4:	88 23       	and	r24, r24
    2cc6:	2c f4       	brge	.+10     	; 0x2cd2 <GLCD_Init+0x84>
		__ticks = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    2cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd4:	78 85       	ldd	r23, Y+8	; 0x08
    2cd6:	89 85       	ldd	r24, Y+9	; 0x09
    2cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	4c f5       	brge	.+82     	; 0x2d3c <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e2       	ldi	r20, 0x20	; 32
    2cf8:	51 e4       	ldi	r21, 0x41	; 65
    2cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	0f c0       	rjmp	.+30     	; 0x2d32 <GLCD_Init+0xe4>
    2d14:	88 ec       	ldi	r24, 0xC8	; 200
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <GLCD_Init+0xd2>
    2d24:	9c 83       	std	Y+4, r25	; 0x04
    2d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	9e 81       	ldd	r25, Y+6	; 0x06
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f7       	brne	.-38     	; 0x2d14 <GLCD_Init+0xc6>
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9e 83       	std	Y+6, r25	; 0x06
    2d4e:	8d 83       	std	Y+5, r24	; 0x05
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <GLCD_Init+0x10e>
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20);
    GLCD_Command(0x3E); /* Display OFF */
    2d64:	8e e3       	ldi	r24, 0x3E	; 62
    2d66:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    GLCD_Command(0x40); /* Set Y address (column=0) */
    2d6a:	80 e4       	ldi	r24, 0x40	; 64
    2d6c:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    2d70:	88 eb       	ldi	r24, 0xB8	; 184
    2d72:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    GLCD_Command(0xC0); /* Set z address (start line=0) */
    2d76:	80 ec       	ldi	r24, 0xC0	; 192
    2d78:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    GLCD_Command(0x3F); /* Display ON */
    2d7c:	8f e3       	ldi	r24, 0x3F	; 63
    2d7e:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
}
    2d82:	2e 96       	adiw	r28, 0x0e	; 14
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <GLCD_ClearAll>:

void GLCD_ClearAll() /* GLCD all display clear function */
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <GLCD_ClearAll+0x6>
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <GLCD_ClearAll+0x8>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <GLCD_ClearAll+0xa>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    2da2:	a5 e3       	ldi	r26, 0x35	; 53
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e5 e3       	ldi	r30, 0x35	; 53
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	80 61       	ori	r24, 0x10	; 16
    2dae:	8c 93       	st	X, r24
    Command_Port &= ~(1 << CS1);
    2db0:	a5 e3       	ldi	r26, 0x35	; 53
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e5 e3       	ldi	r30, 0x35	; 53
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	87 7f       	andi	r24, 0xF7	; 247
    2dbc:	8c 93       	st	X, r24
    for (int q = 0; q < 2; q++)
    2dbe:	1a 82       	std	Y+2, r1	; 0x02
    2dc0:	19 82       	std	Y+1, r1	; 0x01
    2dc2:	34 c0       	rjmp	.+104    	; 0x2e2c <GLCD_ClearAll+0x98>
    {
        for (i = 0; i < TotalPage; i++)
    2dc4:	1e 82       	std	Y+6, r1	; 0x06
    2dc6:	1d 82       	std	Y+5, r1	; 0x05
    2dc8:	19 c0       	rjmp	.+50     	; 0x2dfc <GLCD_ClearAll+0x68>
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	88 54       	subi	r24, 0x48	; 72
    2dce:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
            for (j = 0; j < 64; j++)
    2dd2:	1c 82       	std	Y+4, r1	; 0x04
    2dd4:	1b 82       	std	Y+3, r1	; 0x03
    2dd6:	08 c0       	rjmp	.+16     	; 0x2de8 <GLCD_ClearAll+0x54>
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
            for (j = 0; j < 64; j++)
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	9c 83       	std	Y+4, r25	; 0x04
    2de6:	8b 83       	std	Y+3, r24	; 0x03
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	80 34       	cpi	r24, 0x40	; 64
    2dee:	91 05       	cpc	r25, r1
    2df0:	9c f3       	brlt	.-26     	; 0x2dd8 <GLCD_ClearAll+0x44>
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	88 30       	cpi	r24, 0x08	; 8
    2e02:	91 05       	cpc	r25, r1
    2e04:	14 f3       	brlt	.-60     	; 0x2dca <GLCD_ClearAll+0x36>
            for (j = 0; j < 64; j++)
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
            }
        }
        Command_Port |= (1 << CS1);
    2e06:	a5 e3       	ldi	r26, 0x35	; 53
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e5 e3       	ldi	r30, 0x35	; 53
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	88 60       	ori	r24, 0x08	; 8
    2e12:	8c 93       	st	X, r24
        Command_Port &= ~(1 << CS2);
    2e14:	a5 e3       	ldi	r26, 0x35	; 53
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e5 e3       	ldi	r30, 0x35	; 53
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8f 7e       	andi	r24, 0xEF	; 239
    2e20:	8c 93       	st	X, r24
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 96       	adiw	r24, 0x01	; 1
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	82 30       	cpi	r24, 0x02	; 2
    2e32:	91 05       	cpc	r25, r1
    2e34:	3c f2       	brlt	.-114    	; 0x2dc4 <GLCD_ClearAll+0x30>
            }
        }
        Command_Port |= (1 << CS1);
        Command_Port &= ~(1 << CS2);
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    2e36:	80 e4       	ldi	r24, 0x40	; 64
    2e38:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    2e3c:	88 eb       	ldi	r24, 0xB8	; 184
    2e3e:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
}
    2e42:	26 96       	adiw	r28, 0x06	; 6
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <direction>:

void direction(dir d)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	0f 92       	push	r0
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	89 83       	std	Y+1, r24	; 0x01
	if(d == left)
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	88 23       	and	r24, r24
    2e64:	79 f4       	brne	.+30     	; 0x2e84 <direction+0x30>
	{
		Command_Port |= (1 << CS2);
    2e66:	a5 e3       	ldi	r26, 0x35	; 53
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e5 e3       	ldi	r30, 0x35	; 53
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 61       	ori	r24, 0x10	; 16
    2e72:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS1);
    2e74:	a5 e3       	ldi	r26, 0x35	; 53
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e5 e3       	ldi	r30, 0x35	; 53
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	87 7f       	andi	r24, 0xF7	; 247
    2e80:	8c 93       	st	X, r24
    2e82:	0e c0       	rjmp	.+28     	; 0x2ea0 <direction+0x4c>
	}
	else
	{
		Command_Port |= (1 << CS1);
    2e84:	a5 e3       	ldi	r26, 0x35	; 53
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e5 e3       	ldi	r30, 0x35	; 53
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	88 60       	ori	r24, 0x08	; 8
    2e90:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS2);
    2e92:	a5 e3       	ldi	r26, 0x35	; 53
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e5 e3       	ldi	r30, 0x35	; 53
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 7e       	andi	r24, 0xEF	; 239
    2e9e:	8c 93       	st	X, r24
	}
}
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <clearline>:
void clearline(axis a, int x, int y, int n, dir d)
{
    2ea8:	0f 93       	push	r16
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	2c 97       	sbiw	r28, 0x0c	; 12
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
    2ec0:	7d 83       	std	Y+5, r23	; 0x05
    2ec2:	6c 83       	std	Y+4, r22	; 0x04
    2ec4:	5f 83       	std	Y+7, r21	; 0x07
    2ec6:	4e 83       	std	Y+6, r20	; 0x06
    2ec8:	39 87       	std	Y+9, r19	; 0x09
    2eca:	28 87       	std	Y+8, r18	; 0x08
    2ecc:	0a 87       	std	Y+10, r16	; 0x0a
	direction(d);
    2ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <direction>
		switch(a)
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	3c 87       	std	Y+12, r19	; 0x0c
    2edc:	2b 87       	std	Y+11, r18	; 0x0b
    2ede:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	71 f0       	breq	.+28     	; 0x2f04 <clearline+0x5c>
    2ee8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2eea:	3c 85       	ldd	r19, Y+12	; 0x0c
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	89 f4       	brne	.+34     	; 0x2f14 <clearline+0x6c>
		{
		case h:
			break;
		case vdown:
			GLCD_Command((0xB8) + y);
    2ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef4:	88 54       	subi	r24, 0x48	; 72
    2ef6:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
			GLCD_Command((0x40) + x);
    2efa:	8c 81       	ldd	r24, Y+4	; 0x04
    2efc:	80 5c       	subi	r24, 0xC0	; 192
    2efe:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    2f02:	08 c0       	rjmp	.+16     	; 0x2f14 <clearline+0x6c>
			break;
		case vup:
			GLCD_Command((0xB8) + y + 1);
    2f04:	8e 81       	ldd	r24, Y+6	; 0x06
    2f06:	87 54       	subi	r24, 0x47	; 71
    2f08:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
			GLCD_Command((0x40) + x);
    2f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0e:	80 5c       	subi	r24, 0xC0	; 192
    2f10:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
			break;
		}
	for (int j = 0; j < n; j++)
    2f14:	1a 82       	std	Y+2, r1	; 0x02
    2f16:	19 82       	std	Y+1, r1	; 0x01
    2f18:	08 c0       	rjmp	.+16     	; 0x2f2a <clearline+0x82>
	{
		GLCD_Data(0);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
		case vup:
			GLCD_Command((0xB8) + y + 1);
			GLCD_Command((0x40) + x);
			break;
		}
	for (int j = 0; j < n; j++)
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	29 81       	ldd	r18, Y+1	; 0x01
    2f2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2f2e:	88 85       	ldd	r24, Y+8	; 0x08
    2f30:	99 85       	ldd	r25, Y+9	; 0x09
    2f32:	28 17       	cp	r18, r24
    2f34:	39 07       	cpc	r19, r25
    2f36:	8c f3       	brlt	.-30     	; 0x2f1a <clearline+0x72>
	{
		GLCD_Data(0);
	}
	GLCD_Command(0x40);
    2f38:	80 e4       	ldi	r24, 0x40	; 64
    2f3a:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
}
    2f3e:	2c 96       	adiw	r28, 0x0c	; 12
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	0f 91       	pop	r16
    2f50:	08 95       	ret

00002f52 <cursor_place>:

void cursor_place(int x, int y, dir d)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <cursor_place+0x6>
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <cursor_place+0x8>
    2f5a:	0f 92       	push	r0
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	7c 83       	std	Y+4, r23	; 0x04
    2f66:	6b 83       	std	Y+3, r22	; 0x03
    2f68:	4d 83       	std	Y+5, r20	; 0x05
	direction(d);
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <direction>
	GLCD_Command((0x40) + x);
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	80 5c       	subi	r24, 0xC0	; 192
    2f74:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
	GLCD_Command((0xB8) + y);
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	88 54       	subi	r24, 0x48	; 72
    2f7c:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
}
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <GLCD_String>:


void GLCD_String(char page_no, char *str) /* GLCD string write function */
{
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	2f 97       	sbiw	r28, 0x0f	; 15
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	8d 87       	std	Y+13, r24	; 0x0d
    2faa:	7f 87       	std	Y+15, r23	; 0x0f
    2fac:	6e 87       	std	Y+14, r22	; 0x0e
    unsigned int i, column;
    unsigned int Page = ((0xB8) + page_no);
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	88 2f       	mov	r24, r24
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	88 54       	subi	r24, 0x48	; 72
    2fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb8:	98 87       	std	Y+8, r25	; 0x08
    2fba:	8f 83       	std	Y+7, r24	; 0x07
    unsigned int Y_address = 0;
    2fbc:	1e 82       	std	Y+6, r1	; 0x06
    2fbe:	1d 82       	std	Y+5, r1	; 0x05
    float Page_inc = 0.5;
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	bf e3       	ldi	r27, 0x3F	; 63
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	ab 83       	std	Y+3, r26	; 0x03
    2fce:	bc 83       	std	Y+4, r27	; 0x04

    direction(left); /* Select first Left half of display */
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <direction>

    GLCD_Command(Page);
    2fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd8:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    2fdc:	1c 86       	std	Y+12, r1	; 0x0c
    2fde:	1b 86       	std	Y+11, r1	; 0x0b
    2fe0:	16 c2       	rjmp	.+1068   	; 0x340e <GLCD_String+0x47e>
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
    2fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	96 95       	lsr	r25
    2fea:	98 2f       	mov	r25, r24
    2fec:	88 27       	eor	r24, r24
    2fee:	97 95       	ror	r25
    2ff0:	87 95       	ror	r24
    2ff2:	90 95       	com	r25
    2ff4:	81 95       	neg	r24
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	85 50       	subi	r24, 0x05	; 5
    2ffa:	9c 4f       	sbci	r25, 0xFC	; 252
    2ffc:	9c 01       	movw	r18, r24
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	28 17       	cp	r18, r24
    3004:	39 07       	cpc	r19, r25
    3006:	08 f4       	brcc	.+2      	; 0x300a <GLCD_String+0x7a>
    3008:	0d c2       	rjmp	.+1050   	; 0x3424 <GLCD_String+0x494>
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
    300a:	2e 85       	ldd	r18, Y+14	; 0x0e
    300c:	3f 85       	ldd	r19, Y+15	; 0x0f
    300e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3010:	9c 85       	ldd	r25, Y+12	; 0x0c
    3012:	f9 01       	movw	r30, r18
    3014:	e8 0f       	add	r30, r24
    3016:	f9 1f       	adc	r31, r25
    3018:	80 81       	ld	r24, Z
    301a:	80 32       	cpi	r24, 0x20	; 32
    301c:	09 f4       	brne	.+2      	; 0x3020 <GLCD_String+0x90>
    301e:	80 c0       	rjmp	.+256    	; 0x3120 <GLCD_String+0x190>
        {
            for (column = 1; column <= FontWidth; column++)
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	9a 87       	std	Y+10, r25	; 0x0a
    3026:	89 87       	std	Y+9, r24	; 0x09
    3028:	75 c0       	rjmp	.+234    	; 0x3114 <GLCD_String+0x184>
            {
                if ((Y_address + column) == (128 * ((int)(Page_inc + 0.5)))) /* If yes then check whether it overflow from right side of display */
    302a:	2d 81       	ldd	r18, Y+5	; 0x05
    302c:	3e 81       	ldd	r19, Y+6	; 0x06
    302e:	89 85       	ldd	r24, Y+9	; 0x09
    3030:	9a 85       	ldd	r25, Y+10	; 0x0a
    3032:	89 01       	movw	r16, r18
    3034:	08 0f       	add	r16, r24
    3036:	19 1f       	adc	r17, r25
    3038:	69 81       	ldd	r22, Y+1	; 0x01
    303a:	7a 81       	ldd	r23, Y+2	; 0x02
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	9c 81       	ldd	r25, Y+4	; 0x04
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	5f e3       	ldi	r21, 0x3F	; 63
    3048:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	96 95       	lsr	r25
    305e:	98 2f       	mov	r25, r24
    3060:	88 27       	eor	r24, r24
    3062:	97 95       	ror	r25
    3064:	87 95       	ror	r24
    3066:	08 17       	cp	r16, r24
    3068:	19 07       	cpc	r17, r25
    306a:	09 f0       	breq	.+2      	; 0x306e <GLCD_String+0xde>
    306c:	4e c0       	rjmp	.+156    	; 0x310a <GLCD_String+0x17a>
                {
                    if (column == FontWidth) /* Also check and break if it overflow after 5th column */
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	85 30       	cpi	r24, 0x05	; 5
    3074:	91 05       	cpc	r25, r1
    3076:	09 f4       	brne	.+2      	; 0x307a <GLCD_String+0xea>
    3078:	53 c0       	rjmp	.+166    	; 0x3120 <GLCD_String+0x190>
                        break;
                    GLCD_Command(0x40);             /* If not 5th and get overflowed then change Y address to START column */
    307a:	80 e4       	ldi	r24, 0x40	; 64
    307c:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
                    Y_address = Y_address + column; /* Increment Y address count by column no. */
    3080:	2d 81       	ldd	r18, Y+5	; 0x05
    3082:	3e 81       	ldd	r19, Y+6	; 0x06
    3084:	89 85       	ldd	r24, Y+9	; 0x09
    3086:	9a 85       	ldd	r25, Y+10	; 0x0a
    3088:	82 0f       	add	r24, r18
    308a:	93 1f       	adc	r25, r19
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
                    Command_Port ^= (1 << CS1);     /* If yes then change segment controller to display on other half of display */
    3090:	a5 e3       	ldi	r26, 0x35	; 53
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e5 e3       	ldi	r30, 0x35	; 53
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	90 81       	ld	r25, Z
    309a:	88 e0       	ldi	r24, 0x08	; 8
    309c:	89 27       	eor	r24, r25
    309e:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    30a0:	a5 e3       	ldi	r26, 0x35	; 53
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e5 e3       	ldi	r30, 0x35	; 53
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	90 81       	ld	r25, Z
    30aa:	80 e1       	ldi	r24, 0x10	; 16
    30ac:	89 27       	eor	r24, r25
    30ae:	8c 93       	st	X, r24
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
    30b0:	8f 81       	ldd	r24, Y+7	; 0x07
    30b2:	98 85       	ldd	r25, Y+8	; 0x08
    30b4:	cc 01       	movw	r24, r24
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	29 81       	ldd	r18, Y+1	; 0x01
    30cc:	3a 81       	ldd	r19, Y+2	; 0x02
    30ce:	4b 81       	ldd	r20, Y+3	; 0x03
    30d0:	5c 81       	ldd	r21, Y+4	; 0x04
    30d2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
    30ea:	69 81       	ldd	r22, Y+1	; 0x01
    30ec:	7a 81       	ldd	r23, Y+2	; 0x02
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	9c 81       	ldd	r25, Y+4	; 0x04
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	5f e3       	ldi	r21, 0x3F	; 63
    30fa:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	9a 83       	std	Y+2, r25	; 0x02
    3106:	ab 83       	std	Y+3, r26	; 0x03
    3108:	bc 83       	std	Y+4, r27	; 0x04
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
        {
            for (column = 1; column <= FontWidth; column++)
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	9a 87       	std	Y+10, r25	; 0x0a
    3112:	89 87       	std	Y+9, r24	; 0x09
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	86 30       	cpi	r24, 0x06	; 6
    311a:	91 05       	cpc	r25, r1
    311c:	08 f4       	brcc	.+2      	; 0x3120 <GLCD_String+0x190>
    311e:	85 cf       	rjmp	.-246    	; 0x302a <GLCD_String+0x9a>
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
                }
            }
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
    3120:	8d 85       	ldd	r24, Y+13	; 0x0d
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	96 95       	lsr	r25
    3128:	98 2f       	mov	r25, r24
    312a:	88 27       	eor	r24, r24
    312c:	97 95       	ror	r25
    312e:	87 95       	ror	r24
    3130:	90 95       	com	r25
    3132:	81 95       	neg	r24
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	85 50       	subi	r24, 0x05	; 5
    3138:	9c 4f       	sbci	r25, 0xFC	; 252
    313a:	9c 01       	movw	r18, r24
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	28 17       	cp	r18, r24
    3142:	39 07       	cpc	r19, r25
    3144:	08 f4       	brcc	.+2      	; 0x3148 <GLCD_String+0x1b8>
    3146:	6e c1       	rjmp	.+732    	; 0x3424 <GLCD_String+0x494>
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
    3148:	2e 85       	ldd	r18, Y+14	; 0x0e
    314a:	3f 85       	ldd	r19, Y+15	; 0x0f
    314c:	8b 85       	ldd	r24, Y+11	; 0x0b
    314e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3150:	f9 01       	movw	r30, r18
    3152:	e8 0f       	add	r30, r24
    3154:	f9 1f       	adc	r31, r25
    3156:	80 81       	ld	r24, Z
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	c9 01       	movw	r24, r18
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	8c 50       	subi	r24, 0x0C	; 12
    3178:	93 40       	sbci	r25, 0x03	; 3
    317a:	8c 52       	subi	r24, 0x2C	; 44
    317c:	9e 4f       	sbci	r25, 0xFE	; 254
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	59 f0       	breq	.+22     	; 0x3198 <GLCD_String+0x208>
    3182:	2e 85       	ldd	r18, Y+14	; 0x0e
    3184:	3f 85       	ldd	r19, Y+15	; 0x0f
    3186:	8b 85       	ldd	r24, Y+11	; 0x0b
    3188:	9c 85       	ldd	r25, Y+12	; 0x0c
    318a:	f9 01       	movw	r30, r18
    318c:	e8 0f       	add	r30, r24
    318e:	f9 1f       	adc	r31, r25
    3190:	80 81       	ld	r24, Z
    3192:	80 32       	cpi	r24, 0x20	; 32
    3194:	09 f0       	breq	.+2      	; 0x3198 <GLCD_String+0x208>
    3196:	76 c0       	rjmp	.+236    	; 0x3284 <GLCD_String+0x2f4>
        {
            for (column = 0; column < FontWidth; column++)
    3198:	1a 86       	std	Y+10, r1	; 0x0a
    319a:	19 86       	std	Y+9, r1	; 0x09
    319c:	6c c0       	rjmp	.+216    	; 0x3276 <GLCD_String+0x2e6>
            {
                GLCD_Data(font[str[i] - 32][column]); /* If yes then then print character */
    319e:	2e 85       	ldd	r18, Y+14	; 0x0e
    31a0:	3f 85       	ldd	r19, Y+15	; 0x0f
    31a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    31a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    31a6:	f9 01       	movw	r30, r18
    31a8:	e8 0f       	add	r30, r24
    31aa:	f9 1f       	adc	r31, r25
    31ac:	80 81       	ld	r24, Z
    31ae:	88 2f       	mov	r24, r24
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9c 01       	movw	r18, r24
    31b4:	20 52       	subi	r18, 0x20	; 32
    31b6:	30 40       	sbci	r19, 0x00	; 0
    31b8:	49 85       	ldd	r20, Y+9	; 0x09
    31ba:	5a 85       	ldd	r21, Y+10	; 0x0a
    31bc:	c9 01       	movw	r24, r18
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	82 0f       	add	r24, r18
    31c8:	93 1f       	adc	r25, r19
    31ca:	84 0f       	add	r24, r20
    31cc:	95 1f       	adc	r25, r21
    31ce:	fc 01       	movw	r30, r24
    31d0:	ec 52       	subi	r30, 0x2C	; 44
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	80 81       	ld	r24, Z
    31d6:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	8f 73       	andi	r24, 0x3F	; 63
    31e2:	90 70       	andi	r25, 0x00	; 0
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	e9 f5       	brne	.+122    	; 0x3262 <GLCD_String+0x2d2>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    31e8:	a5 e3       	ldi	r26, 0x35	; 53
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e5 e3       	ldi	r30, 0x35	; 53
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	90 81       	ld	r25, Z
    31f2:	88 e0       	ldi	r24, 0x08	; 8
    31f4:	89 27       	eor	r24, r25
    31f6:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    31f8:	a5 e3       	ldi	r26, 0x35	; 53
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e5 e3       	ldi	r30, 0x35	; 53
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	90 81       	ld	r25, Z
    3202:	80 e1       	ldi	r24, 0x10	; 16
    3204:	89 27       	eor	r24, r25
    3206:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    3208:	8f 81       	ldd	r24, Y+7	; 0x07
    320a:	98 85       	ldd	r25, Y+8	; 0x08
    320c:	cc 01       	movw	r24, r24
    320e:	a0 e0       	ldi	r26, 0x00	; 0
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	29 81       	ldd	r18, Y+1	; 0x01
    3224:	3a 81       	ldd	r19, Y+2	; 0x02
    3226:	4b 81       	ldd	r20, Y+3	; 0x03
    3228:	5c 81       	ldd	r21, Y+4	; 0x04
    322a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    3242:	69 81       	ldd	r22, Y+1	; 0x01
    3244:	7a 81       	ldd	r23, Y+2	; 0x02
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	9c 81       	ldd	r25, Y+4	; 0x04
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	89 83       	std	Y+1, r24	; 0x01
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	ab 83       	std	Y+3, r26	; 0x03
    3260:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
        {
            for (column = 0; column < FontWidth; column++)
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	9a 87       	std	Y+10, r25	; 0x0a
    3274:	89 87       	std	Y+9, r24	; 0x09
    3276:	89 85       	ldd	r24, Y+9	; 0x09
    3278:	9a 85       	ldd	r25, Y+10	; 0x0a
    327a:	85 30       	cpi	r24, 0x05	; 5
    327c:	91 05       	cpc	r25, r1
    327e:	08 f4       	brcc	.+2      	; 0x3282 <GLCD_String+0x2f2>
    3280:	8e cf       	rjmp	.-228    	; 0x319e <GLCD_String+0x20e>
    3282:	c0 c0       	rjmp	.+384    	; 0x3404 <GLCD_String+0x474>
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    3284:	1a 86       	std	Y+10, r1	; 0x0a
    3286:	19 86       	std	Y+9, r1	; 0x09
    3288:	6c c0       	rjmp	.+216    	; 0x3362 <GLCD_String+0x3d2>
            {
                GLCD_Data(font[str[i] - 32][column]); /* Then continue to print hat char */
    328a:	2e 85       	ldd	r18, Y+14	; 0x0e
    328c:	3f 85       	ldd	r19, Y+15	; 0x0f
    328e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3290:	9c 85       	ldd	r25, Y+12	; 0x0c
    3292:	f9 01       	movw	r30, r18
    3294:	e8 0f       	add	r30, r24
    3296:	f9 1f       	adc	r31, r25
    3298:	80 81       	ld	r24, Z
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9c 01       	movw	r18, r24
    32a0:	20 52       	subi	r18, 0x20	; 32
    32a2:	30 40       	sbci	r19, 0x00	; 0
    32a4:	49 85       	ldd	r20, Y+9	; 0x09
    32a6:	5a 85       	ldd	r21, Y+10	; 0x0a
    32a8:	c9 01       	movw	r24, r18
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	82 0f       	add	r24, r18
    32b4:	93 1f       	adc	r25, r19
    32b6:	84 0f       	add	r24, r20
    32b8:	95 1f       	adc	r25, r21
    32ba:	fc 01       	movw	r30, r24
    32bc:	ec 52       	subi	r30, 0x2C	; 44
    32be:	fe 4f       	sbci	r31, 0xFE	; 254
    32c0:	80 81       	ld	r24, Z
    32c2:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ca:	01 96       	adiw	r24, 0x01	; 1
    32cc:	8f 73       	andi	r24, 0x3F	; 63
    32ce:	90 70       	andi	r25, 0x00	; 0
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	e9 f5       	brne	.+122    	; 0x334e <GLCD_String+0x3be>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    32d4:	a5 e3       	ldi	r26, 0x35	; 53
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e5 e3       	ldi	r30, 0x35	; 53
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	90 81       	ld	r25, Z
    32de:	88 e0       	ldi	r24, 0x08	; 8
    32e0:	89 27       	eor	r24, r25
    32e2:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    32e4:	a5 e3       	ldi	r26, 0x35	; 53
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e5 e3       	ldi	r30, 0x35	; 53
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	90 81       	ld	r25, Z
    32ee:	80 e1       	ldi	r24, 0x10	; 16
    32f0:	89 27       	eor	r24, r25
    32f2:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    32f4:	8f 81       	ldd	r24, Y+7	; 0x07
    32f6:	98 85       	ldd	r25, Y+8	; 0x08
    32f8:	cc 01       	movw	r24, r24
    32fa:	a0 e0       	ldi	r26, 0x00	; 0
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	29 81       	ldd	r18, Y+1	; 0x01
    3310:	3a 81       	ldd	r19, Y+2	; 0x02
    3312:	4b 81       	ldd	r20, Y+3	; 0x03
    3314:	5c 81       	ldd	r21, Y+4	; 0x04
    3316:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    332e:	69 81       	ldd	r22, Y+1	; 0x01
    3330:	7a 81       	ldd	r23, Y+2	; 0x02
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	ab 83       	std	Y+3, r26	; 0x03
    334c:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	9a 87       	std	Y+10, r25	; 0x0a
    3360:	89 87       	std	Y+9, r24	; 0x09
    3362:	89 85       	ldd	r24, Y+9	; 0x09
    3364:	9a 85       	ldd	r25, Y+10	; 0x0a
    3366:	85 30       	cpi	r24, 0x05	; 5
    3368:	91 05       	cpc	r25, r1
    336a:	08 f4       	brcc	.+2      	; 0x336e <GLCD_String+0x3de>
    336c:	8e cf       	rjmp	.-228    	; 0x328a <GLCD_String+0x2fa>
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
                }
                Y_address++; /* Increment Y_address count per column */
            }
            GLCD_Data(0);              /* Add one column of zero to print next character next of zero */
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
            Y_address++;               /* Increment Y_address count for last added zero */
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
            if ((Y_address) % 64 == 0) /* check whether it gets overflowed  from either half of side */
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	8f 73       	andi	r24, 0x3F	; 63
    3384:	90 70       	andi	r25, 0x00	; 0
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	e9 f5       	brne	.+122    	; 0x3404 <GLCD_String+0x474>
            {
                Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    338a:	a5 e3       	ldi	r26, 0x35	; 53
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	e5 e3       	ldi	r30, 0x35	; 53
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	90 81       	ld	r25, Z
    3394:	88 e0       	ldi	r24, 0x08	; 8
    3396:	89 27       	eor	r24, r25
    3398:	8c 93       	st	X, r24
                Command_Port ^= (1 << CS2);
    339a:	a5 e3       	ldi	r26, 0x35	; 53
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e5 e3       	ldi	r30, 0x35	; 53
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	90 81       	ld	r25, Z
    33a4:	80 e1       	ldi	r24, 0x10	; 16
    33a6:	89 27       	eor	r24, r25
    33a8:	8c 93       	st	X, r24
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    33aa:	8f 81       	ldd	r24, Y+7	; 0x07
    33ac:	98 85       	ldd	r25, Y+8	; 0x08
    33ae:	cc 01       	movw	r24, r24
    33b0:	a0 e0       	ldi	r26, 0x00	; 0
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	29 81       	ldd	r18, Y+1	; 0x01
    33c6:	3a 81       	ldd	r19, Y+2	; 0x02
    33c8:	4b 81       	ldd	r20, Y+3	; 0x03
    33ca:	5c 81       	ldd	r21, Y+4	; 0x04
    33cc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    33e4:	69 81       	ldd	r22, Y+1	; 0x01
    33e6:	7a 81       	ldd	r23, Y+2	; 0x02
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	5f e3       	ldi	r21, 0x3F	; 63
    33f4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	ab 83       	std	Y+3, r26	; 0x03
    3402:	bc 83       	std	Y+4, r27	; 0x04
    float Page_inc = 0.5;

    direction(left); /* Select first Left half of display */

    GLCD_Command(Page);
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    3404:	8b 85       	ldd	r24, Y+11	; 0x0b
    3406:	9c 85       	ldd	r25, Y+12	; 0x0c
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	9c 87       	std	Y+12, r25	; 0x0c
    340c:	8b 87       	std	Y+11, r24	; 0x0b
    340e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3410:	3f 85       	ldd	r19, Y+15	; 0x0f
    3412:	8b 85       	ldd	r24, Y+11	; 0x0b
    3414:	9c 85       	ldd	r25, Y+12	; 0x0c
    3416:	f9 01       	movw	r30, r18
    3418:	e8 0f       	add	r30, r24
    341a:	f9 1f       	adc	r31, r25
    341c:	80 81       	ld	r24, Z
    341e:	88 23       	and	r24, r24
    3420:	09 f0       	breq	.+2      	; 0x3424 <GLCD_String+0x494>
    3422:	df cd       	rjmp	.-1090   	; 0x2fe2 <GLCD_String+0x52>
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
            }
        }
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    3424:	80 e4       	ldi	r24, 0x40	; 64
    3426:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
}
    342a:	2f 96       	adiw	r28, 0x0f	; 15
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	08 95       	ret

00003440 <line>:


int line(axis a, int x, int y, int n, dir d)
{
    3440:	0f 93       	push	r16
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	2e 97       	sbiw	r28, 0x0e	; 14
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	7f 83       	std	Y+7, r23	; 0x07
    345a:	6e 83       	std	Y+6, r22	; 0x06
    345c:	59 87       	std	Y+9, r21	; 0x09
    345e:	48 87       	std	Y+8, r20	; 0x08
    3460:	3b 87       	std	Y+11, r19	; 0x0b
    3462:	2a 87       	std	Y+10, r18	; 0x0a
    3464:	0c 87       	std	Y+12, r16	; 0x0c
	int moves = 0;
    3466:	1c 82       	std	Y+4, r1	; 0x04
    3468:	1b 82       	std	Y+3, r1	; 0x03
	direction(d);
    346a:	8c 85       	ldd	r24, Y+12	; 0x0c
    346c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <direction>
	GLCD_Command((0xB8) + y);
    3470:	88 85       	ldd	r24, Y+8	; 0x08
    3472:	88 54       	subi	r24, 0x48	; 72
    3474:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
	GLCD_Command((0x40) + x);
    3478:	8e 81       	ldd	r24, Y+6	; 0x06
    347a:	80 5c       	subi	r24, 0xC0	; 192
    347c:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
	for(int i = 0; i < n; i++)
    3480:	1a 82       	std	Y+2, r1	; 0x02
    3482:	19 82       	std	Y+1, r1	; 0x01
    3484:	32 c0       	rjmp	.+100    	; 0x34ea <line+0xaa>
	switch(a)
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	3e 87       	std	Y+14, r19	; 0x0e
    348e:	2d 87       	std	Y+13, r18	; 0x0d
    3490:	8d 85       	ldd	r24, Y+13	; 0x0d
    3492:	9e 85       	ldd	r25, Y+14	; 0x0e
    3494:	81 30       	cpi	r24, 0x01	; 1
    3496:	91 05       	cpc	r25, r1
    3498:	d9 f0       	breq	.+54     	; 0x34d0 <line+0x90>
    349a:	2d 85       	ldd	r18, Y+13	; 0x0d
    349c:	3e 85       	ldd	r19, Y+14	; 0x0e
    349e:	22 30       	cpi	r18, 0x02	; 2
    34a0:	31 05       	cpc	r19, r1
    34a2:	69 f0       	breq	.+26     	; 0x34be <line+0x7e>
    34a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	d1 f4       	brne	.+52     	; 0x34e0 <line+0xa0>
	{
	case h:
		GLCD_Data(0xff);
    34ac:	8f ef       	ldi	r24, 0xFF	; 255
    34ae:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
		moves++;
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	9c 83       	std	Y+4, r25	; 0x04
    34ba:	8b 83       	std	Y+3, r24	; 0x03
    34bc:	11 c0       	rjmp	.+34     	; 0x34e0 <line+0xa0>
		break;
	case vdown:
		moves++;
    34be:	8b 81       	ldd	r24, Y+3	; 0x03
    34c0:	9c 81       	ldd	r25, Y+4	; 0x04
    34c2:	01 96       	adiw	r24, 0x01	; 1
    34c4:	9c 83       	std	Y+4, r25	; 0x04
    34c6:	8b 83       	std	Y+3, r24	; 0x03
		GLCD_Data(0x80);
    34c8:	80 e8       	ldi	r24, 0x80	; 128
    34ca:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
    34ce:	08 c0       	rjmp	.+16     	; 0x34e0 <line+0xa0>
		break;
	case vup:
		moves++;
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	9c 81       	ldd	r25, Y+4	; 0x04
    34d4:	01 96       	adiw	r24, 0x01	; 1
    34d6:	9c 83       	std	Y+4, r25	; 0x04
    34d8:	8b 83       	std	Y+3, r24	; 0x03
		GLCD_Data(0x01);
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	0e 94 77 14 	call	0x28ee	; 0x28ee <GLCD_Data>
{
	int moves = 0;
	direction(d);
	GLCD_Command((0xB8) + y);
	GLCD_Command((0x40) + x);
	for(int i = 0; i < n; i++)
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	29 81       	ldd	r18, Y+1	; 0x01
    34ec:	3a 81       	ldd	r19, Y+2	; 0x02
    34ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f2:	28 17       	cp	r18, r24
    34f4:	39 07       	cpc	r19, r25
    34f6:	3c f2       	brlt	.-114    	; 0x3486 <line+0x46>
	case vup:
		moves++;
		GLCD_Data(0x01);
		break;
	}
	GLCD_Command(0x40);
    34f8:	80 e4       	ldi	r24, 0x40	; 64
    34fa:	0e 94 c7 12 	call	0x258e	; 0x258e <GLCD_Command>
	return moves;
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3502:	2e 96       	adiw	r28, 0x0e	; 14
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	0f 91       	pop	r16
    3514:	08 95       	ret

00003516 <get_firstline>:

char* get_firstline(int f, int cycle, char* space)
{
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	ce 58       	subi	r28, 0x8E	; 142
    3524:	d0 40       	sbci	r29, 0x00	; 0
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	fe 01       	movw	r30, r28
    3532:	e7 57       	subi	r30, 0x77	; 119
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
    353a:	fe 01       	movw	r30, r28
    353c:	e5 57       	subi	r30, 0x75	; 117
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	71 83       	std	Z+1, r23	; 0x01
    3542:	60 83       	st	Z, r22
    3544:	fe 01       	movw	r30, r28
    3546:	e3 57       	subi	r30, 0x73	; 115
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	51 83       	std	Z+1, r21	; 0x01
    354c:	40 83       	st	Z, r20
	char fstr[4];
	sprintf(fstr, "%d", f);
    354e:	00 d0       	rcall	.+0      	; 0x3550 <get_firstline+0x3a>
    3550:	00 d0       	rcall	.+0      	; 0x3552 <get_firstline+0x3c>
    3552:	00 d0       	rcall	.+0      	; 0x3554 <get_firstline+0x3e>
    3554:	ad b7       	in	r26, 0x3d	; 61
    3556:	be b7       	in	r27, 0x3e	; 62
    3558:	11 96       	adiw	r26, 0x01	; 1
    355a:	ce 01       	movw	r24, r28
    355c:	01 96       	adiw	r24, 0x01	; 1
    355e:	11 96       	adiw	r26, 0x01	; 1
    3560:	9c 93       	st	X, r25
    3562:	8e 93       	st	-X, r24
    3564:	80 e6       	ldi	r24, 0x60	; 96
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	13 96       	adiw	r26, 0x03	; 3
    356a:	9c 93       	st	X, r25
    356c:	8e 93       	st	-X, r24
    356e:	12 97       	sbiw	r26, 0x02	; 2
    3570:	fe 01       	movw	r30, r28
    3572:	e7 57       	subi	r30, 0x77	; 119
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	15 96       	adiw	r26, 0x05	; 5
    357c:	9c 93       	st	X, r25
    357e:	8e 93       	st	-X, r24
    3580:	14 97       	sbiw	r26, 0x04	; 4
    3582:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <sprintf>
    3586:	8d b7       	in	r24, 0x3d	; 61
    3588:	9e b7       	in	r25, 0x3e	; 62
    358a:	06 96       	adiw	r24, 0x06	; 6
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	9e bf       	out	0x3e, r25	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	8d bf       	out	0x3d, r24	; 61
	char cyclestr[4];
    sprintf(cyclestr, "%d", cycle);
    3596:	00 d0       	rcall	.+0      	; 0x3598 <get_firstline+0x82>
    3598:	00 d0       	rcall	.+0      	; 0x359a <get_firstline+0x84>
    359a:	00 d0       	rcall	.+0      	; 0x359c <get_firstline+0x86>
    359c:	ad b7       	in	r26, 0x3d	; 61
    359e:	be b7       	in	r27, 0x3e	; 62
    35a0:	11 96       	adiw	r26, 0x01	; 1
    35a2:	ce 01       	movw	r24, r28
    35a4:	05 96       	adiw	r24, 0x05	; 5
    35a6:	11 96       	adiw	r26, 0x01	; 1
    35a8:	9c 93       	st	X, r25
    35aa:	8e 93       	st	-X, r24
    35ac:	80 e6       	ldi	r24, 0x60	; 96
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	13 96       	adiw	r26, 0x03	; 3
    35b2:	9c 93       	st	X, r25
    35b4:	8e 93       	st	-X, r24
    35b6:	12 97       	sbiw	r26, 0x02	; 2
    35b8:	fe 01       	movw	r30, r28
    35ba:	e5 57       	subi	r30, 0x75	; 117
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	15 96       	adiw	r26, 0x05	; 5
    35c4:	9c 93       	st	X, r25
    35c6:	8e 93       	st	-X, r24
    35c8:	14 97       	sbiw	r26, 0x04	; 4
    35ca:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <sprintf>
    35ce:	ad b7       	in	r26, 0x3d	; 61
    35d0:	be b7       	in	r27, 0x3e	; 62
    35d2:	16 96       	adiw	r26, 0x06	; 6
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	be bf       	out	0x3e, r27	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	ad bf       	out	0x3d, r26	; 61
	char firstLine[128] = "";
    35de:	19 86       	std	Y+9, r1	; 0x09
    35e0:	1a 86       	std	Y+10, r1	; 0x0a
    35e2:	1b 86       	std	Y+11, r1	; 0x0b
    35e4:	1c 86       	std	Y+12, r1	; 0x0c
    35e6:	8c e7       	ldi	r24, 0x7C	; 124
    35e8:	fe 01       	movw	r30, r28
    35ea:	3d 96       	adiw	r30, 0x0d	; 13
    35ec:	df 01       	movw	r26, r30
    35ee:	98 2f       	mov	r25, r24
    35f0:	1d 92       	st	X+, r1
    35f2:	9a 95       	dec	r25
    35f4:	e9 f7       	brne	.-6      	; 0x35f0 <get_firstline+0xda>
    strcat(firstLine, "F:");
    35f6:	8e 01       	movw	r16, r28
    35f8:	07 5f       	subi	r16, 0xF7	; 247
    35fa:	1f 4f       	sbci	r17, 0xFF	; 255
    35fc:	ce 01       	movw	r24, r28
    35fe:	09 96       	adiw	r24, 0x09	; 9
    3600:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <strlen>
    3604:	80 0f       	add	r24, r16
    3606:	91 1f       	adc	r25, r17
    3608:	23 e6       	ldi	r18, 0x63	; 99
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	b9 01       	movw	r22, r18
    360e:	43 e0       	ldi	r20, 0x03	; 3
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <memcpy>
    strcat(firstLine, fstr);
    3616:	ce 01       	movw	r24, r28
    3618:	09 96       	adiw	r24, 0x09	; 9
    361a:	9e 01       	movw	r18, r28
    361c:	2f 5f       	subi	r18, 0xFF	; 255
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	b9 01       	movw	r22, r18
    3622:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    strcat(firstLine, "KHz");
    3626:	ce 01       	movw	r24, r28
    3628:	09 96       	adiw	r24, 0x09	; 9
    362a:	26 e6       	ldi	r18, 0x66	; 102
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	b9 01       	movw	r22, r18
    3630:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    strcat(firstLine, space);
    3634:	ce 01       	movw	r24, r28
    3636:	09 96       	adiw	r24, 0x09	; 9
    3638:	fe 01       	movw	r30, r28
    363a:	e3 57       	subi	r30, 0x73	; 115
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	20 81       	ld	r18, Z
    3640:	31 81       	ldd	r19, Z+1	; 0x01
    3642:	b9 01       	movw	r22, r18
    3644:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    strcat(firstLine, "Duty:");
    3648:	ce 01       	movw	r24, r28
    364a:	09 96       	adiw	r24, 0x09	; 9
    364c:	2a e6       	ldi	r18, 0x6A	; 106
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	b9 01       	movw	r22, r18
    3652:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    strcat(firstLine, cyclestr);
    3656:	ce 01       	movw	r24, r28
    3658:	09 96       	adiw	r24, 0x09	; 9
    365a:	9e 01       	movw	r18, r28
    365c:	2b 5f       	subi	r18, 0xFB	; 251
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	b9 01       	movw	r22, r18
    3662:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    strcat(firstLine, "%");
    3666:	ce 01       	movw	r24, r28
    3668:	09 96       	adiw	r24, 0x09	; 9
    366a:	20 e7       	ldi	r18, 0x70	; 112
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	b9 01       	movw	r22, r18
    3670:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    return firstLine;
    3674:	ce 01       	movw	r24, r28
    3676:	09 96       	adiw	r24, 0x09	; 9
}
    3678:	c2 57       	subi	r28, 0x72	; 114
    367a:	df 4f       	sbci	r29, 0xFF	; 255
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	08 95       	ret

00003690 <draw_line>:
void draw_line(int f, int cycle)
{
    3690:	0f 93       	push	r16
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	67 97       	sbiw	r28, 0x17	; 23
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	9a 8b       	std	Y+18, r25	; 0x12
    36a8:	89 8b       	std	Y+17, r24	; 0x11
    36aa:	7c 8b       	std	Y+20, r23	; 0x14
    36ac:	6b 8b       	std	Y+19, r22	; 0x13
	float part = 0.30;
    36ae:	8a e9       	ldi	r24, 0x9A	; 154
    36b0:	99 e9       	ldi	r25, 0x99	; 153
    36b2:	a9 e9       	ldi	r26, 0x99	; 153
    36b4:	be e3       	ldi	r27, 0x3E	; 62
    36b6:	8d 87       	std	Y+13, r24	; 0x0d
    36b8:	9e 87       	std	Y+14, r25	; 0x0e
    36ba:	af 87       	std	Y+15, r26	; 0x0f
    36bc:	b8 8b       	std	Y+16, r27	; 0x10
	int uppixels = ceil(part * cycle);
    36be:	8b 89       	ldd	r24, Y+19	; 0x13
    36c0:	9c 89       	ldd	r25, Y+20	; 0x14
    36c2:	aa 27       	eor	r26, r26
    36c4:	97 fd       	sbrc	r25, 7
    36c6:	a0 95       	com	r26
    36c8:	ba 2f       	mov	r27, r26
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	2d 85       	ldd	r18, Y+13	; 0x0d
    36dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    36de:	4f 85       	ldd	r20, Y+15	; 0x0f
    36e0:	58 89       	ldd	r21, Y+16	; 0x10
    36e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	bc 01       	movw	r22, r24
    36ec:	cd 01       	movw	r24, r26
    36ee:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <ceil>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9c 87       	std	Y+12, r25	; 0x0c
    3704:	8b 87       	std	Y+11, r24	; 0x0b
	int downpixels = floor(part * (100 - cycle));
    3706:	24 e6       	ldi	r18, 0x64	; 100
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	8b 89       	ldd	r24, Y+19	; 0x13
    370c:	9c 89       	ldd	r25, Y+20	; 0x14
    370e:	a9 01       	movw	r20, r18
    3710:	48 1b       	sub	r20, r24
    3712:	59 0b       	sbc	r21, r25
    3714:	ca 01       	movw	r24, r20
    3716:	aa 27       	eor	r26, r26
    3718:	97 fd       	sbrc	r25, 7
    371a:	a0 95       	com	r26
    371c:	ba 2f       	mov	r27, r26
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3730:	3e 85       	ldd	r19, Y+14	; 0x0e
    3732:	4f 85       	ldd	r20, Y+15	; 0x0f
    3734:	58 89       	ldd	r21, Y+16	; 0x10
    3736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <floor>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9a 87       	std	Y+10, r25	; 0x0a
    3758:	89 87       	std	Y+9, r24	; 0x09
	if(cycle == 50)
    375a:	8b 89       	ldd	r24, Y+19	; 0x13
    375c:	9c 89       	ldd	r25, Y+20	; 0x14
    375e:	82 33       	cpi	r24, 0x32	; 50
    3760:	91 05       	cpc	r25, r1
    3762:	29 f4       	brne	.+10     	; 0x376e <draw_line+0xde>
		downpixels --;
    3764:	89 85       	ldd	r24, Y+9	; 0x09
    3766:	9a 85       	ldd	r25, Y+10	; 0x0a
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	9a 87       	std	Y+10, r25	; 0x0a
    376c:	89 87       	std	Y+9, r24	; 0x09
	int n_of_cycles = 4;
    376e:	84 e0       	ldi	r24, 0x04	; 4
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	98 87       	std	Y+8, r25	; 0x08
    3774:	8f 83       	std	Y+7, r24	; 0x07
	char l = 120;
    3776:	88 e7       	ldi	r24, 0x78	; 120
    3778:	8e 83       	std	Y+6, r24	; 0x06
	char moves = 0;
    377a:	1d 82       	std	Y+5, r1	; 0x05
	dir d = left;
    377c:	1c 82       	std	Y+4, r1	; 0x04
	char r = 128;
    377e:	80 e8       	ldi	r24, 0x80	; 128
    3780:	8b 83       	std	Y+3, r24	; 0x03
	if(cycle == 100)
    3782:	8b 89       	ldd	r24, Y+19	; 0x13
    3784:	9c 89       	ldd	r25, Y+20	; 0x14
    3786:	84 36       	cpi	r24, 0x64	; 100
    3788:	91 05       	cpc	r25, r1
    378a:	e9 f4       	brne	.+58     	; 0x37c6 <draw_line+0x136>
	{
		line(vup, 0, 3, 64, d);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	70 e0       	ldi	r23, 0x00	; 0
    3792:	43 e0       	ldi	r20, 0x03	; 3
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	20 e4       	ldi	r18, 0x40	; 64
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	0c 81       	ldd	r16, Y+4	; 0x04
    379c:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
		d = !d;
    37a0:	1d 8a       	std	Y+21, r1	; 0x15
    37a2:	8c 81       	ldd	r24, Y+4	; 0x04
    37a4:	88 23       	and	r24, r24
    37a6:	11 f4       	brne	.+4      	; 0x37ac <draw_line+0x11c>
    37a8:	51 e0       	ldi	r21, 0x01	; 1
    37aa:	5d 8b       	std	Y+21, r21	; 0x15
    37ac:	8d 89       	ldd	r24, Y+21	; 0x15
    37ae:	8c 83       	std	Y+4, r24	; 0x04
		line(vup, 0, 3, 64, d);
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	70 e0       	ldi	r23, 0x00	; 0
    37b6:	43 e0       	ldi	r20, 0x03	; 3
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	20 e4       	ldi	r18, 0x40	; 64
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	0c 81       	ldd	r16, Y+4	; 0x04
    37c0:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    37c4:	c2 c0       	rjmp	.+388    	; 0x394a <draw_line+0x2ba>
	}
	else if(cycle == 0)
    37c6:	8b 89       	ldd	r24, Y+19	; 0x13
    37c8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	e9 f4       	brne	.+58     	; 0x3808 <draw_line+0x178>
	{
		line(vdown, 0, 5, 64, d);
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	45 e0       	ldi	r20, 0x05	; 5
    37d6:	50 e0       	ldi	r21, 0x00	; 0
    37d8:	20 e4       	ldi	r18, 0x40	; 64
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	0c 81       	ldd	r16, Y+4	; 0x04
    37de:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
		d = !d;
    37e2:	1e 8a       	std	Y+22, r1	; 0x16
    37e4:	8c 81       	ldd	r24, Y+4	; 0x04
    37e6:	88 23       	and	r24, r24
    37e8:	11 f4       	brne	.+4      	; 0x37ee <draw_line+0x15e>
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	4e 8b       	std	Y+22, r20	; 0x16
    37ee:	5e 89       	ldd	r21, Y+22	; 0x16
    37f0:	5c 83       	std	Y+4, r21	; 0x04
		line(vdown, 0, 5, 64, d);
    37f2:	82 e0       	ldi	r24, 0x02	; 2
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	45 e0       	ldi	r20, 0x05	; 5
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	20 e4       	ldi	r18, 0x40	; 64
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	0c 81       	ldd	r16, Y+4	; 0x04
    3802:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3806:	a1 c0       	rjmp	.+322    	; 0x394a <draw_line+0x2ba>
	}
	else
	{
		r = r - moves;
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	9d 81       	ldd	r25, Y+5	; 0x05
    380c:	89 1b       	sub	r24, r25
    380e:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < n_of_cycles; i++)
    3810:	1a 82       	std	Y+2, r1	; 0x02
    3812:	19 82       	std	Y+1, r1	; 0x01
    3814:	92 c0       	rjmp	.+292    	; 0x393a <draw_line+0x2aa>
		{
			moves = 0;
    3816:	1d 82       	std	Y+5, r1	; 0x05
			moves += line(h, moves, 4, 1, d);
    3818:	8d 81       	ldd	r24, Y+5	; 0x05
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	b9 01       	movw	r22, r18
    3822:	44 e0       	ldi	r20, 0x04	; 4
    3824:	50 e0       	ldi	r21, 0x00	; 0
    3826:	21 e0       	ldi	r18, 0x01	; 1
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	0c 81       	ldd	r16, Y+4	; 0x04
    382c:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3830:	98 2f       	mov	r25, r24
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	89 0f       	add	r24, r25
    3836:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vup, moves, 4, uppixels, d);
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	28 2f       	mov	r18, r24
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3840:	fc 85       	ldd	r31, Y+12	; 0x0c
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	b9 01       	movw	r22, r18
    3846:	44 e0       	ldi	r20, 0x04	; 4
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	9f 01       	movw	r18, r30
    384c:	0c 81       	ldd	r16, Y+4	; 0x04
    384e:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3852:	98 2f       	mov	r25, r24
    3854:	8d 81       	ldd	r24, Y+5	; 0x05
    3856:	89 0f       	add	r24, r25
    3858:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	28 2f       	mov	r18, r24
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	b9 01       	movw	r22, r18
    3864:	44 e0       	ldi	r20, 0x04	; 4
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	21 e0       	ldi	r18, 0x01	; 1
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	0c 81       	ldd	r16, Y+4	; 0x04
    386e:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3872:	98 2f       	mov	r25, r24
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	89 0f       	add	r24, r25
    3878:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vdown, moves, 4, downpixels, d);
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	e9 85       	ldd	r30, Y+9	; 0x09
    3882:	fa 85       	ldd	r31, Y+10	; 0x0a
    3884:	82 e0       	ldi	r24, 0x02	; 2
    3886:	b9 01       	movw	r22, r18
    3888:	44 e0       	ldi	r20, 0x04	; 4
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	9f 01       	movw	r18, r30
    388e:	0c 81       	ldd	r16, Y+4	; 0x04
    3890:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3894:	98 2f       	mov	r25, r24
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	89 0f       	add	r24, r25
    389a:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	b9 01       	movw	r22, r18
    38a6:	44 e0       	ldi	r20, 0x04	; 4
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	21 e0       	ldi	r18, 0x01	; 1
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	0c 81       	ldd	r16, Y+4	; 0x04
    38b0:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    38b4:	98 2f       	mov	r25, r24
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	89 0f       	add	r24, r25
    38ba:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vup, moves, 4, uppixels, d);
    38bc:	8d 81       	ldd	r24, Y+5	; 0x05
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    38c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	b9 01       	movw	r22, r18
    38ca:	44 e0       	ldi	r20, 0x04	; 4
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	9f 01       	movw	r18, r30
    38d0:	0c 81       	ldd	r16, Y+4	; 0x04
    38d2:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    38d6:	98 2f       	mov	r25, r24
    38d8:	8d 81       	ldd	r24, Y+5	; 0x05
    38da:	89 0f       	add	r24, r25
    38dc:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    38de:	8d 81       	ldd	r24, Y+5	; 0x05
    38e0:	28 2f       	mov	r18, r24
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	b9 01       	movw	r22, r18
    38e8:	44 e0       	ldi	r20, 0x04	; 4
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	21 e0       	ldi	r18, 0x01	; 1
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	0c 81       	ldd	r16, Y+4	; 0x04
    38f2:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    38f6:	98 2f       	mov	r25, r24
    38f8:	8d 81       	ldd	r24, Y+5	; 0x05
    38fa:	89 0f       	add	r24, r25
    38fc:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vdown, moves, 4, downpixels, d);
    38fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3900:	28 2f       	mov	r18, r24
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	e9 85       	ldd	r30, Y+9	; 0x09
    3906:	fa 85       	ldd	r31, Y+10	; 0x0a
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	b9 01       	movw	r22, r18
    390c:	44 e0       	ldi	r20, 0x04	; 4
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	9f 01       	movw	r18, r30
    3912:	0c 81       	ldd	r16, Y+4	; 0x04
    3914:	0e 94 20 1a 	call	0x3440	; 0x3440 <line>
    3918:	98 2f       	mov	r25, r24
    391a:	8d 81       	ldd	r24, Y+5	; 0x05
    391c:	89 0f       	add	r24, r25
    391e:	8d 83       	std	Y+5, r24	; 0x05
			d = !d;
    3920:	1f 8a       	std	Y+23, r1	; 0x17
    3922:	8c 81       	ldd	r24, Y+4	; 0x04
    3924:	88 23       	and	r24, r24
    3926:	11 f4       	brne	.+4      	; 0x392c <draw_line+0x29c>
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	8f 8b       	std	Y+23, r24	; 0x17
    392c:	4f 89       	ldd	r20, Y+23	; 0x17
    392e:	4c 83       	std	Y+4, r20	; 0x04
		line(vdown, 0, 5, 64, d);
	}
	else
	{
		r = r - moves;
		for(int i = 0; i < n_of_cycles; i++)
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	9a 83       	std	Y+2, r25	; 0x02
    3938:	89 83       	std	Y+1, r24	; 0x01
    393a:	29 81       	ldd	r18, Y+1	; 0x01
    393c:	3a 81       	ldd	r19, Y+2	; 0x02
    393e:	8f 81       	ldd	r24, Y+7	; 0x07
    3940:	98 85       	ldd	r25, Y+8	; 0x08
    3942:	28 17       	cp	r18, r24
    3944:	39 07       	cpc	r19, r25
    3946:	0c f4       	brge	.+2      	; 0x394a <draw_line+0x2ba>
    3948:	66 cf       	rjmp	.-308    	; 0x3816 <draw_line+0x186>
		{
			line(vup, moves, 4, l, d);
		}
*/
	}
}
    394a:	67 96       	adiw	r28, 0x17	; 23
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	0f 91       	pop	r16
    395c:	08 95       	ret

0000395e <TIMER0_Init>:
 * Target	:  ATMEGA32
 * Author	:  Eng_Fawzi
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
		TIMER0_TCCR0_REG|= TIMER0_CTC_MODE;
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_FAST_PWM)
		TIMER0_TCCR0_REG|= TIMER0_PWM_FAST;
    3966:	a3 e5       	ldi	r26, 0x53	; 83
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e3 e5       	ldi	r30, 0x53	; 83
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	88 64       	ori	r24, 0x48	; 72
    3972:	8c 93       	st	X, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <TIMER0_PWM>:
}
#endif

#if ((TIMER_OPERATION_MODE == TIMER0_MODE_FAST_PWM) || (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT))
void TIMER0_PWM(u8 freq, u8 dutyCycle)
{
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	00 d0       	rcall	.+0      	; 0x3980 <TIMER0_PWM+0x6>
    3980:	00 d0       	rcall	.+0      	; 0x3982 <TIMER0_PWM+0x8>
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	8b 83       	std	Y+3, r24	; 0x03
    3988:	6c 83       	std	Y+4, r22	; 0x04
	u16 result =0 ;
    398a:	1a 82       	std	Y+2, r1	; 0x02
    398c:	19 82       	std	Y+1, r1	; 0x01
	result = (dutyCycle * TIMER0_TOP)/100;
    398e:	8c 81       	ldd	r24, Y+4	; 0x04
    3990:	48 2f       	mov	r20, r24
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	ca 01       	movw	r24, r20
    3996:	9c 01       	movw	r18, r24
    3998:	22 0f       	add	r18, r18
    399a:	33 1f       	adc	r19, r19
    399c:	c9 01       	movw	r24, r18
    399e:	96 95       	lsr	r25
    39a0:	98 2f       	mov	r25, r24
    39a2:	88 27       	eor	r24, r24
    39a4:	97 95       	ror	r25
    39a6:	87 95       	ror	r24
    39a8:	82 1b       	sub	r24, r18
    39aa:	93 0b       	sbc	r25, r19
    39ac:	84 0f       	add	r24, r20
    39ae:	95 1f       	adc	r25, r21
    39b0:	24 e6       	ldi	r18, 0x64	; 100
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	b9 01       	movw	r22, r18
    39b6:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    39ba:	cb 01       	movw	r24, r22
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = result;
    39c0:	ec e5       	ldi	r30, 0x5C	; 92
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	80 83       	st	Z, r24

	/*	Check for frequency then choose prescaler	*/
}
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <main>:
#include <avr/interrupt.h>
#include <stdlib.h>
#include <stdio.h>      /* Include standard i/o library file */

int main(void)
{
    39d6:	ef 92       	push	r14
    39d8:	ff 92       	push	r15
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	ca 5c       	subi	r28, 0xCA	; 202
    39e8:	d0 40       	sbci	r29, 0x00	; 0
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61

	PWM_init();
    39f4:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <PWM_init>
	PWM_set_duty(127);
    39f8:	8f e7       	ldi	r24, 0x7F	; 127
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <PWM_set_duty>
	unsigned int a,b,c,high,period;
	char frequency[14],duty_cy[7];
	PORTD = 0xFF;			/* Turn ON pull-up resistor */
    3a00:	e2 e3       	ldi	r30, 0x32	; 50
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	8f ef       	ldi	r24, 0xFF	; 255
    3a06:	80 83       	st	Z, r24


	char breaks = 2;
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	8a 8b       	std	Y+18, r24	; 0x12
	char cap = 128 - breaks;
    3a0c:	90 e8       	ldi	r25, 0x80	; 128
    3a0e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a10:	29 2f       	mov	r18, r25
    3a12:	28 1b       	sub	r18, r24
    3a14:	82 2f       	mov	r24, r18
    3a16:	89 8b       	std	Y+17, r24	; 0x11
    int f = 16;
    3a18:	80 e1       	ldi	r24, 0x10	; 16
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	98 8b       	std	Y+16, r25	; 0x10
    3a1e:	8f 87       	std	Y+15, r24	; 0x0f
    int cycle = 25;
    3a20:	89 e1       	ldi	r24, 0x19	; 25
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9e 87       	std	Y+14, r25	; 0x0e
    3a26:	8d 87       	std	Y+13, r24	; 0x0d
    int x = 90;
    3a28:	8a e5       	ldi	r24, 0x5A	; 90
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	9c 87       	std	Y+12, r25	; 0x0c
    3a2e:	8b 87       	std	Y+11, r24	; 0x0b
    int move = 0;
    3a30:	1a 86       	std	Y+10, r1	; 0x0a
    3a32:	19 86       	std	Y+9, r1	; 0x09
    char space[20] = "    ";
    3a34:	ae 01       	movw	r20, r28
    3a36:	4e 5c       	subi	r20, 0xCE	; 206
    3a38:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3a:	ca 53       	subi	r28, 0x3A	; 58
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	59 83       	std	Y+1, r21	; 0x01
    3a40:	48 83       	st	Y, r20
    3a42:	c6 5c       	subi	r28, 0xC6	; 198
    3a44:	d0 40       	sbci	r29, 0x00	; 0
    3a46:	88 e7       	ldi	r24, 0x78	; 120
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	c8 53       	subi	r28, 0x38	; 56
    3a4c:	df 4f       	sbci	r29, 0xFF	; 255
    3a4e:	99 83       	std	Y+1, r25	; 0x01
    3a50:	88 83       	st	Y, r24
    3a52:	c8 5c       	subi	r28, 0xC8	; 200
    3a54:	d0 40       	sbci	r29, 0x00	; 0
    3a56:	95 e0       	ldi	r25, 0x05	; 5
    3a58:	c6 53       	subi	r28, 0x36	; 54
    3a5a:	df 4f       	sbci	r29, 0xFF	; 255
    3a5c:	98 83       	st	Y, r25
    3a5e:	ca 5c       	subi	r28, 0xCA	; 202
    3a60:	d0 40       	sbci	r29, 0x00	; 0
    3a62:	c8 53       	subi	r28, 0x38	; 56
    3a64:	df 4f       	sbci	r29, 0xFF	; 255
    3a66:	a8 81       	ld	r26, Y
    3a68:	b9 81       	ldd	r27, Y+1	; 0x01
    3a6a:	c8 5c       	subi	r28, 0xC8	; 200
    3a6c:	d0 40       	sbci	r29, 0x00	; 0
    3a6e:	0c 90       	ld	r0, X
    3a70:	c8 53       	subi	r28, 0x38	; 56
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	e8 81       	ld	r30, Y
    3a76:	f9 81       	ldd	r31, Y+1	; 0x01
    3a78:	c8 5c       	subi	r28, 0xC8	; 200
    3a7a:	d0 40       	sbci	r29, 0x00	; 0
    3a7c:	31 96       	adiw	r30, 0x01	; 1
    3a7e:	c8 53       	subi	r28, 0x38	; 56
    3a80:	df 4f       	sbci	r29, 0xFF	; 255
    3a82:	f9 83       	std	Y+1, r31	; 0x01
    3a84:	e8 83       	st	Y, r30
    3a86:	c8 5c       	subi	r28, 0xC8	; 200
    3a88:	d0 40       	sbci	r29, 0x00	; 0
    3a8a:	ca 53       	subi	r28, 0x3A	; 58
    3a8c:	df 4f       	sbci	r29, 0xFF	; 255
    3a8e:	a8 81       	ld	r26, Y
    3a90:	b9 81       	ldd	r27, Y+1	; 0x01
    3a92:	c6 5c       	subi	r28, 0xC6	; 198
    3a94:	d0 40       	sbci	r29, 0x00	; 0
    3a96:	0c 92       	st	X, r0
    3a98:	ca 53       	subi	r28, 0x3A	; 58
    3a9a:	df 4f       	sbci	r29, 0xFF	; 255
    3a9c:	e8 81       	ld	r30, Y
    3a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    3aa0:	c6 5c       	subi	r28, 0xC6	; 198
    3aa2:	d0 40       	sbci	r29, 0x00	; 0
    3aa4:	31 96       	adiw	r30, 0x01	; 1
    3aa6:	ca 53       	subi	r28, 0x3A	; 58
    3aa8:	df 4f       	sbci	r29, 0xFF	; 255
    3aaa:	f9 83       	std	Y+1, r31	; 0x01
    3aac:	e8 83       	st	Y, r30
    3aae:	c6 5c       	subi	r28, 0xC6	; 198
    3ab0:	d0 40       	sbci	r29, 0x00	; 0
    3ab2:	c6 53       	subi	r28, 0x36	; 54
    3ab4:	df 4f       	sbci	r29, 0xFF	; 255
    3ab6:	f8 81       	ld	r31, Y
    3ab8:	ca 5c       	subi	r28, 0xCA	; 202
    3aba:	d0 40       	sbci	r29, 0x00	; 0
    3abc:	f1 50       	subi	r31, 0x01	; 1
    3abe:	c6 53       	subi	r28, 0x36	; 54
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	f8 83       	st	Y, r31
    3ac4:	ca 5c       	subi	r28, 0xCA	; 202
    3ac6:	d0 40       	sbci	r29, 0x00	; 0
    3ac8:	c6 53       	subi	r28, 0x36	; 54
    3aca:	df 4f       	sbci	r29, 0xFF	; 255
    3acc:	28 81       	ld	r18, Y
    3ace:	ca 5c       	subi	r28, 0xCA	; 202
    3ad0:	d0 40       	sbci	r29, 0x00	; 0
    3ad2:	22 23       	and	r18, r18
    3ad4:	31 f6       	brne	.-116    	; 0x3a62 <main+0x8c>
    3ad6:	8f e0       	ldi	r24, 0x0F	; 15
    3ad8:	fe 01       	movw	r30, r28
    3ada:	f7 96       	adiw	r30, 0x37	; 55
    3adc:	df 01       	movw	r26, r30
    3ade:	28 2f       	mov	r18, r24
    3ae0:	1d 92       	st	X+, r1
    3ae2:	2a 95       	dec	r18
    3ae4:	e9 f7       	brne	.-6      	; 0x3ae0 <main+0x10a>
    char firstLine[128];

    GLCD_Init();         /* Initialize GLCD */
    3ae6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <GLCD_Init>
    GLCD_ClearAll();     /* Clear all GLCD display */
    3aea:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <GLCD_ClearAll>
    while (1)
    {
    	TCCR1A = 0;
    3aee:	ef e4       	ldi	r30, 0x4F	; 79
    3af0:	f0 e0       	ldi	r31, 0x00	; 0
    3af2:	10 82       	st	Z, r1
        TCNT1=0;
    3af4:	ec e4       	ldi	r30, 0x4C	; 76
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	11 82       	std	Z+1, r1	; 0x01
    3afa:	10 82       	st	Z, r1
        TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
    3afc:	e8 e5       	ldi	r30, 0x58	; 88
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	80 e2       	ldi	r24, 0x20	; 32
    3b02:	80 83       	st	Z, r24

        TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    3b04:	ee e4       	ldi	r30, 0x4E	; 78
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	81 e4       	ldi	r24, 0x41	; 65
    3b0a:	80 83       	st	Z, r24
        while ((TIFR&(1<<ICF1)) == 0);
    3b0c:	e8 e5       	ldi	r30, 0x58	; 88
    3b0e:	f0 e0       	ldi	r31, 0x00	; 0
    3b10:	80 81       	ld	r24, Z
    3b12:	88 2f       	mov	r24, r24
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	80 72       	andi	r24, 0x20	; 32
    3b18:	90 70       	andi	r25, 0x00	; 0
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	b9 f3       	breq	.-18     	; 0x3b0c <main+0x136>
        a = ICR1;  		/* Take value of capture register */
    3b1e:	e6 e4       	ldi	r30, 0x46	; 70
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	9c 8f       	std	Y+28, r25	; 0x1c
    3b28:	8b 8f       	std	Y+27, r24	; 0x1b
        TIFR = (1<<ICF1);  	/* Clear ICF flag */
    3b2a:	e8 e5       	ldi	r30, 0x58	; 88
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 e2       	ldi	r24, 0x20	; 32
    3b30:	80 83       	st	Z, r24

        TCCR1B = 0x01;  	/* Falling edge, no prescaler */
    3b32:	ee e4       	ldi	r30, 0x4E	; 78
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	80 83       	st	Z, r24
        while ((TIFR&(1<<ICF1)) == 0);
    3b3a:	e8 e5       	ldi	r30, 0x58	; 88
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	80 81       	ld	r24, Z
    3b40:	88 2f       	mov	r24, r24
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	80 72       	andi	r24, 0x20	; 32
    3b46:	90 70       	andi	r25, 0x00	; 0
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	b9 f3       	breq	.-18     	; 0x3b3a <main+0x164>
        b = ICR1;  		/* Take value of capture register */
    3b4c:	e6 e4       	ldi	r30, 0x46	; 70
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	9a 8f       	std	Y+26, r25	; 0x1a
    3b56:	89 8f       	std	Y+25, r24	; 0x19
        TIFR = (1<<ICF1);  	/* Clear ICF flag */
    3b58:	e8 e5       	ldi	r30, 0x58	; 88
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	80 e2       	ldi	r24, 0x20	; 32
    3b5e:	80 83       	st	Z, r24

        TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    3b60:	ee e4       	ldi	r30, 0x4E	; 78
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	81 e4       	ldi	r24, 0x41	; 65
    3b66:	80 83       	st	Z, r24
        while ((TIFR&(1<<ICF1)) == 0);
    3b68:	e8 e5       	ldi	r30, 0x58	; 88
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	80 81       	ld	r24, Z
    3b6e:	88 2f       	mov	r24, r24
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	80 72       	andi	r24, 0x20	; 32
    3b74:	90 70       	andi	r25, 0x00	; 0
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	b9 f3       	breq	.-18     	; 0x3b68 <main+0x192>
        c = ICR1;  		/* Take value of capture register */
    3b7a:	e6 e4       	ldi	r30, 0x46	; 70
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	98 8f       	std	Y+24, r25	; 0x18
    3b84:	8f 8b       	std	Y+23, r24	; 0x17
        TIFR = (1<<ICF1);  	/* Clear ICF flag */
    3b86:	e8 e5       	ldi	r30, 0x58	; 88
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	80 e2       	ldi	r24, 0x20	; 32
    3b8c:	80 83       	st	Z, r24

        TCCR1B = 0;  		/* Stop the timer */
    3b8e:	ee e4       	ldi	r30, 0x4E	; 78
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	10 82       	st	Z, r1

        if(a<b && b<c)  	/* Check for valid condition,
    3b94:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3b96:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3b98:	89 8d       	ldd	r24, Y+25	; 0x19
    3b9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b9c:	28 17       	cp	r18, r24
    3b9e:	39 07       	cpc	r19, r25
    3ba0:	08 f0       	brcs	.+2      	; 0x3ba4 <main+0x1ce>
    3ba2:	86 c0       	rjmp	.+268    	; 0x3cb0 <main+0x2da>
    3ba4:	29 8d       	ldd	r18, Y+25	; 0x19
    3ba6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    3baa:	98 8d       	ldd	r25, Y+24	; 0x18
    3bac:	28 17       	cp	r18, r24
    3bae:	39 07       	cpc	r19, r25
    3bb0:	08 f0       	brcs	.+2      	; 0x3bb4 <main+0x1de>
    3bb2:	7e c0       	rjmp	.+252    	; 0x3cb0 <main+0x2da>
        			to avoid timer overflow reading */
        {
        	high=b-a;
    3bb4:	29 8d       	ldd	r18, Y+25	; 0x19
    3bb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bbc:	a9 01       	movw	r20, r18
    3bbe:	48 1b       	sub	r20, r24
    3bc0:	59 0b       	sbc	r21, r25
    3bc2:	ca 01       	movw	r24, r20
    3bc4:	9e 8b       	std	Y+22, r25	; 0x16
    3bc6:	8d 8b       	std	Y+21, r24	; 0x15
        	period=c-a;
    3bc8:	2f 89       	ldd	r18, Y+23	; 0x17
    3bca:	38 8d       	ldd	r19, Y+24	; 0x18
    3bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd0:	d9 01       	movw	r26, r18
    3bd2:	a8 1b       	sub	r26, r24
    3bd4:	b9 0b       	sbc	r27, r25
    3bd6:	cd 01       	movw	r24, r26
    3bd8:	9c 8b       	std	Y+20, r25	; 0x14
    3bda:	8b 8b       	std	Y+19, r24	; 0x13

        	long freq= F_CPU/period;/* Calculate frequency */
    3bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bde:	9c 89       	ldd	r25, Y+20	; 0x14
    3be0:	9c 01       	movw	r18, r24
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	94 e2       	ldi	r25, 0x24	; 36
    3bea:	a4 ef       	ldi	r26, 0xF4	; 244
    3bec:	b0 e0       	ldi	r27, 0x00	; 0
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__udivmodsi4>
    3bf6:	da 01       	movw	r26, r20
    3bf8:	c9 01       	movw	r24, r18
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	af 83       	std	Y+7, r26	; 0x07
    3c00:	b8 87       	std	Y+8, r27	; 0x08

        				/* Calculate duty cycle */
        	    		float duty_cycle =((float) high /(float)period)*100;
    3c02:	8d 89       	ldd	r24, Y+21	; 0x15
    3c04:	9e 89       	ldd	r25, Y+22	; 0x16
    3c06:	cc 01       	movw	r24, r24
    3c08:	a0 e0       	ldi	r26, 0x00	; 0
    3c0a:	b0 e0       	ldi	r27, 0x00	; 0
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	cd 01       	movw	r24, r26
    3c10:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    3c14:	7b 01       	movw	r14, r22
    3c16:	8c 01       	movw	r16, r24
    3c18:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1c:	cc 01       	movw	r24, r24
    3c1e:	a0 e0       	ldi	r26, 0x00	; 0
    3c20:	b0 e0       	ldi	r27, 0x00	; 0
    3c22:	bc 01       	movw	r22, r24
    3c24:	cd 01       	movw	r24, r26
    3c26:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    3c2a:	9b 01       	movw	r18, r22
    3c2c:	ac 01       	movw	r20, r24
    3c2e:	c8 01       	movw	r24, r16
    3c30:	b7 01       	movw	r22, r14
    3c32:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	48 ec       	ldi	r20, 0xC8	; 200
    3c44:	52 e4       	ldi	r21, 0x42	; 66
    3c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	ab 83       	std	Y+3, r26	; 0x03
    3c54:	bc 83       	std	Y+4, r27	; 0x04
        	ltoa(freq,frequency,10);
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	af 81       	ldd	r26, Y+7	; 0x07
    3c5c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c5e:	9e 01       	movw	r18, r28
    3c60:	23 5e       	subi	r18, 0xE3	; 227
    3c62:	3f 4f       	sbci	r19, 0xFF	; 255
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	a9 01       	movw	r20, r18
    3c6a:	2a e0       	ldi	r18, 0x0A	; 10
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <ltoa>

        	itoa((int)duty_cycle,duty_cy,10);
    3c72:	69 81       	ldd	r22, Y+1	; 0x01
    3c74:	7a 81       	ldd	r23, Y+2	; 0x02
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
    3c78:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7a:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9e 01       	movw	r18, r28
    3c84:	25 5d       	subi	r18, 0xD5	; 213
    3c86:	3f 4f       	sbci	r19, 0xFF	; 255
    3c88:	b9 01       	movw	r22, r18
    3c8a:	4a e0       	ldi	r20, 0x0A	; 10
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <itoa>

        	f = freq;
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	98 8b       	std	Y+16, r25	; 0x10
    3c98:	8f 87       	std	Y+15, r24	; 0x0f
        	cycle = duty_cycle;
    3c9a:	69 81       	ldd	r22, Y+1	; 0x01
    3c9c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	9e 87       	std	Y+14, r25	; 0x0e
    3cac:	8d 87       	std	Y+13, r24	; 0x0d
    3cae:	0b c0       	rjmp	.+22     	; 0x3cc6 <main+0x2f0>

        }

        else
        {
        	f = 0;
    3cb0:	18 8a       	std	Y+16, r1	; 0x10
    3cb2:	1f 86       	std	Y+15, r1	; 0x0f
        	cycle = 0;
    3cb4:	1e 86       	std	Y+14, r1	; 0x0e
    3cb6:	1d 86       	std	Y+13, r1	; 0x0d
        	GLCD_String(0, "error");
    3cb8:	22 e7       	ldi	r18, 0x72	; 114
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	b9 01       	movw	r22, r18
    3cc2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <GLCD_String>





        strcat(' ', ' ');
    3cc6:	80 e2       	ldi	r24, 0x20	; 32
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	60 e2       	ldi	r22, 0x20	; 32
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <strcat>
    	strcpy(firstLine, get_firstline(f, cycle, space));
    3cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd4:	98 89       	ldd	r25, Y+16	; 0x10
    3cd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    3cd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cda:	ae 01       	movw	r20, r28
    3cdc:	4e 5c       	subi	r20, 0xCE	; 206
    3cde:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce0:	b9 01       	movw	r22, r18
    3ce2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <get_firstline>
    3ce6:	9c 01       	movw	r18, r24
    3ce8:	ce 01       	movw	r24, r28
    3cea:	8a 5b       	subi	r24, 0xBA	; 186
    3cec:	9f 4f       	sbci	r25, 0xFF	; 255
    3cee:	b9 01       	movw	r22, r18
    3cf0:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <strcpy>
    	GLCD_String(0, firstLine); /* Print String on 0th page of display */
    3cf4:	9e 01       	movw	r18, r28
    3cf6:	2a 5b       	subi	r18, 0xBA	; 186
    3cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	b9 01       	movw	r22, r18
    3d00:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <GLCD_String>
    	draw_line(f, cycle);
    3d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d06:	98 89       	ldd	r25, Y+16	; 0x10
    3d08:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d0a:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d0c:	b9 01       	movw	r22, r18
    3d0e:	0e 94 48 1b 	call	0x3690	; 0x3690 <draw_line>
    3d12:	ed ce       	rjmp	.-550    	; 0x3aee <main+0x118>

00003d14 <PWM_init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdlib.h>

void PWM_init()
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00)| (1<<CS01);
    3d1c:	e3 e5       	ldi	r30, 0x53	; 83
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	8b e6       	ldi	r24, 0x6B	; 107
    3d22:	80 83       	st	Z, r24
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
    3d24:	a7 e3       	ldi	r26, 0x37	; 55
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e7 e3       	ldi	r30, 0x37	; 55
    3d2a:	f0 e0       	ldi	r31, 0x00	; 0
    3d2c:	80 81       	ld	r24, Z
    3d2e:	88 60       	ori	r24, 0x08	; 8
    3d30:	8c 93       	st	X, r24
}
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <PWM_set_duty>:
void PWM_set_duty(char x)
{
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	0f 92       	push	r0
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = x;
    3d44:	ec e5       	ldi	r30, 0x5C	; 92
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	80 83       	st	Z, r24
}
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <__udivmodqi4>:
    3d54:	99 1b       	sub	r25, r25
    3d56:	79 e0       	ldi	r23, 0x09	; 9
    3d58:	04 c0       	rjmp	.+8      	; 0x3d62 <__udivmodqi4_ep>

00003d5a <__udivmodqi4_loop>:
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	96 17       	cp	r25, r22
    3d5e:	08 f0       	brcs	.+2      	; 0x3d62 <__udivmodqi4_ep>
    3d60:	96 1b       	sub	r25, r22

00003d62 <__udivmodqi4_ep>:
    3d62:	88 1f       	adc	r24, r24
    3d64:	7a 95       	dec	r23
    3d66:	c9 f7       	brne	.-14     	; 0x3d5a <__udivmodqi4_loop>
    3d68:	80 95       	com	r24
    3d6a:	08 95       	ret

00003d6c <__udivmodhi4>:
    3d6c:	aa 1b       	sub	r26, r26
    3d6e:	bb 1b       	sub	r27, r27
    3d70:	51 e1       	ldi	r21, 0x11	; 17
    3d72:	07 c0       	rjmp	.+14     	; 0x3d82 <__udivmodhi4_ep>

00003d74 <__udivmodhi4_loop>:
    3d74:	aa 1f       	adc	r26, r26
    3d76:	bb 1f       	adc	r27, r27
    3d78:	a6 17       	cp	r26, r22
    3d7a:	b7 07       	cpc	r27, r23
    3d7c:	10 f0       	brcs	.+4      	; 0x3d82 <__udivmodhi4_ep>
    3d7e:	a6 1b       	sub	r26, r22
    3d80:	b7 0b       	sbc	r27, r23

00003d82 <__udivmodhi4_ep>:
    3d82:	88 1f       	adc	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	5a 95       	dec	r21
    3d88:	a9 f7       	brne	.-22     	; 0x3d74 <__udivmodhi4_loop>
    3d8a:	80 95       	com	r24
    3d8c:	90 95       	com	r25
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	08 95       	ret

00003d94 <__divmodhi4>:
    3d94:	97 fb       	bst	r25, 7
    3d96:	09 2e       	mov	r0, r25
    3d98:	07 26       	eor	r0, r23
    3d9a:	0a d0       	rcall	.+20     	; 0x3db0 <__divmodhi4_neg1>
    3d9c:	77 fd       	sbrc	r23, 7
    3d9e:	04 d0       	rcall	.+8      	; 0x3da8 <__divmodhi4_neg2>
    3da0:	e5 df       	rcall	.-54     	; 0x3d6c <__udivmodhi4>
    3da2:	06 d0       	rcall	.+12     	; 0x3db0 <__divmodhi4_neg1>
    3da4:	00 20       	and	r0, r0
    3da6:	1a f4       	brpl	.+6      	; 0x3dae <__divmodhi4_exit>

00003da8 <__divmodhi4_neg2>:
    3da8:	70 95       	com	r23
    3daa:	61 95       	neg	r22
    3dac:	7f 4f       	sbci	r23, 0xFF	; 255

00003dae <__divmodhi4_exit>:
    3dae:	08 95       	ret

00003db0 <__divmodhi4_neg1>:
    3db0:	f6 f7       	brtc	.-4      	; 0x3dae <__divmodhi4_exit>
    3db2:	90 95       	com	r25
    3db4:	81 95       	neg	r24
    3db6:	9f 4f       	sbci	r25, 0xFF	; 255
    3db8:	08 95       	ret

00003dba <__udivmodsi4>:
    3dba:	a1 e2       	ldi	r26, 0x21	; 33
    3dbc:	1a 2e       	mov	r1, r26
    3dbe:	aa 1b       	sub	r26, r26
    3dc0:	bb 1b       	sub	r27, r27
    3dc2:	fd 01       	movw	r30, r26
    3dc4:	0d c0       	rjmp	.+26     	; 0x3de0 <__udivmodsi4_ep>

00003dc6 <__udivmodsi4_loop>:
    3dc6:	aa 1f       	adc	r26, r26
    3dc8:	bb 1f       	adc	r27, r27
    3dca:	ee 1f       	adc	r30, r30
    3dcc:	ff 1f       	adc	r31, r31
    3dce:	a2 17       	cp	r26, r18
    3dd0:	b3 07       	cpc	r27, r19
    3dd2:	e4 07       	cpc	r30, r20
    3dd4:	f5 07       	cpc	r31, r21
    3dd6:	20 f0       	brcs	.+8      	; 0x3de0 <__udivmodsi4_ep>
    3dd8:	a2 1b       	sub	r26, r18
    3dda:	b3 0b       	sbc	r27, r19
    3ddc:	e4 0b       	sbc	r30, r20
    3dde:	f5 0b       	sbc	r31, r21

00003de0 <__udivmodsi4_ep>:
    3de0:	66 1f       	adc	r22, r22
    3de2:	77 1f       	adc	r23, r23
    3de4:	88 1f       	adc	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	1a 94       	dec	r1
    3dea:	69 f7       	brne	.-38     	; 0x3dc6 <__udivmodsi4_loop>
    3dec:	60 95       	com	r22
    3dee:	70 95       	com	r23
    3df0:	80 95       	com	r24
    3df2:	90 95       	com	r25
    3df4:	9b 01       	movw	r18, r22
    3df6:	ac 01       	movw	r20, r24
    3df8:	bd 01       	movw	r22, r26
    3dfa:	cf 01       	movw	r24, r30
    3dfc:	08 95       	ret

00003dfe <__prologue_saves__>:
    3dfe:	2f 92       	push	r2
    3e00:	3f 92       	push	r3
    3e02:	4f 92       	push	r4
    3e04:	5f 92       	push	r5
    3e06:	6f 92       	push	r6
    3e08:	7f 92       	push	r7
    3e0a:	8f 92       	push	r8
    3e0c:	9f 92       	push	r9
    3e0e:	af 92       	push	r10
    3e10:	bf 92       	push	r11
    3e12:	cf 92       	push	r12
    3e14:	df 92       	push	r13
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	ca 1b       	sub	r28, r26
    3e28:	db 0b       	sbc	r29, r27
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	09 94       	ijmp

00003e36 <__epilogue_restores__>:
    3e36:	2a 88       	ldd	r2, Y+18	; 0x12
    3e38:	39 88       	ldd	r3, Y+17	; 0x11
    3e3a:	48 88       	ldd	r4, Y+16	; 0x10
    3e3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e40:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e42:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e44:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e46:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e48:	b9 84       	ldd	r11, Y+9	; 0x09
    3e4a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e4c:	df 80       	ldd	r13, Y+7	; 0x07
    3e4e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e50:	fd 80       	ldd	r15, Y+5	; 0x05
    3e52:	0c 81       	ldd	r16, Y+4	; 0x04
    3e54:	1b 81       	ldd	r17, Y+3	; 0x03
    3e56:	aa 81       	ldd	r26, Y+2	; 0x02
    3e58:	b9 81       	ldd	r27, Y+1	; 0x01
    3e5a:	ce 0f       	add	r28, r30
    3e5c:	d1 1d       	adc	r29, r1
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
    3e68:	ed 01       	movw	r28, r26
    3e6a:	08 95       	ret

00003e6c <memcpy>:
    3e6c:	fb 01       	movw	r30, r22
    3e6e:	dc 01       	movw	r26, r24
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <memcpy+0xa>
    3e72:	01 90       	ld	r0, Z+
    3e74:	0d 92       	st	X+, r0
    3e76:	41 50       	subi	r20, 0x01	; 1
    3e78:	50 40       	sbci	r21, 0x00	; 0
    3e7a:	d8 f7       	brcc	.-10     	; 0x3e72 <memcpy+0x6>
    3e7c:	08 95       	ret

00003e7e <strcat>:
    3e7e:	fb 01       	movw	r30, r22
    3e80:	dc 01       	movw	r26, r24
    3e82:	0d 90       	ld	r0, X+
    3e84:	00 20       	and	r0, r0
    3e86:	e9 f7       	brne	.-6      	; 0x3e82 <strcat+0x4>
    3e88:	11 97       	sbiw	r26, 0x01	; 1
    3e8a:	01 90       	ld	r0, Z+
    3e8c:	0d 92       	st	X+, r0
    3e8e:	00 20       	and	r0, r0
    3e90:	e1 f7       	brne	.-8      	; 0x3e8a <strcat+0xc>
    3e92:	08 95       	ret

00003e94 <strcpy>:
    3e94:	fb 01       	movw	r30, r22
    3e96:	dc 01       	movw	r26, r24
    3e98:	01 90       	ld	r0, Z+
    3e9a:	0d 92       	st	X+, r0
    3e9c:	00 20       	and	r0, r0
    3e9e:	e1 f7       	brne	.-8      	; 0x3e98 <strcpy+0x4>
    3ea0:	08 95       	ret

00003ea2 <strlen>:
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	01 90       	ld	r0, Z+
    3ea6:	00 20       	and	r0, r0
    3ea8:	e9 f7       	brne	.-6      	; 0x3ea4 <strlen+0x2>
    3eaa:	80 95       	com	r24
    3eac:	90 95       	com	r25
    3eae:	8e 0f       	add	r24, r30
    3eb0:	9f 1f       	adc	r25, r31
    3eb2:	08 95       	ret

00003eb4 <itoa>:
    3eb4:	fb 01       	movw	r30, r22
    3eb6:	9f 01       	movw	r18, r30
    3eb8:	e8 94       	clt
    3eba:	42 30       	cpi	r20, 0x02	; 2
    3ebc:	c4 f0       	brlt	.+48     	; 0x3eee <itoa+0x3a>
    3ebe:	45 32       	cpi	r20, 0x25	; 37
    3ec0:	b4 f4       	brge	.+44     	; 0x3eee <itoa+0x3a>
    3ec2:	4a 30       	cpi	r20, 0x0A	; 10
    3ec4:	29 f4       	brne	.+10     	; 0x3ed0 <itoa+0x1c>
    3ec6:	97 fb       	bst	r25, 7
    3ec8:	1e f4       	brtc	.+6      	; 0x3ed0 <itoa+0x1c>
    3eca:	90 95       	com	r25
    3ecc:	81 95       	neg	r24
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	64 2f       	mov	r22, r20
    3ed2:	77 27       	eor	r23, r23
    3ed4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3ed8:	80 5d       	subi	r24, 0xD0	; 208
    3eda:	8a 33       	cpi	r24, 0x3A	; 58
    3edc:	0c f0       	brlt	.+2      	; 0x3ee0 <itoa+0x2c>
    3ede:	89 5d       	subi	r24, 0xD9	; 217
    3ee0:	81 93       	st	Z+, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	00 97       	sbiw	r24, 0x00	; 0
    3ee6:	a1 f7       	brne	.-24     	; 0x3ed0 <itoa+0x1c>
    3ee8:	16 f4       	brtc	.+4      	; 0x3eee <itoa+0x3a>
    3eea:	5d e2       	ldi	r21, 0x2D	; 45
    3eec:	51 93       	st	Z+, r21
    3eee:	10 82       	st	Z, r1
    3ef0:	c9 01       	movw	r24, r18
    3ef2:	0c 94 33 22 	jmp	0x4466	; 0x4466 <strrev>

00003ef6 <ltoa>:
    3ef6:	fa 01       	movw	r30, r20
    3ef8:	cf 93       	push	r28
    3efa:	ff 93       	push	r31
    3efc:	ef 93       	push	r30
    3efe:	22 30       	cpi	r18, 0x02	; 2
    3f00:	44 f1       	brlt	.+80     	; 0x3f52 <ltoa+0x5c>
    3f02:	25 32       	cpi	r18, 0x25	; 37
    3f04:	34 f5       	brge	.+76     	; 0x3f52 <ltoa+0x5c>
    3f06:	c2 2f       	mov	r28, r18
    3f08:	e8 94       	clt
    3f0a:	ca 30       	cpi	r28, 0x0A	; 10
    3f0c:	49 f4       	brne	.+18     	; 0x3f20 <ltoa+0x2a>
    3f0e:	97 fb       	bst	r25, 7
    3f10:	3e f4       	brtc	.+14     	; 0x3f20 <ltoa+0x2a>
    3f12:	90 95       	com	r25
    3f14:	80 95       	com	r24
    3f16:	70 95       	com	r23
    3f18:	61 95       	neg	r22
    3f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f20:	2c 2f       	mov	r18, r28
    3f22:	33 27       	eor	r19, r19
    3f24:	44 27       	eor	r20, r20
    3f26:	55 27       	eor	r21, r21
    3f28:	ff 93       	push	r31
    3f2a:	ef 93       	push	r30
    3f2c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__udivmodsi4>
    3f30:	ef 91       	pop	r30
    3f32:	ff 91       	pop	r31
    3f34:	60 5d       	subi	r22, 0xD0	; 208
    3f36:	6a 33       	cpi	r22, 0x3A	; 58
    3f38:	0c f0       	brlt	.+2      	; 0x3f3c <ltoa+0x46>
    3f3a:	69 5d       	subi	r22, 0xD9	; 217
    3f3c:	61 93       	st	Z+, r22
    3f3e:	b9 01       	movw	r22, r18
    3f40:	ca 01       	movw	r24, r20
    3f42:	60 50       	subi	r22, 0x00	; 0
    3f44:	70 40       	sbci	r23, 0x00	; 0
    3f46:	80 40       	sbci	r24, 0x00	; 0
    3f48:	90 40       	sbci	r25, 0x00	; 0
    3f4a:	51 f7       	brne	.-44     	; 0x3f20 <ltoa+0x2a>
    3f4c:	16 f4       	brtc	.+4      	; 0x3f52 <ltoa+0x5c>
    3f4e:	cd e2       	ldi	r28, 0x2D	; 45
    3f50:	c1 93       	st	Z+, r28
    3f52:	10 82       	st	Z, r1
    3f54:	8f 91       	pop	r24
    3f56:	9f 91       	pop	r25
    3f58:	cf 91       	pop	r28
    3f5a:	0c 94 33 22 	jmp	0x4466	; 0x4466 <strrev>

00003f5e <sprintf>:
    3f5e:	ae e0       	ldi	r26, 0x0E	; 14
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e5 eb       	ldi	r30, 0xB5	; 181
    3f64:	ff e1       	ldi	r31, 0x1F	; 31
    3f66:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__prologue_saves__+0x1c>
    3f6a:	0d 89       	ldd	r16, Y+21	; 0x15
    3f6c:	1e 89       	ldd	r17, Y+22	; 0x16
    3f6e:	86 e0       	ldi	r24, 0x06	; 6
    3f70:	8c 83       	std	Y+4, r24	; 0x04
    3f72:	1a 83       	std	Y+2, r17	; 0x02
    3f74:	09 83       	std	Y+1, r16	; 0x01
    3f76:	8f ef       	ldi	r24, 0xFF	; 255
    3f78:	9f e7       	ldi	r25, 0x7F	; 127
    3f7a:	9e 83       	std	Y+6, r25	; 0x06
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
    3f7e:	9e 01       	movw	r18, r28
    3f80:	27 5e       	subi	r18, 0xE7	; 231
    3f82:	3f 4f       	sbci	r19, 0xFF	; 255
    3f84:	ce 01       	movw	r24, r28
    3f86:	01 96       	adiw	r24, 0x01	; 1
    3f88:	6f 89       	ldd	r22, Y+23	; 0x17
    3f8a:	78 8d       	ldd	r23, Y+24	; 0x18
    3f8c:	a9 01       	movw	r20, r18
    3f8e:	0e 94 40 20 	call	0x4080	; 0x4080 <vfprintf>
    3f92:	2f 81       	ldd	r18, Y+7	; 0x07
    3f94:	38 85       	ldd	r19, Y+8	; 0x08
    3f96:	02 0f       	add	r16, r18
    3f98:	13 1f       	adc	r17, r19
    3f9a:	f8 01       	movw	r30, r16
    3f9c:	10 82       	st	Z, r1
    3f9e:	2e 96       	adiw	r28, 0x0e	; 14
    3fa0:	e4 e0       	ldi	r30, 0x04	; 4
    3fa2:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__epilogue_restores__+0x1c>

00003fa6 <ceil>:
    3fa6:	4e d0       	rcall	.+156    	; 0x4044 <__fp_trunc>
    3fa8:	80 f0       	brcs	.+32     	; 0x3fca <ceil+0x24>
    3faa:	9f 37       	cpi	r25, 0x7F	; 127
    3fac:	40 f4       	brcc	.+16     	; 0x3fbe <ceil+0x18>
    3fae:	91 11       	cpse	r25, r1
    3fb0:	0e f4       	brtc	.+2      	; 0x3fb4 <ceil+0xe>
    3fb2:	60 c0       	rjmp	.+192    	; 0x4074 <__fp_szero>
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	70 e0       	ldi	r23, 0x00	; 0
    3fb8:	80 e8       	ldi	r24, 0x80	; 128
    3fba:	9f e3       	ldi	r25, 0x3F	; 63
    3fbc:	08 95       	ret
    3fbe:	26 f0       	brts	.+8      	; 0x3fc8 <ceil+0x22>
    3fc0:	1b 16       	cp	r1, r27
    3fc2:	61 1d       	adc	r22, r1
    3fc4:	71 1d       	adc	r23, r1
    3fc6:	81 1d       	adc	r24, r1
    3fc8:	14 c0       	rjmp	.+40     	; 0x3ff2 <__fp_mintl>
    3fca:	2e c0       	rjmp	.+92     	; 0x4028 <__fp_mpack>

00003fcc <floor>:
    3fcc:	3b d0       	rcall	.+118    	; 0x4044 <__fp_trunc>
    3fce:	80 f0       	brcs	.+32     	; 0x3ff0 <floor+0x24>
    3fd0:	9f 37       	cpi	r25, 0x7F	; 127
    3fd2:	40 f4       	brcc	.+16     	; 0x3fe4 <floor+0x18>
    3fd4:	91 11       	cpse	r25, r1
    3fd6:	0e f0       	brts	.+2      	; 0x3fda <floor+0xe>
    3fd8:	4d c0       	rjmp	.+154    	; 0x4074 <__fp_szero>
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	70 e0       	ldi	r23, 0x00	; 0
    3fde:	80 e8       	ldi	r24, 0x80	; 128
    3fe0:	9f eb       	ldi	r25, 0xBF	; 191
    3fe2:	08 95       	ret
    3fe4:	26 f4       	brtc	.+8      	; 0x3fee <floor+0x22>
    3fe6:	1b 16       	cp	r1, r27
    3fe8:	61 1d       	adc	r22, r1
    3fea:	71 1d       	adc	r23, r1
    3fec:	81 1d       	adc	r24, r1
    3fee:	01 c0       	rjmp	.+2      	; 0x3ff2 <__fp_mintl>
    3ff0:	1b c0       	rjmp	.+54     	; 0x4028 <__fp_mpack>

00003ff2 <__fp_mintl>:
    3ff2:	88 23       	and	r24, r24
    3ff4:	71 f4       	brne	.+28     	; 0x4012 <__fp_mintl+0x20>
    3ff6:	77 23       	and	r23, r23
    3ff8:	21 f0       	breq	.+8      	; 0x4002 <__fp_mintl+0x10>
    3ffa:	98 50       	subi	r25, 0x08	; 8
    3ffc:	87 2b       	or	r24, r23
    3ffe:	76 2f       	mov	r23, r22
    4000:	07 c0       	rjmp	.+14     	; 0x4010 <__fp_mintl+0x1e>
    4002:	66 23       	and	r22, r22
    4004:	11 f4       	brne	.+4      	; 0x400a <__fp_mintl+0x18>
    4006:	99 27       	eor	r25, r25
    4008:	0d c0       	rjmp	.+26     	; 0x4024 <__fp_mintl+0x32>
    400a:	90 51       	subi	r25, 0x10	; 16
    400c:	86 2b       	or	r24, r22
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	2a f0       	brmi	.+10     	; 0x401e <__fp_mintl+0x2c>
    4014:	9a 95       	dec	r25
    4016:	66 0f       	add	r22, r22
    4018:	77 1f       	adc	r23, r23
    401a:	88 1f       	adc	r24, r24
    401c:	da f7       	brpl	.-10     	; 0x4014 <__fp_mintl+0x22>
    401e:	88 0f       	add	r24, r24
    4020:	96 95       	lsr	r25
    4022:	87 95       	ror	r24
    4024:	97 f9       	bld	r25, 7
    4026:	08 95       	ret

00004028 <__fp_mpack>:
    4028:	9f 3f       	cpi	r25, 0xFF	; 255
    402a:	31 f0       	breq	.+12     	; 0x4038 <__fp_mpack_finite+0xc>

0000402c <__fp_mpack_finite>:
    402c:	91 50       	subi	r25, 0x01	; 1
    402e:	20 f4       	brcc	.+8      	; 0x4038 <__fp_mpack_finite+0xc>
    4030:	87 95       	ror	r24
    4032:	77 95       	ror	r23
    4034:	67 95       	ror	r22
    4036:	b7 95       	ror	r27
    4038:	88 0f       	add	r24, r24
    403a:	91 1d       	adc	r25, r1
    403c:	96 95       	lsr	r25
    403e:	87 95       	ror	r24
    4040:	97 f9       	bld	r25, 7
    4042:	08 95       	ret

00004044 <__fp_trunc>:
    4044:	b2 d2       	rcall	.+1380   	; 0x45aa <__fp_splitA>
    4046:	a0 f0       	brcs	.+40     	; 0x4070 <__fp_trunc+0x2c>
    4048:	be e7       	ldi	r27, 0x7E	; 126
    404a:	b9 17       	cp	r27, r25
    404c:	88 f4       	brcc	.+34     	; 0x4070 <__fp_trunc+0x2c>
    404e:	bb 27       	eor	r27, r27
    4050:	9f 38       	cpi	r25, 0x8F	; 143
    4052:	60 f4       	brcc	.+24     	; 0x406c <__fp_trunc+0x28>
    4054:	16 16       	cp	r1, r22
    4056:	b1 1d       	adc	r27, r1
    4058:	67 2f       	mov	r22, r23
    405a:	78 2f       	mov	r23, r24
    405c:	88 27       	eor	r24, r24
    405e:	98 5f       	subi	r25, 0xF8	; 248
    4060:	f7 cf       	rjmp	.-18     	; 0x4050 <__fp_trunc+0xc>
    4062:	86 95       	lsr	r24
    4064:	77 95       	ror	r23
    4066:	67 95       	ror	r22
    4068:	b1 1d       	adc	r27, r1
    406a:	93 95       	inc	r25
    406c:	96 39       	cpi	r25, 0x96	; 150
    406e:	c8 f3       	brcs	.-14     	; 0x4062 <__fp_trunc+0x1e>
    4070:	08 95       	ret

00004072 <__fp_zero>:
    4072:	e8 94       	clt

00004074 <__fp_szero>:
    4074:	bb 27       	eor	r27, r27
    4076:	66 27       	eor	r22, r22
    4078:	77 27       	eor	r23, r23
    407a:	cb 01       	movw	r24, r22
    407c:	97 f9       	bld	r25, 7
    407e:	08 95       	ret

00004080 <vfprintf>:
    4080:	ab e0       	ldi	r26, 0x0B	; 11
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	e6 e4       	ldi	r30, 0x46	; 70
    4086:	f0 e2       	ldi	r31, 0x20	; 32
    4088:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__prologue_saves__>
    408c:	3c 01       	movw	r6, r24
    408e:	2b 01       	movw	r4, r22
    4090:	5a 01       	movw	r10, r20
    4092:	fc 01       	movw	r30, r24
    4094:	17 82       	std	Z+7, r1	; 0x07
    4096:	16 82       	std	Z+6, r1	; 0x06
    4098:	83 81       	ldd	r24, Z+3	; 0x03
    409a:	81 fd       	sbrc	r24, 1
    409c:	03 c0       	rjmp	.+6      	; 0x40a4 <vfprintf+0x24>
    409e:	6f ef       	ldi	r22, 0xFF	; 255
    40a0:	7f ef       	ldi	r23, 0xFF	; 255
    40a2:	c6 c1       	rjmp	.+908    	; 0x4430 <vfprintf+0x3b0>
    40a4:	9a e0       	ldi	r25, 0x0A	; 10
    40a6:	89 2e       	mov	r8, r25
    40a8:	1e 01       	movw	r2, r28
    40aa:	08 94       	sec
    40ac:	21 1c       	adc	r2, r1
    40ae:	31 1c       	adc	r3, r1
    40b0:	f3 01       	movw	r30, r6
    40b2:	23 81       	ldd	r18, Z+3	; 0x03
    40b4:	f2 01       	movw	r30, r4
    40b6:	23 fd       	sbrc	r18, 3
    40b8:	85 91       	lpm	r24, Z+
    40ba:	23 ff       	sbrs	r18, 3
    40bc:	81 91       	ld	r24, Z+
    40be:	2f 01       	movw	r4, r30
    40c0:	88 23       	and	r24, r24
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <vfprintf+0x46>
    40c4:	b2 c1       	rjmp	.+868    	; 0x442a <vfprintf+0x3aa>
    40c6:	85 32       	cpi	r24, 0x25	; 37
    40c8:	39 f4       	brne	.+14     	; 0x40d8 <vfprintf+0x58>
    40ca:	23 fd       	sbrc	r18, 3
    40cc:	85 91       	lpm	r24, Z+
    40ce:	23 ff       	sbrs	r18, 3
    40d0:	81 91       	ld	r24, Z+
    40d2:	2f 01       	movw	r4, r30
    40d4:	85 32       	cpi	r24, 0x25	; 37
    40d6:	29 f4       	brne	.+10     	; 0x40e2 <vfprintf+0x62>
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	b3 01       	movw	r22, r6
    40dc:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    40e0:	e7 cf       	rjmp	.-50     	; 0x40b0 <vfprintf+0x30>
    40e2:	98 2f       	mov	r25, r24
    40e4:	ff 24       	eor	r15, r15
    40e6:	ee 24       	eor	r14, r14
    40e8:	99 24       	eor	r9, r9
    40ea:	ff e1       	ldi	r31, 0x1F	; 31
    40ec:	ff 15       	cp	r31, r15
    40ee:	d0 f0       	brcs	.+52     	; 0x4124 <vfprintf+0xa4>
    40f0:	9b 32       	cpi	r25, 0x2B	; 43
    40f2:	69 f0       	breq	.+26     	; 0x410e <vfprintf+0x8e>
    40f4:	9c 32       	cpi	r25, 0x2C	; 44
    40f6:	28 f4       	brcc	.+10     	; 0x4102 <vfprintf+0x82>
    40f8:	90 32       	cpi	r25, 0x20	; 32
    40fa:	59 f0       	breq	.+22     	; 0x4112 <vfprintf+0x92>
    40fc:	93 32       	cpi	r25, 0x23	; 35
    40fe:	91 f4       	brne	.+36     	; 0x4124 <vfprintf+0xa4>
    4100:	0e c0       	rjmp	.+28     	; 0x411e <vfprintf+0x9e>
    4102:	9d 32       	cpi	r25, 0x2D	; 45
    4104:	49 f0       	breq	.+18     	; 0x4118 <vfprintf+0x98>
    4106:	90 33       	cpi	r25, 0x30	; 48
    4108:	69 f4       	brne	.+26     	; 0x4124 <vfprintf+0xa4>
    410a:	41 e0       	ldi	r20, 0x01	; 1
    410c:	24 c0       	rjmp	.+72     	; 0x4156 <vfprintf+0xd6>
    410e:	52 e0       	ldi	r21, 0x02	; 2
    4110:	f5 2a       	or	r15, r21
    4112:	84 e0       	ldi	r24, 0x04	; 4
    4114:	f8 2a       	or	r15, r24
    4116:	28 c0       	rjmp	.+80     	; 0x4168 <vfprintf+0xe8>
    4118:	98 e0       	ldi	r25, 0x08	; 8
    411a:	f9 2a       	or	r15, r25
    411c:	25 c0       	rjmp	.+74     	; 0x4168 <vfprintf+0xe8>
    411e:	e0 e1       	ldi	r30, 0x10	; 16
    4120:	fe 2a       	or	r15, r30
    4122:	22 c0       	rjmp	.+68     	; 0x4168 <vfprintf+0xe8>
    4124:	f7 fc       	sbrc	r15, 7
    4126:	29 c0       	rjmp	.+82     	; 0x417a <vfprintf+0xfa>
    4128:	89 2f       	mov	r24, r25
    412a:	80 53       	subi	r24, 0x30	; 48
    412c:	8a 30       	cpi	r24, 0x0A	; 10
    412e:	70 f4       	brcc	.+28     	; 0x414c <vfprintf+0xcc>
    4130:	f6 fe       	sbrs	r15, 6
    4132:	05 c0       	rjmp	.+10     	; 0x413e <vfprintf+0xbe>
    4134:	98 9c       	mul	r9, r8
    4136:	90 2c       	mov	r9, r0
    4138:	11 24       	eor	r1, r1
    413a:	98 0e       	add	r9, r24
    413c:	15 c0       	rjmp	.+42     	; 0x4168 <vfprintf+0xe8>
    413e:	e8 9c       	mul	r14, r8
    4140:	e0 2c       	mov	r14, r0
    4142:	11 24       	eor	r1, r1
    4144:	e8 0e       	add	r14, r24
    4146:	f0 e2       	ldi	r31, 0x20	; 32
    4148:	ff 2a       	or	r15, r31
    414a:	0e c0       	rjmp	.+28     	; 0x4168 <vfprintf+0xe8>
    414c:	9e 32       	cpi	r25, 0x2E	; 46
    414e:	29 f4       	brne	.+10     	; 0x415a <vfprintf+0xda>
    4150:	f6 fc       	sbrc	r15, 6
    4152:	6b c1       	rjmp	.+726    	; 0x442a <vfprintf+0x3aa>
    4154:	40 e4       	ldi	r20, 0x40	; 64
    4156:	f4 2a       	or	r15, r20
    4158:	07 c0       	rjmp	.+14     	; 0x4168 <vfprintf+0xe8>
    415a:	9c 36       	cpi	r25, 0x6C	; 108
    415c:	19 f4       	brne	.+6      	; 0x4164 <vfprintf+0xe4>
    415e:	50 e8       	ldi	r21, 0x80	; 128
    4160:	f5 2a       	or	r15, r21
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <vfprintf+0xe8>
    4164:	98 36       	cpi	r25, 0x68	; 104
    4166:	49 f4       	brne	.+18     	; 0x417a <vfprintf+0xfa>
    4168:	f2 01       	movw	r30, r4
    416a:	23 fd       	sbrc	r18, 3
    416c:	95 91       	lpm	r25, Z+
    416e:	23 ff       	sbrs	r18, 3
    4170:	91 91       	ld	r25, Z+
    4172:	2f 01       	movw	r4, r30
    4174:	99 23       	and	r25, r25
    4176:	09 f0       	breq	.+2      	; 0x417a <vfprintf+0xfa>
    4178:	b8 cf       	rjmp	.-144    	; 0x40ea <vfprintf+0x6a>
    417a:	89 2f       	mov	r24, r25
    417c:	85 54       	subi	r24, 0x45	; 69
    417e:	83 30       	cpi	r24, 0x03	; 3
    4180:	18 f0       	brcs	.+6      	; 0x4188 <vfprintf+0x108>
    4182:	80 52       	subi	r24, 0x20	; 32
    4184:	83 30       	cpi	r24, 0x03	; 3
    4186:	38 f4       	brcc	.+14     	; 0x4196 <vfprintf+0x116>
    4188:	44 e0       	ldi	r20, 0x04	; 4
    418a:	50 e0       	ldi	r21, 0x00	; 0
    418c:	a4 0e       	add	r10, r20
    418e:	b5 1e       	adc	r11, r21
    4190:	5f e3       	ldi	r21, 0x3F	; 63
    4192:	59 83       	std	Y+1, r21	; 0x01
    4194:	0f c0       	rjmp	.+30     	; 0x41b4 <vfprintf+0x134>
    4196:	93 36       	cpi	r25, 0x63	; 99
    4198:	31 f0       	breq	.+12     	; 0x41a6 <vfprintf+0x126>
    419a:	93 37       	cpi	r25, 0x73	; 115
    419c:	79 f0       	breq	.+30     	; 0x41bc <vfprintf+0x13c>
    419e:	93 35       	cpi	r25, 0x53	; 83
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <vfprintf+0x124>
    41a2:	56 c0       	rjmp	.+172    	; 0x4250 <vfprintf+0x1d0>
    41a4:	20 c0       	rjmp	.+64     	; 0x41e6 <vfprintf+0x166>
    41a6:	f5 01       	movw	r30, r10
    41a8:	80 81       	ld	r24, Z
    41aa:	89 83       	std	Y+1, r24	; 0x01
    41ac:	42 e0       	ldi	r20, 0x02	; 2
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	a4 0e       	add	r10, r20
    41b2:	b5 1e       	adc	r11, r21
    41b4:	61 01       	movw	r12, r2
    41b6:	01 e0       	ldi	r16, 0x01	; 1
    41b8:	10 e0       	ldi	r17, 0x00	; 0
    41ba:	12 c0       	rjmp	.+36     	; 0x41e0 <vfprintf+0x160>
    41bc:	f5 01       	movw	r30, r10
    41be:	c0 80       	ld	r12, Z
    41c0:	d1 80       	ldd	r13, Z+1	; 0x01
    41c2:	f6 fc       	sbrc	r15, 6
    41c4:	03 c0       	rjmp	.+6      	; 0x41cc <vfprintf+0x14c>
    41c6:	6f ef       	ldi	r22, 0xFF	; 255
    41c8:	7f ef       	ldi	r23, 0xFF	; 255
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <vfprintf+0x150>
    41cc:	69 2d       	mov	r22, r9
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	42 e0       	ldi	r20, 0x02	; 2
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	a4 0e       	add	r10, r20
    41d6:	b5 1e       	adc	r11, r21
    41d8:	c6 01       	movw	r24, r12
    41da:	0e 94 28 22 	call	0x4450	; 0x4450 <strnlen>
    41de:	8c 01       	movw	r16, r24
    41e0:	5f e7       	ldi	r21, 0x7F	; 127
    41e2:	f5 22       	and	r15, r21
    41e4:	14 c0       	rjmp	.+40     	; 0x420e <vfprintf+0x18e>
    41e6:	f5 01       	movw	r30, r10
    41e8:	c0 80       	ld	r12, Z
    41ea:	d1 80       	ldd	r13, Z+1	; 0x01
    41ec:	f6 fc       	sbrc	r15, 6
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <vfprintf+0x176>
    41f0:	6f ef       	ldi	r22, 0xFF	; 255
    41f2:	7f ef       	ldi	r23, 0xFF	; 255
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <vfprintf+0x17a>
    41f6:	69 2d       	mov	r22, r9
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	42 e0       	ldi	r20, 0x02	; 2
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	a4 0e       	add	r10, r20
    4200:	b5 1e       	adc	r11, r21
    4202:	c6 01       	movw	r24, r12
    4204:	0e 94 1d 22 	call	0x443a	; 0x443a <strnlen_P>
    4208:	8c 01       	movw	r16, r24
    420a:	50 e8       	ldi	r21, 0x80	; 128
    420c:	f5 2a       	or	r15, r21
    420e:	f3 fe       	sbrs	r15, 3
    4210:	07 c0       	rjmp	.+14     	; 0x4220 <vfprintf+0x1a0>
    4212:	1a c0       	rjmp	.+52     	; 0x4248 <vfprintf+0x1c8>
    4214:	80 e2       	ldi	r24, 0x20	; 32
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	b3 01       	movw	r22, r6
    421a:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    421e:	ea 94       	dec	r14
    4220:	8e 2d       	mov	r24, r14
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	08 17       	cp	r16, r24
    4226:	19 07       	cpc	r17, r25
    4228:	a8 f3       	brcs	.-22     	; 0x4214 <vfprintf+0x194>
    422a:	0e c0       	rjmp	.+28     	; 0x4248 <vfprintf+0x1c8>
    422c:	f6 01       	movw	r30, r12
    422e:	f7 fc       	sbrc	r15, 7
    4230:	85 91       	lpm	r24, Z+
    4232:	f7 fe       	sbrs	r15, 7
    4234:	81 91       	ld	r24, Z+
    4236:	6f 01       	movw	r12, r30
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	b3 01       	movw	r22, r6
    423c:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    4240:	e1 10       	cpse	r14, r1
    4242:	ea 94       	dec	r14
    4244:	01 50       	subi	r16, 0x01	; 1
    4246:	10 40       	sbci	r17, 0x00	; 0
    4248:	01 15       	cp	r16, r1
    424a:	11 05       	cpc	r17, r1
    424c:	79 f7       	brne	.-34     	; 0x422c <vfprintf+0x1ac>
    424e:	ea c0       	rjmp	.+468    	; 0x4424 <vfprintf+0x3a4>
    4250:	94 36       	cpi	r25, 0x64	; 100
    4252:	11 f0       	breq	.+4      	; 0x4258 <vfprintf+0x1d8>
    4254:	99 36       	cpi	r25, 0x69	; 105
    4256:	69 f5       	brne	.+90     	; 0x42b2 <vfprintf+0x232>
    4258:	f7 fe       	sbrs	r15, 7
    425a:	08 c0       	rjmp	.+16     	; 0x426c <vfprintf+0x1ec>
    425c:	f5 01       	movw	r30, r10
    425e:	20 81       	ld	r18, Z
    4260:	31 81       	ldd	r19, Z+1	; 0x01
    4262:	42 81       	ldd	r20, Z+2	; 0x02
    4264:	53 81       	ldd	r21, Z+3	; 0x03
    4266:	84 e0       	ldi	r24, 0x04	; 4
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0a c0       	rjmp	.+20     	; 0x4280 <vfprintf+0x200>
    426c:	f5 01       	movw	r30, r10
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	9c 01       	movw	r18, r24
    4274:	44 27       	eor	r20, r20
    4276:	37 fd       	sbrc	r19, 7
    4278:	40 95       	com	r20
    427a:	54 2f       	mov	r21, r20
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	a8 0e       	add	r10, r24
    4282:	b9 1e       	adc	r11, r25
    4284:	9f e6       	ldi	r25, 0x6F	; 111
    4286:	f9 22       	and	r15, r25
    4288:	57 ff       	sbrs	r21, 7
    428a:	09 c0       	rjmp	.+18     	; 0x429e <vfprintf+0x21e>
    428c:	50 95       	com	r21
    428e:	40 95       	com	r20
    4290:	30 95       	com	r19
    4292:	21 95       	neg	r18
    4294:	3f 4f       	sbci	r19, 0xFF	; 255
    4296:	4f 4f       	sbci	r20, 0xFF	; 255
    4298:	5f 4f       	sbci	r21, 0xFF	; 255
    429a:	e0 e8       	ldi	r30, 0x80	; 128
    429c:	fe 2a       	or	r15, r30
    429e:	ca 01       	movw	r24, r20
    42a0:	b9 01       	movw	r22, r18
    42a2:	a1 01       	movw	r20, r2
    42a4:	2a e0       	ldi	r18, 0x0A	; 10
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	0e 94 6f 22 	call	0x44de	; 0x44de <__ultoa_invert>
    42ac:	d8 2e       	mov	r13, r24
    42ae:	d2 18       	sub	r13, r2
    42b0:	40 c0       	rjmp	.+128    	; 0x4332 <vfprintf+0x2b2>
    42b2:	95 37       	cpi	r25, 0x75	; 117
    42b4:	29 f4       	brne	.+10     	; 0x42c0 <vfprintf+0x240>
    42b6:	1f 2d       	mov	r17, r15
    42b8:	1f 7e       	andi	r17, 0xEF	; 239
    42ba:	2a e0       	ldi	r18, 0x0A	; 10
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	1d c0       	rjmp	.+58     	; 0x42fa <vfprintf+0x27a>
    42c0:	1f 2d       	mov	r17, r15
    42c2:	19 7f       	andi	r17, 0xF9	; 249
    42c4:	9f 36       	cpi	r25, 0x6F	; 111
    42c6:	61 f0       	breq	.+24     	; 0x42e0 <vfprintf+0x260>
    42c8:	90 37       	cpi	r25, 0x70	; 112
    42ca:	20 f4       	brcc	.+8      	; 0x42d4 <vfprintf+0x254>
    42cc:	98 35       	cpi	r25, 0x58	; 88
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <vfprintf+0x252>
    42d0:	ac c0       	rjmp	.+344    	; 0x442a <vfprintf+0x3aa>
    42d2:	0f c0       	rjmp	.+30     	; 0x42f2 <vfprintf+0x272>
    42d4:	90 37       	cpi	r25, 0x70	; 112
    42d6:	39 f0       	breq	.+14     	; 0x42e6 <vfprintf+0x266>
    42d8:	98 37       	cpi	r25, 0x78	; 120
    42da:	09 f0       	breq	.+2      	; 0x42de <vfprintf+0x25e>
    42dc:	a6 c0       	rjmp	.+332    	; 0x442a <vfprintf+0x3aa>
    42de:	04 c0       	rjmp	.+8      	; 0x42e8 <vfprintf+0x268>
    42e0:	28 e0       	ldi	r18, 0x08	; 8
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	0a c0       	rjmp	.+20     	; 0x42fa <vfprintf+0x27a>
    42e6:	10 61       	ori	r17, 0x10	; 16
    42e8:	14 fd       	sbrc	r17, 4
    42ea:	14 60       	ori	r17, 0x04	; 4
    42ec:	20 e1       	ldi	r18, 0x10	; 16
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	04 c0       	rjmp	.+8      	; 0x42fa <vfprintf+0x27a>
    42f2:	14 fd       	sbrc	r17, 4
    42f4:	16 60       	ori	r17, 0x06	; 6
    42f6:	20 e1       	ldi	r18, 0x10	; 16
    42f8:	32 e0       	ldi	r19, 0x02	; 2
    42fa:	17 ff       	sbrs	r17, 7
    42fc:	08 c0       	rjmp	.+16     	; 0x430e <vfprintf+0x28e>
    42fe:	f5 01       	movw	r30, r10
    4300:	60 81       	ld	r22, Z
    4302:	71 81       	ldd	r23, Z+1	; 0x01
    4304:	82 81       	ldd	r24, Z+2	; 0x02
    4306:	93 81       	ldd	r25, Z+3	; 0x03
    4308:	44 e0       	ldi	r20, 0x04	; 4
    430a:	50 e0       	ldi	r21, 0x00	; 0
    430c:	08 c0       	rjmp	.+16     	; 0x431e <vfprintf+0x29e>
    430e:	f5 01       	movw	r30, r10
    4310:	80 81       	ld	r24, Z
    4312:	91 81       	ldd	r25, Z+1	; 0x01
    4314:	bc 01       	movw	r22, r24
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	42 e0       	ldi	r20, 0x02	; 2
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	a4 0e       	add	r10, r20
    4320:	b5 1e       	adc	r11, r21
    4322:	a1 01       	movw	r20, r2
    4324:	0e 94 6f 22 	call	0x44de	; 0x44de <__ultoa_invert>
    4328:	d8 2e       	mov	r13, r24
    432a:	d2 18       	sub	r13, r2
    432c:	8f e7       	ldi	r24, 0x7F	; 127
    432e:	f8 2e       	mov	r15, r24
    4330:	f1 22       	and	r15, r17
    4332:	f6 fe       	sbrs	r15, 6
    4334:	0b c0       	rjmp	.+22     	; 0x434c <vfprintf+0x2cc>
    4336:	5e ef       	ldi	r21, 0xFE	; 254
    4338:	f5 22       	and	r15, r21
    433a:	d9 14       	cp	r13, r9
    433c:	38 f4       	brcc	.+14     	; 0x434c <vfprintf+0x2cc>
    433e:	f4 fe       	sbrs	r15, 4
    4340:	07 c0       	rjmp	.+14     	; 0x4350 <vfprintf+0x2d0>
    4342:	f2 fc       	sbrc	r15, 2
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <vfprintf+0x2d0>
    4346:	8f ee       	ldi	r24, 0xEF	; 239
    4348:	f8 22       	and	r15, r24
    434a:	02 c0       	rjmp	.+4      	; 0x4350 <vfprintf+0x2d0>
    434c:	1d 2d       	mov	r17, r13
    434e:	01 c0       	rjmp	.+2      	; 0x4352 <vfprintf+0x2d2>
    4350:	19 2d       	mov	r17, r9
    4352:	f4 fe       	sbrs	r15, 4
    4354:	0d c0       	rjmp	.+26     	; 0x4370 <vfprintf+0x2f0>
    4356:	fe 01       	movw	r30, r28
    4358:	ed 0d       	add	r30, r13
    435a:	f1 1d       	adc	r31, r1
    435c:	80 81       	ld	r24, Z
    435e:	80 33       	cpi	r24, 0x30	; 48
    4360:	19 f4       	brne	.+6      	; 0x4368 <vfprintf+0x2e8>
    4362:	99 ee       	ldi	r25, 0xE9	; 233
    4364:	f9 22       	and	r15, r25
    4366:	08 c0       	rjmp	.+16     	; 0x4378 <vfprintf+0x2f8>
    4368:	1f 5f       	subi	r17, 0xFF	; 255
    436a:	f2 fe       	sbrs	r15, 2
    436c:	05 c0       	rjmp	.+10     	; 0x4378 <vfprintf+0x2f8>
    436e:	03 c0       	rjmp	.+6      	; 0x4376 <vfprintf+0x2f6>
    4370:	8f 2d       	mov	r24, r15
    4372:	86 78       	andi	r24, 0x86	; 134
    4374:	09 f0       	breq	.+2      	; 0x4378 <vfprintf+0x2f8>
    4376:	1f 5f       	subi	r17, 0xFF	; 255
    4378:	0f 2d       	mov	r16, r15
    437a:	f3 fc       	sbrc	r15, 3
    437c:	14 c0       	rjmp	.+40     	; 0x43a6 <vfprintf+0x326>
    437e:	f0 fe       	sbrs	r15, 0
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <vfprintf+0x320>
    4382:	1e 15       	cp	r17, r14
    4384:	10 f0       	brcs	.+4      	; 0x438a <vfprintf+0x30a>
    4386:	9d 2c       	mov	r9, r13
    4388:	0b c0       	rjmp	.+22     	; 0x43a0 <vfprintf+0x320>
    438a:	9d 2c       	mov	r9, r13
    438c:	9e 0c       	add	r9, r14
    438e:	91 1a       	sub	r9, r17
    4390:	1e 2d       	mov	r17, r14
    4392:	06 c0       	rjmp	.+12     	; 0x43a0 <vfprintf+0x320>
    4394:	80 e2       	ldi	r24, 0x20	; 32
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	b3 01       	movw	r22, r6
    439a:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    439e:	1f 5f       	subi	r17, 0xFF	; 255
    43a0:	1e 15       	cp	r17, r14
    43a2:	c0 f3       	brcs	.-16     	; 0x4394 <vfprintf+0x314>
    43a4:	04 c0       	rjmp	.+8      	; 0x43ae <vfprintf+0x32e>
    43a6:	1e 15       	cp	r17, r14
    43a8:	10 f4       	brcc	.+4      	; 0x43ae <vfprintf+0x32e>
    43aa:	e1 1a       	sub	r14, r17
    43ac:	01 c0       	rjmp	.+2      	; 0x43b0 <vfprintf+0x330>
    43ae:	ee 24       	eor	r14, r14
    43b0:	04 ff       	sbrs	r16, 4
    43b2:	0f c0       	rjmp	.+30     	; 0x43d2 <vfprintf+0x352>
    43b4:	80 e3       	ldi	r24, 0x30	; 48
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	b3 01       	movw	r22, r6
    43ba:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    43be:	02 ff       	sbrs	r16, 2
    43c0:	1d c0       	rjmp	.+58     	; 0x43fc <vfprintf+0x37c>
    43c2:	01 fd       	sbrc	r16, 1
    43c4:	03 c0       	rjmp	.+6      	; 0x43cc <vfprintf+0x34c>
    43c6:	88 e7       	ldi	r24, 0x78	; 120
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e c0       	rjmp	.+28     	; 0x43e8 <vfprintf+0x368>
    43cc:	88 e5       	ldi	r24, 0x58	; 88
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	0b c0       	rjmp	.+22     	; 0x43e8 <vfprintf+0x368>
    43d2:	80 2f       	mov	r24, r16
    43d4:	86 78       	andi	r24, 0x86	; 134
    43d6:	91 f0       	breq	.+36     	; 0x43fc <vfprintf+0x37c>
    43d8:	01 ff       	sbrs	r16, 1
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <vfprintf+0x360>
    43dc:	8b e2       	ldi	r24, 0x2B	; 43
    43de:	01 c0       	rjmp	.+2      	; 0x43e2 <vfprintf+0x362>
    43e0:	80 e2       	ldi	r24, 0x20	; 32
    43e2:	f7 fc       	sbrc	r15, 7
    43e4:	8d e2       	ldi	r24, 0x2D	; 45
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	b3 01       	movw	r22, r6
    43ea:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    43ee:	06 c0       	rjmp	.+12     	; 0x43fc <vfprintf+0x37c>
    43f0:	80 e3       	ldi	r24, 0x30	; 48
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	b3 01       	movw	r22, r6
    43f6:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    43fa:	9a 94       	dec	r9
    43fc:	d9 14       	cp	r13, r9
    43fe:	c0 f3       	brcs	.-16     	; 0x43f0 <vfprintf+0x370>
    4400:	da 94       	dec	r13
    4402:	f1 01       	movw	r30, r2
    4404:	ed 0d       	add	r30, r13
    4406:	f1 1d       	adc	r31, r1
    4408:	80 81       	ld	r24, Z
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	b3 01       	movw	r22, r6
    440e:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    4412:	dd 20       	and	r13, r13
    4414:	a9 f7       	brne	.-22     	; 0x4400 <vfprintf+0x380>
    4416:	06 c0       	rjmp	.+12     	; 0x4424 <vfprintf+0x3a4>
    4418:	80 e2       	ldi	r24, 0x20	; 32
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	b3 01       	movw	r22, r6
    441e:	0e 94 43 22 	call	0x4486	; 0x4486 <fputc>
    4422:	ea 94       	dec	r14
    4424:	ee 20       	and	r14, r14
    4426:	c1 f7       	brne	.-16     	; 0x4418 <vfprintf+0x398>
    4428:	43 ce       	rjmp	.-890    	; 0x40b0 <vfprintf+0x30>
    442a:	f3 01       	movw	r30, r6
    442c:	66 81       	ldd	r22, Z+6	; 0x06
    442e:	77 81       	ldd	r23, Z+7	; 0x07
    4430:	cb 01       	movw	r24, r22
    4432:	2b 96       	adiw	r28, 0x0b	; 11
    4434:	e2 e1       	ldi	r30, 0x12	; 18
    4436:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__epilogue_restores__>

0000443a <strnlen_P>:
    443a:	fc 01       	movw	r30, r24
    443c:	05 90       	lpm	r0, Z+
    443e:	61 50       	subi	r22, 0x01	; 1
    4440:	70 40       	sbci	r23, 0x00	; 0
    4442:	01 10       	cpse	r0, r1
    4444:	d8 f7       	brcc	.-10     	; 0x443c <strnlen_P+0x2>
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	8e 0f       	add	r24, r30
    444c:	9f 1f       	adc	r25, r31
    444e:	08 95       	ret

00004450 <strnlen>:
    4450:	fc 01       	movw	r30, r24
    4452:	61 50       	subi	r22, 0x01	; 1
    4454:	70 40       	sbci	r23, 0x00	; 0
    4456:	01 90       	ld	r0, Z+
    4458:	01 10       	cpse	r0, r1
    445a:	d8 f7       	brcc	.-10     	; 0x4452 <strnlen+0x2>
    445c:	80 95       	com	r24
    445e:	90 95       	com	r25
    4460:	8e 0f       	add	r24, r30
    4462:	9f 1f       	adc	r25, r31
    4464:	08 95       	ret

00004466 <strrev>:
    4466:	dc 01       	movw	r26, r24
    4468:	fc 01       	movw	r30, r24
    446a:	67 2f       	mov	r22, r23
    446c:	71 91       	ld	r23, Z+
    446e:	77 23       	and	r23, r23
    4470:	e1 f7       	brne	.-8      	; 0x446a <strrev+0x4>
    4472:	32 97       	sbiw	r30, 0x02	; 2
    4474:	04 c0       	rjmp	.+8      	; 0x447e <strrev+0x18>
    4476:	7c 91       	ld	r23, X
    4478:	6d 93       	st	X+, r22
    447a:	70 83       	st	Z, r23
    447c:	62 91       	ld	r22, -Z
    447e:	ae 17       	cp	r26, r30
    4480:	bf 07       	cpc	r27, r31
    4482:	c8 f3       	brcs	.-14     	; 0x4476 <strrev+0x10>
    4484:	08 95       	ret

00004486 <fputc>:
    4486:	0f 93       	push	r16
    4488:	1f 93       	push	r17
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	8c 01       	movw	r16, r24
    4490:	eb 01       	movw	r28, r22
    4492:	8b 81       	ldd	r24, Y+3	; 0x03
    4494:	81 ff       	sbrs	r24, 1
    4496:	1b c0       	rjmp	.+54     	; 0x44ce <fputc+0x48>
    4498:	82 ff       	sbrs	r24, 2
    449a:	0d c0       	rjmp	.+26     	; 0x44b6 <fputc+0x30>
    449c:	2e 81       	ldd	r18, Y+6	; 0x06
    449e:	3f 81       	ldd	r19, Y+7	; 0x07
    44a0:	8c 81       	ldd	r24, Y+4	; 0x04
    44a2:	9d 81       	ldd	r25, Y+5	; 0x05
    44a4:	28 17       	cp	r18, r24
    44a6:	39 07       	cpc	r19, r25
    44a8:	64 f4       	brge	.+24     	; 0x44c2 <fputc+0x3c>
    44aa:	e8 81       	ld	r30, Y
    44ac:	f9 81       	ldd	r31, Y+1	; 0x01
    44ae:	01 93       	st	Z+, r16
    44b0:	f9 83       	std	Y+1, r31	; 0x01
    44b2:	e8 83       	st	Y, r30
    44b4:	06 c0       	rjmp	.+12     	; 0x44c2 <fputc+0x3c>
    44b6:	e8 85       	ldd	r30, Y+8	; 0x08
    44b8:	f9 85       	ldd	r31, Y+9	; 0x09
    44ba:	80 2f       	mov	r24, r16
    44bc:	09 95       	icall
    44be:	89 2b       	or	r24, r25
    44c0:	31 f4       	brne	.+12     	; 0x44ce <fputc+0x48>
    44c2:	8e 81       	ldd	r24, Y+6	; 0x06
    44c4:	9f 81       	ldd	r25, Y+7	; 0x07
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	9f 83       	std	Y+7, r25	; 0x07
    44ca:	8e 83       	std	Y+6, r24	; 0x06
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <fputc+0x4c>
    44ce:	0f ef       	ldi	r16, 0xFF	; 255
    44d0:	1f ef       	ldi	r17, 0xFF	; 255
    44d2:	c8 01       	movw	r24, r16
    44d4:	df 91       	pop	r29
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	08 95       	ret

000044de <__ultoa_invert>:
    44de:	fa 01       	movw	r30, r20
    44e0:	aa 27       	eor	r26, r26
    44e2:	28 30       	cpi	r18, 0x08	; 8
    44e4:	51 f1       	breq	.+84     	; 0x453a <__ultoa_invert+0x5c>
    44e6:	20 31       	cpi	r18, 0x10	; 16
    44e8:	81 f1       	breq	.+96     	; 0x454a <__ultoa_invert+0x6c>
    44ea:	e8 94       	clt
    44ec:	6f 93       	push	r22
    44ee:	6e 7f       	andi	r22, 0xFE	; 254
    44f0:	6e 5f       	subi	r22, 0xFE	; 254
    44f2:	7f 4f       	sbci	r23, 0xFF	; 255
    44f4:	8f 4f       	sbci	r24, 0xFF	; 255
    44f6:	9f 4f       	sbci	r25, 0xFF	; 255
    44f8:	af 4f       	sbci	r26, 0xFF	; 255
    44fa:	b1 e0       	ldi	r27, 0x01	; 1
    44fc:	3e d0       	rcall	.+124    	; 0x457a <__ultoa_invert+0x9c>
    44fe:	b4 e0       	ldi	r27, 0x04	; 4
    4500:	3c d0       	rcall	.+120    	; 0x457a <__ultoa_invert+0x9c>
    4502:	67 0f       	add	r22, r23
    4504:	78 1f       	adc	r23, r24
    4506:	89 1f       	adc	r24, r25
    4508:	9a 1f       	adc	r25, r26
    450a:	a1 1d       	adc	r26, r1
    450c:	68 0f       	add	r22, r24
    450e:	79 1f       	adc	r23, r25
    4510:	8a 1f       	adc	r24, r26
    4512:	91 1d       	adc	r25, r1
    4514:	a1 1d       	adc	r26, r1
    4516:	6a 0f       	add	r22, r26
    4518:	71 1d       	adc	r23, r1
    451a:	81 1d       	adc	r24, r1
    451c:	91 1d       	adc	r25, r1
    451e:	a1 1d       	adc	r26, r1
    4520:	20 d0       	rcall	.+64     	; 0x4562 <__ultoa_invert+0x84>
    4522:	09 f4       	brne	.+2      	; 0x4526 <__ultoa_invert+0x48>
    4524:	68 94       	set
    4526:	3f 91       	pop	r19
    4528:	2a e0       	ldi	r18, 0x0A	; 10
    452a:	26 9f       	mul	r18, r22
    452c:	11 24       	eor	r1, r1
    452e:	30 19       	sub	r19, r0
    4530:	30 5d       	subi	r19, 0xD0	; 208
    4532:	31 93       	st	Z+, r19
    4534:	de f6       	brtc	.-74     	; 0x44ec <__ultoa_invert+0xe>
    4536:	cf 01       	movw	r24, r30
    4538:	08 95       	ret
    453a:	46 2f       	mov	r20, r22
    453c:	47 70       	andi	r20, 0x07	; 7
    453e:	40 5d       	subi	r20, 0xD0	; 208
    4540:	41 93       	st	Z+, r20
    4542:	b3 e0       	ldi	r27, 0x03	; 3
    4544:	0f d0       	rcall	.+30     	; 0x4564 <__ultoa_invert+0x86>
    4546:	c9 f7       	brne	.-14     	; 0x453a <__ultoa_invert+0x5c>
    4548:	f6 cf       	rjmp	.-20     	; 0x4536 <__ultoa_invert+0x58>
    454a:	46 2f       	mov	r20, r22
    454c:	4f 70       	andi	r20, 0x0F	; 15
    454e:	40 5d       	subi	r20, 0xD0	; 208
    4550:	4a 33       	cpi	r20, 0x3A	; 58
    4552:	18 f0       	brcs	.+6      	; 0x455a <__ultoa_invert+0x7c>
    4554:	49 5d       	subi	r20, 0xD9	; 217
    4556:	31 fd       	sbrc	r19, 1
    4558:	40 52       	subi	r20, 0x20	; 32
    455a:	41 93       	st	Z+, r20
    455c:	02 d0       	rcall	.+4      	; 0x4562 <__ultoa_invert+0x84>
    455e:	a9 f7       	brne	.-22     	; 0x454a <__ultoa_invert+0x6c>
    4560:	ea cf       	rjmp	.-44     	; 0x4536 <__ultoa_invert+0x58>
    4562:	b4 e0       	ldi	r27, 0x04	; 4
    4564:	a6 95       	lsr	r26
    4566:	97 95       	ror	r25
    4568:	87 95       	ror	r24
    456a:	77 95       	ror	r23
    456c:	67 95       	ror	r22
    456e:	ba 95       	dec	r27
    4570:	c9 f7       	brne	.-14     	; 0x4564 <__ultoa_invert+0x86>
    4572:	00 97       	sbiw	r24, 0x00	; 0
    4574:	61 05       	cpc	r22, r1
    4576:	71 05       	cpc	r23, r1
    4578:	08 95       	ret
    457a:	9b 01       	movw	r18, r22
    457c:	ac 01       	movw	r20, r24
    457e:	0a 2e       	mov	r0, r26
    4580:	06 94       	lsr	r0
    4582:	57 95       	ror	r21
    4584:	47 95       	ror	r20
    4586:	37 95       	ror	r19
    4588:	27 95       	ror	r18
    458a:	ba 95       	dec	r27
    458c:	c9 f7       	brne	.-14     	; 0x4580 <__ultoa_invert+0xa2>
    458e:	62 0f       	add	r22, r18
    4590:	73 1f       	adc	r23, r19
    4592:	84 1f       	adc	r24, r20
    4594:	95 1f       	adc	r25, r21
    4596:	a0 1d       	adc	r26, r0
    4598:	08 95       	ret

0000459a <__fp_split3>:
    459a:	57 fd       	sbrc	r21, 7
    459c:	90 58       	subi	r25, 0x80	; 128
    459e:	44 0f       	add	r20, r20
    45a0:	55 1f       	adc	r21, r21
    45a2:	59 f0       	breq	.+22     	; 0x45ba <__fp_splitA+0x10>
    45a4:	5f 3f       	cpi	r21, 0xFF	; 255
    45a6:	71 f0       	breq	.+28     	; 0x45c4 <__fp_splitA+0x1a>
    45a8:	47 95       	ror	r20

000045aa <__fp_splitA>:
    45aa:	88 0f       	add	r24, r24
    45ac:	97 fb       	bst	r25, 7
    45ae:	99 1f       	adc	r25, r25
    45b0:	61 f0       	breq	.+24     	; 0x45ca <__fp_splitA+0x20>
    45b2:	9f 3f       	cpi	r25, 0xFF	; 255
    45b4:	79 f0       	breq	.+30     	; 0x45d4 <__fp_splitA+0x2a>
    45b6:	87 95       	ror	r24
    45b8:	08 95       	ret
    45ba:	12 16       	cp	r1, r18
    45bc:	13 06       	cpc	r1, r19
    45be:	14 06       	cpc	r1, r20
    45c0:	55 1f       	adc	r21, r21
    45c2:	f2 cf       	rjmp	.-28     	; 0x45a8 <__fp_split3+0xe>
    45c4:	46 95       	lsr	r20
    45c6:	f1 df       	rcall	.-30     	; 0x45aa <__fp_splitA>
    45c8:	08 c0       	rjmp	.+16     	; 0x45da <__fp_splitA+0x30>
    45ca:	16 16       	cp	r1, r22
    45cc:	17 06       	cpc	r1, r23
    45ce:	18 06       	cpc	r1, r24
    45d0:	99 1f       	adc	r25, r25
    45d2:	f1 cf       	rjmp	.-30     	; 0x45b6 <__fp_splitA+0xc>
    45d4:	86 95       	lsr	r24
    45d6:	71 05       	cpc	r23, r1
    45d8:	61 05       	cpc	r22, r1
    45da:	08 94       	sec
    45dc:	08 95       	ret

000045de <_exit>:
    45de:	f8 94       	cli

000045e0 <__stop_program>:
    45e0:	ff cf       	rjmp	.-2      	; 0x45e0 <__stop_program>
