
tryapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000035c  00800060  00003f1e  00003f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000363c  00000000  00000000  000042f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001978  00000000  00000000  0000792c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000092a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00009444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00009636  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000ba41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000cdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000dfa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000e456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000edc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <main>
      7a:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e9       	ldi	r26, 0x94	; 148
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e9       	ldi	r24, 0x94	; 148
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e9       	ldi	r22, 0x94	; 148
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e4 56       	subi	r30, 0x64	; 100
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <SSD_Init>:
 *      Author: 20100
 */
#include"SSD.h"

void SSD_Init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE DATA LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN4, OUTPUT);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	64 e0       	ldi	r22, 0x04	; 4
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN5, OUTPUT);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN6, OUTPUT);
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	66 e0       	ldi	r22, 0x06	; 6
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN7, OUTPUT);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	67 e0       	ldi	r22, 0x07	; 7
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>


	// CONFIGURE CONTROL LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN1, OUTPUT);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN2, OUTPUT);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>

}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <SSD_DisplayNumber>:
because the second one is at the end so it
will stay on untill the function work again
but the first one will be off at
that time so your eye will notice*/
SSD_DisplayNumber(u8 num)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	af 97       	sbiw	r28, 0x2f	; 47
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	8d a7       	std	Y+45, r24	; 0x2d
	u8 loc_FirstDigit = (num/10)<<4;
     e7e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	69 2f       	mov	r22, r25
     e84:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__udivmodqi4>
     e88:	82 95       	swap	r24
     e8a:	80 7f       	andi	r24, 0xF0	; 240
     e8c:	8c a7       	std	Y+44, r24	; 0x2c
	u8 loc_SecondtDigit = (num%10)<<4;
     e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e90:	9a e0       	ldi	r25, 0x0A	; 10
     e92:	69 2f       	mov	r22, r25
     e94:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__udivmodqi4>
     e98:	89 2f       	mov	r24, r25
     e9a:	82 95       	swap	r24
     e9c:	80 7f       	andi	r24, 0xF0	; 240
     e9e:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	60 ef       	ldi	r22, 0xF0	; 240
     ea4:	4c a5       	ldd	r20, Y+44	; 0x2c
     ea6:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a0 e8       	ldi	r26, 0x80	; 128
     eb0:	bf e3       	ldi	r27, 0x3F	; 63
     eb2:	8f a3       	std	Y+39, r24	; 0x27
     eb4:	98 a7       	std	Y+40, r25	; 0x28
     eb6:	a9 a7       	std	Y+41, r26	; 0x29
     eb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eba:	6f a1       	ldd	r22, Y+39	; 0x27
     ebc:	78 a5       	ldd	r23, Y+40	; 0x28
     ebe:	89 a5       	ldd	r24, Y+41	; 0x29
     ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4a ef       	ldi	r20, 0xFA	; 250
     ec8:	54 e4       	ldi	r21, 0x44	; 68
     eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	8b a3       	std	Y+35, r24	; 0x23
     ed4:	9c a3       	std	Y+36, r25	; 0x24
     ed6:	ad a3       	std	Y+37, r26	; 0x25
     ed8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eda:	6b a1       	ldd	r22, Y+35	; 0x23
     edc:	7c a1       	ldd	r23, Y+36	; 0x24
     ede:	8d a1       	ldd	r24, Y+37	; 0x25
     ee0:	9e a1       	ldd	r25, Y+38	; 0x26
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eee:	88 23       	and	r24, r24
     ef0:	2c f4       	brge	.+10     	; 0xefc <SSD_DisplayNumber+0x94>
		__ticks = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9a a3       	std	Y+34, r25	; 0x22
     ef8:	89 a3       	std	Y+33, r24	; 0x21
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <SSD_DisplayNumber+0x112>
	else if (__tmp > 65535)
     efc:	6b a1       	ldd	r22, Y+35	; 0x23
     efe:	7c a1       	ldd	r23, Y+36	; 0x24
     f00:	8d a1       	ldd	r24, Y+37	; 0x25
     f02:	9e a1       	ldd	r25, Y+38	; 0x26
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	3f ef       	ldi	r19, 0xFF	; 255
     f08:	4f e7       	ldi	r20, 0x7F	; 127
     f0a:	57 e4       	ldi	r21, 0x47	; 71
     f0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f10:	18 16       	cp	r1, r24
     f12:	4c f5       	brge	.+82     	; 0xf66 <SSD_DisplayNumber+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	6f a1       	ldd	r22, Y+39	; 0x27
     f16:	78 a5       	ldd	r23, Y+40	; 0x28
     f18:	89 a5       	ldd	r24, Y+41	; 0x29
     f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e2       	ldi	r20, 0x20	; 32
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9a a3       	std	Y+34, r25	; 0x22
     f3a:	89 a3       	std	Y+33, r24	; 0x21
     f3c:	0f c0       	rjmp	.+30     	; 0xf5c <SSD_DisplayNumber+0xf4>
     f3e:	88 ec       	ldi	r24, 0xC8	; 200
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	98 a3       	std	Y+32, r25	; 0x20
     f44:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f48:	98 a1       	ldd	r25, Y+32	; 0x20
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <SSD_DisplayNumber+0xe2>
     f4e:	98 a3       	std	Y+32, r25	; 0x20
     f50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f52:	89 a1       	ldd	r24, Y+33	; 0x21
     f54:	9a a1       	ldd	r25, Y+34	; 0x22
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	9a a3       	std	Y+34, r25	; 0x22
     f5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5c:	89 a1       	ldd	r24, Y+33	; 0x21
     f5e:	9a a1       	ldd	r25, Y+34	; 0x22
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	69 f7       	brne	.-38     	; 0xf3e <SSD_DisplayNumber+0xd6>
     f64:	14 c0       	rjmp	.+40     	; 0xf8e <SSD_DisplayNumber+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	6b a1       	ldd	r22, Y+35	; 0x23
     f68:	7c a1       	ldd	r23, Y+36	; 0x24
     f6a:	8d a1       	ldd	r24, Y+37	; 0x25
     f6c:	9e a1       	ldd	r25, Y+38	; 0x26
     f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9a a3       	std	Y+34, r25	; 0x22
     f78:	89 a3       	std	Y+33, r24	; 0x21
     f7a:	89 a1       	ldd	r24, Y+33	; 0x21
     f7c:	9a a1       	ldd	r25, Y+34	; 0x22
     f7e:	9e 8f       	std	Y+30, r25	; 0x1e
     f80:	8d 8f       	std	Y+29, r24	; 0x1d
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <SSD_DisplayNumber+0x11e>
     f8a:	9e 8f       	std	Y+30, r25	; 0x1e
     f8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//enable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	//disable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num/10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	60 ef       	ldi	r22, 0xF0	; 240
     fa6:	4c a5       	ldd	r20, Y+44	; 0x2c
     fa8:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e8       	ldi	r26, 0x80	; 128
     fb2:	bf e3       	ldi	r27, 0x3F	; 63
     fb4:	89 8f       	std	Y+25, r24	; 0x19
     fb6:	9a 8f       	std	Y+26, r25	; 0x1a
     fb8:	ab 8f       	std	Y+27, r26	; 0x1b
     fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbc:	69 8d       	ldd	r22, Y+25	; 0x19
     fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a ef       	ldi	r20, 0xFA	; 250
     fca:	54 e4       	ldi	r21, 0x44	; 68
     fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	8d 8b       	std	Y+21, r24	; 0x15
     fd6:	9e 8b       	std	Y+22, r25	; 0x16
     fd8:	af 8b       	std	Y+23, r26	; 0x17
     fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fdc:	6d 89       	ldd	r22, Y+21	; 0x15
     fde:	7e 89       	ldd	r23, Y+22	; 0x16
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	2c f4       	brge	.+10     	; 0xffe <SSD_DisplayNumber+0x196>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 8b       	std	Y+20, r25	; 0x14
     ffa:	8b 8b       	std	Y+19, r24	; 0x13
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <SSD_DisplayNumber+0x214>
	else if (__tmp > 65535)
     ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    1000:	7e 89       	ldd	r23, Y+22	; 0x16
    1002:	8f 89       	ldd	r24, Y+23	; 0x17
    1004:	98 8d       	ldd	r25, Y+24	; 0x18
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1012:	18 16       	cp	r1, r24
    1014:	4c f5       	brge	.+82     	; 0x1068 <SSD_DisplayNumber+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1016:	69 8d       	ldd	r22, Y+25	; 0x19
    1018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	0f c0       	rjmp	.+30     	; 0x105e <SSD_DisplayNumber+0x1f6>
    1040:	88 ec       	ldi	r24, 0xC8	; 200
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	9a 8b       	std	Y+18, r25	; 0x12
    1046:	89 8b       	std	Y+17, r24	; 0x11
    1048:	89 89       	ldd	r24, Y+17	; 0x11
    104a:	9a 89       	ldd	r25, Y+18	; 0x12
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <SSD_DisplayNumber+0x1e4>
    1050:	9a 8b       	std	Y+18, r25	; 0x12
    1052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	9c 89       	ldd	r25, Y+20	; 0x14
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	9c 8b       	std	Y+20, r25	; 0x14
    105c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105e:	8b 89       	ldd	r24, Y+19	; 0x13
    1060:	9c 89       	ldd	r25, Y+20	; 0x14
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	69 f7       	brne	.-38     	; 0x1040 <SSD_DisplayNumber+0x1d8>
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <SSD_DisplayNumber+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	98 8b       	std	Y+16, r25	; 0x10
    1082:	8f 87       	std	Y+15, r24	; 0x0f
    1084:	8f 85       	ldd	r24, Y+15	; 0x0f
    1086:	98 89       	ldd	r25, Y+16	; 0x10
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <SSD_DisplayNumber+0x220>
    108c:	98 8b       	std	Y+16, r25	; 0x10
    108e:	8f 87       	std	Y+15, r24	; 0x0f
	//wait (1m)
	_delay_ms(1);
	//disable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	//enable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	41 e0       	ldi	r20, 0x01	; 1
    10a0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num%10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_SecondtDigit);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	60 ef       	ldi	r22, 0xF0	; 240
    10a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    10aa:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 e8       	ldi	r26, 0x80	; 128
    10b4:	bf e3       	ldi	r27, 0x3F	; 63
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	ad 87       	std	Y+13, r26	; 0x0d
    10bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4a ef       	ldi	r20, 0xFA	; 250
    10cc:	54 e4       	ldi	r21, 0x44	; 68
    10ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	8f 83       	std	Y+7, r24	; 0x07
    10d8:	98 87       	std	Y+8, r25	; 0x08
    10da:	a9 87       	std	Y+9, r26	; 0x09
    10dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	2c f4       	brge	.+10     	; 0x1100 <SSD_DisplayNumber+0x298>
		__ticks = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <SSD_DisplayNumber+0x316>
	else if (__tmp > 65535)
    1100:	6f 81       	ldd	r22, Y+7	; 0x07
    1102:	78 85       	ldd	r23, Y+8	; 0x08
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	4c f5       	brge	.+82     	; 0x116a <SSD_DisplayNumber+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <SSD_DisplayNumber+0x2f8>
    1142:	88 ec       	ldi	r24, 0xC8	; 200
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <SSD_DisplayNumber+0x2e6>
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f7       	brne	.-38     	; 0x1142 <SSD_DisplayNumber+0x2da>
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <SSD_DisplayNumber+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <SSD_DisplayNumber+0x322>
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
	//wait (1m)
	_delay_ms(1);
}
    1192:	af 96       	adiw	r28, 0x2f	; 47
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <LED_Init>:
 */
#include"led.h"


void LED_Init(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_PIN, OUTPUT);//LED 0
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	62 e0       	ldi	r22, 0x02	; 2
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,2);
	Dio_ConfigChannel(LED1_PORT, LED1_PIN, OUTPUT);//LED 1
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	67 e0       	ldi	r22, 0x07	; 7
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,7);
	Dio_ConfigChannel(LED2_PORT, LED2_PIN, OUTPUT);//LED 2
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRD_REG,3);

}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LED_ON>:
void LED_ON(led_type ledId)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <LED_ON+0x6>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3b 83       	std	Y+3, r19	; 0x03
    11e6:	2a 83       	std	Y+2, r18	; 0x02
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	79 f0       	breq	.+30     	; 0x1210 <LED_ON+0x40>
    11f2:	2a 81       	ldd	r18, Y+2	; 0x02
    11f4:	3b 81       	ldd	r19, Y+3	; 0x03
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <LED_ON+0x4c>
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	89 f4       	brne	.+34     	; 0x1226 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_HIGH);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    120e:	0b c0       	rjmp	.+22     	; 0x1226 <LED_ON+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_HIGH);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	67 e0       	ldi	r22, 0x07	; 7
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <LED_ON+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_HIGH);
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	63 e0       	ldi	r22, 0x03	; 3
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
		break;

	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <LED_OFF>:
void LED_OFF(led_type ledId)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <LED_OFF+0x6>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3b 83       	std	Y+3, r19	; 0x03
    1248:	2a 83       	std	Y+2, r18	; 0x02
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	79 f0       	breq	.+30     	; 0x1272 <LED_OFF+0x40>
    1254:	2a 81       	ldd	r18, Y+2	; 0x02
    1256:	3b 81       	ldd	r19, Y+3	; 0x03
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <LED_OFF+0x4c>
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	89 f4       	brne	.+34     	; 0x1288 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_LOW);
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <LED_OFF+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_LOW);
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	67 e0       	ldi	r22, 0x07	; 7
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <LED_OFF+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_LOW);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	63 e0       	ldi	r22, 0x03	; 3
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
		break;
	}


}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <LED_TOGGLE+0x6>
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01

	switch (ledId)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3b 83       	std	Y+3, r19	; 0x03
    12aa:	2a 83       	std	Y+2, r18	; 0x02
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	9b 81       	ldd	r25, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <LED_TOGGLE+0x3e>
    12b6:	2a 81       	ldd	r18, Y+2	; 0x02
    12b8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	71 f0       	breq	.+28     	; 0x12dc <LED_TOGGLE+0x48>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	71 f4       	brne	.+28     	; 0x12e4 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	62 e0       	ldi	r22, 0x02	; 2
    12cc:	0e 94 42 1a 	call	0x3484	; 0x3484 <Dio_ToggleChannel>
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <LED_TOGGLE+0x50>
		break;
	case LED1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	67 e0       	ldi	r22, 0x07	; 7
    12d6:	0e 94 42 1a 	call	0x3484	; 0x3484 <Dio_ToggleChannel>
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <LED_TOGGLE+0x50>
		break;
	case LED2:
		Dio_ToggleChannel(LED2_PORT, LED2_PIN);
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	63 e0       	ldi	r22, 0x03	; 3
    12e0:	0e 94 42 1a 	call	0x3484	; 0x3484 <Dio_ToggleChannel>
		break;
	}
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <Lcd_WriteCustom+0x6>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    12fc:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	2c c0       	rjmp	.+88     	; 0x135a <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	08 96       	adiw	r24, 0x08	; 8
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    131a:	1a 82       	std	Y+2, r1	; 0x02
    131c:	18 c0       	rjmp	.+48     	; 0x134e <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	48 2f       	mov	r20, r24
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	ca 01       	movw	r24, r20
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	fc 01       	movw	r30, r24
    133e:	e4 56       	subi	r30, 0x64	; 100
    1340:	fe 4f       	sbci	r31, 0xFE	; 254
    1342:	80 81       	ld	r24, Z
    1344:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	28 f3       	brcs	.-54     	; 0x131e <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	88 f2       	brcs	.-94     	; 0x1302 <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <Lcd_Init>:

void Lcd_Init(void)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	e4 97       	sbiw	r28, 0x34	; 52
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	64 e0       	ldi	r22, 0x04	; 4
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	65 e0       	ldi	r22, 0x05	; 5
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	67 e0       	ldi	r22, 0x07	; 7
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e7       	ldi	r26, 0x70	; 112
    13d4:	b1 e4       	ldi	r27, 0x41	; 65
    13d6:	89 ab       	std	Y+49, r24	; 0x31
    13d8:	9a ab       	std	Y+50, r25	; 0x32
    13da:	ab ab       	std	Y+51, r26	; 0x33
    13dc:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	69 a9       	ldd	r22, Y+49	; 0x31
    13e0:	7a a9       	ldd	r23, Y+50	; 0x32
    13e2:	8b a9       	ldd	r24, Y+51	; 0x33
    13e4:	9c a9       	ldd	r25, Y+52	; 0x34
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a ef       	ldi	r20, 0xFA	; 250
    13ec:	54 e4       	ldi	r21, 0x44	; 68
    13ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8d a7       	std	Y+45, r24	; 0x2d
    13f8:	9e a7       	std	Y+46, r25	; 0x2e
    13fa:	af a7       	std	Y+47, r26	; 0x2f
    13fc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    13fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1400:	7e a5       	ldd	r23, Y+46	; 0x2e
    1402:	8f a5       	ldd	r24, Y+47	; 0x2f
    1404:	98 a9       	ldd	r25, Y+48	; 0x30
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <Lcd_Init+0xb6>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9c a7       	std	Y+44, r25	; 0x2c
    141c:	8b a7       	std	Y+43, r24	; 0x2b
    141e:	3f c0       	rjmp	.+126    	; 0x149e <Lcd_Init+0x134>
	else if (__tmp > 65535)
    1420:	6d a5       	ldd	r22, Y+45	; 0x2d
    1422:	7e a5       	ldd	r23, Y+46	; 0x2e
    1424:	8f a5       	ldd	r24, Y+47	; 0x2f
    1426:	98 a9       	ldd	r25, Y+48	; 0x30
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	69 a9       	ldd	r22, Y+49	; 0x31
    143a:	7a a9       	ldd	r23, Y+50	; 0x32
    143c:	8b a9       	ldd	r24, Y+51	; 0x33
    143e:	9c a9       	ldd	r25, Y+52	; 0x34
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c a7       	std	Y+44, r25	; 0x2c
    145e:	8b a7       	std	Y+43, r24	; 0x2b
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <Lcd_Init+0x116>
    1462:	88 ec       	ldi	r24, 0xC8	; 200
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9a a7       	std	Y+42, r25	; 0x2a
    1468:	89 a7       	std	Y+41, r24	; 0x29
    146a:	89 a5       	ldd	r24, Y+41	; 0x29
    146c:	9a a5       	ldd	r25, Y+42	; 0x2a
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <Lcd_Init+0x104>
    1472:	9a a7       	std	Y+42, r25	; 0x2a
    1474:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	8b a5       	ldd	r24, Y+43	; 0x2b
    1478:	9c a5       	ldd	r25, Y+44	; 0x2c
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9c a7       	std	Y+44, r25	; 0x2c
    147e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	8b a5       	ldd	r24, Y+43	; 0x2b
    1482:	9c a5       	ldd	r25, Y+44	; 0x2c
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <Lcd_Init+0xf8>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6d a5       	ldd	r22, Y+45	; 0x2d
    148c:	7e a5       	ldd	r23, Y+46	; 0x2e
    148e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1490:	98 a9       	ldd	r25, Y+48	; 0x30
    1492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9c a7       	std	Y+44, r25	; 0x2c
    149c:	8b a7       	std	Y+43, r24	; 0x2b
    149e:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a2:	98 a7       	std	Y+40, r25	; 0x28
    14a4:	8f a3       	std	Y+39, r24	; 0x27
    14a6:	8f a1       	ldd	r24, Y+39	; 0x27
    14a8:	98 a5       	ldd	r25, Y+40	; 0x28
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <Lcd_Init+0x140>
    14ae:	98 a7       	std	Y+40, r25	; 0x28
    14b0:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 ea       	ldi	r26, 0xA0	; 160
    14be:	b0 e4       	ldi	r27, 0x40	; 64
    14c0:	8b a3       	std	Y+35, r24	; 0x23
    14c2:	9c a3       	std	Y+36, r25	; 0x24
    14c4:	ad a3       	std	Y+37, r26	; 0x25
    14c6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ca:	7c a1       	ldd	r23, Y+36	; 0x24
    14cc:	8d a1       	ldd	r24, Y+37	; 0x25
    14ce:	9e a1       	ldd	r25, Y+38	; 0x26
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8f 8f       	std	Y+31, r24	; 0x1f
    14e2:	98 a3       	std	Y+32, r25	; 0x20
    14e4:	a9 a3       	std	Y+33, r26	; 0x21
    14e6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    14e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14ea:	78 a1       	ldd	r23, Y+32	; 0x20
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <Lcd_Init+0x1a0>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9e 8f       	std	Y+30, r25	; 0x1e
    1506:	8d 8f       	std	Y+29, r24	; 0x1d
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    150a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    150c:	78 a1       	ldd	r23, Y+32	; 0x20
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	6b a1       	ldd	r22, Y+35	; 0x23
    1524:	7c a1       	ldd	r23, Y+36	; 0x24
    1526:	8d a1       	ldd	r24, Y+37	; 0x25
    1528:	9e a1       	ldd	r25, Y+38	; 0x26
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9e 8f       	std	Y+30, r25	; 0x1e
    1548:	8d 8f       	std	Y+29, r24	; 0x1d
    154a:	0f c0       	rjmp	.+30     	; 0x156a <Lcd_Init+0x200>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 8f       	std	Y+28, r25	; 0x1c
    1552:	8b 8f       	std	Y+27, r24	; 0x1b
    1554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <Lcd_Init+0x1ee>
    155c:	9c 8f       	std	Y+28, r25	; 0x1c
    155e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1562:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9e 8f       	std	Y+30, r25	; 0x1e
    1568:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <Lcd_Init+0x1e2>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1576:	78 a1       	ldd	r23, Y+32	; 0x20
    1578:	89 a1       	ldd	r24, Y+33	; 0x21
    157a:	9a a1       	ldd	r25, Y+34	; 0x22
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 8f       	std	Y+30, r25	; 0x1e
    1586:	8d 8f       	std	Y+29, r24	; 0x1d
    1588:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158c:	9a 8f       	std	Y+26, r25	; 0x1a
    158e:	89 8f       	std	Y+25, r24	; 0x19
    1590:	89 8d       	ldd	r24, Y+25	; 0x19
    1592:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <Lcd_Init+0x22a>
    1598:	9a 8f       	std	Y+26, r25	; 0x1a
    159a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a8 ec       	ldi	r26, 0xC8	; 200
    15a8:	b2 e4       	ldi	r27, 0x42	; 66
    15aa:	8d 8b       	std	Y+21, r24	; 0x15
    15ac:	9e 8b       	std	Y+22, r25	; 0x16
    15ae:	af 8b       	std	Y+23, r26	; 0x17
    15b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	2b ea       	ldi	r18, 0xAB	; 171
    15bc:	3a ea       	ldi	r19, 0xAA	; 170
    15be:	4a e2       	ldi	r20, 0x2A	; 42
    15c0:	50 e4       	ldi	r21, 0x40	; 64
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	ab 8b       	std	Y+19, r26	; 0x13
    15d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15d2:	69 89       	ldd	r22, Y+17	; 0x11
    15d4:	7a 89       	ldd	r23, Y+18	; 0x12
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	1c f4       	brge	.+6      	; 0x15f0 <Lcd_Init+0x286>
		__ticks = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	88 8b       	std	Y+16, r24	; 0x10
    15ee:	91 c0       	rjmp	.+290    	; 0x1712 <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    15f0:	69 89       	ldd	r22, Y+17	; 0x11
    15f2:	7a 89       	ldd	r23, Y+18	; 0x12
    15f4:	8b 89       	ldd	r24, Y+19	; 0x13
    15f6:	9c 89       	ldd	r25, Y+20	; 0x14
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	0c f0       	brlt	.+2      	; 0x160a <Lcd_Init+0x2a0>
    1608:	7b c0       	rjmp	.+246    	; 0x1700 <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a e7       	ldi	r20, 0x7A	; 122
    1618:	54 e4       	ldi	r21, 0x44	; 68
    161a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8c 87       	std	Y+12, r24	; 0x0c
    1624:	9d 87       	std	Y+13, r25	; 0x0d
    1626:	ae 87       	std	Y+14, r26	; 0x0e
    1628:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	6c 85       	ldd	r22, Y+12	; 0x0c
    162c:	7d 85       	ldd	r23, Y+13	; 0x0d
    162e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1630:	9f 85       	ldd	r25, Y+15	; 0x0f
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a ef       	ldi	r20, 0xFA	; 250
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	88 87       	std	Y+8, r24	; 0x08
    1644:	99 87       	std	Y+9, r25	; 0x09
    1646:	aa 87       	std	Y+10, r26	; 0x0a
    1648:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    164a:	68 85       	ldd	r22, Y+8	; 0x08
    164c:	79 85       	ldd	r23, Y+9	; 0x09
    164e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1650:	9b 85       	ldd	r25, Y+11	; 0x0b
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <Lcd_Init+0x302>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9f 83       	std	Y+7, r25	; 0x07
    1668:	8e 83       	std	Y+6, r24	; 0x06
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <Lcd_Init+0x380>
	else if (__tmp > 65535)
    166c:	68 85       	ldd	r22, Y+8	; 0x08
    166e:	79 85       	ldd	r23, Y+9	; 0x09
    1670:	8a 85       	ldd	r24, Y+10	; 0x0a
    1672:	9b 85       	ldd	r25, Y+11	; 0x0b
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	6c 85       	ldd	r22, Y+12	; 0x0c
    1686:	7d 85       	ldd	r23, Y+13	; 0x0d
    1688:	8e 85       	ldd	r24, Y+14	; 0x0e
    168a:	9f 85       	ldd	r25, Y+15	; 0x0f
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9f 83       	std	Y+7, r25	; 0x07
    16aa:	8e 83       	std	Y+6, r24	; 0x06
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <Lcd_Init+0x362>
    16ae:	88 ec       	ldi	r24, 0xC8	; 200
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9d 83       	std	Y+5, r25	; 0x05
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <Lcd_Init+0x350>
    16be:	9d 83       	std	Y+5, r25	; 0x05
    16c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9f 83       	std	Y+7, r25	; 0x07
    16ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <Lcd_Init+0x344>
    16d4:	24 c0       	rjmp	.+72     	; 0x171e <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	68 85       	ldd	r22, Y+8	; 0x08
    16d8:	79 85       	ldd	r23, Y+9	; 0x09
    16da:	8a 85       	ldd	r24, Y+10	; 0x0a
    16dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9f 83       	std	Y+7, r25	; 0x07
    16e8:	8e 83       	std	Y+6, r24	; 0x06
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	9f 81       	ldd	r25, Y+7	; 0x07
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <Lcd_Init+0x38c>
    16fa:	9b 83       	std	Y+3, r25	; 0x03
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1700:	69 89       	ldd	r22, Y+17	; 0x11
    1702:	7a 89       	ldd	r23, Y+18	; 0x12
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	88 8b       	std	Y+16, r24	; 0x10
    1712:	88 89       	ldd	r24, Y+16	; 0x10
    1714:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	8a 95       	dec	r24
    171a:	f1 f7       	brne	.-4      	; 0x1718 <Lcd_Init+0x3ae>
    171c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_Cmd(2);
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    172a:	88 e2       	ldi	r24, 0x28	; 40
    172c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_WriteCustom();
    1730:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    173c:	8c e0       	ldi	r24, 0x0C	; 12
    173e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
}
    1742:	e4 96       	adiw	r28, 0x34	; 52
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <Enable_Pulse>:
static void Enable_Pulse(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	a6 97       	sbiw	r28, 0x26	; 38
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8b a3       	std	Y+35, r24	; 0x23
    177c:	9c a3       	std	Y+36, r25	; 0x24
    177e:	ad a3       	std	Y+37, r26	; 0x25
    1780:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1782:	6b a1       	ldd	r22, Y+35	; 0x23
    1784:	7c a1       	ldd	r23, Y+36	; 0x24
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	9e a1       	ldd	r25, Y+38	; 0x26
    178a:	2b ea       	ldi	r18, 0xAB	; 171
    178c:	3a ea       	ldi	r19, 0xAA	; 170
    178e:	4a e2       	ldi	r20, 0x2A	; 42
    1790:	50 e4       	ldi	r21, 0x40	; 64
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8f 8f       	std	Y+31, r24	; 0x1f
    179c:	98 a3       	std	Y+32, r25	; 0x20
    179e:	a9 a3       	std	Y+33, r26	; 0x21
    17a0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17a4:	78 a1       	ldd	r23, Y+32	; 0x20
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	1c f4       	brge	.+6      	; 0x17c0 <Enable_Pulse+0x6c>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	8e 8f       	std	Y+30, r24	; 0x1e
    17be:	91 c0       	rjmp	.+290    	; 0x18e2 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    17c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17c2:	78 a1       	ldd	r23, Y+32	; 0x20
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	53 e4       	ldi	r21, 0x43	; 67
    17d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	0c f0       	brlt	.+2      	; 0x17da <Enable_Pulse+0x86>
    17d8:	7b c0       	rjmp	.+246    	; 0x18d0 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	54 e4       	ldi	r21, 0x44	; 68
    17ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8a 8f       	std	Y+26, r24	; 0x1a
    17f4:	9b 8f       	std	Y+27, r25	; 0x1b
    17f6:	ac 8f       	std	Y+28, r26	; 0x1c
    17f8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1800:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a ef       	ldi	r20, 0xFA	; 250
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e 8b       	std	Y+22, r24	; 0x16
    1814:	9f 8b       	std	Y+23, r25	; 0x17
    1816:	a8 8f       	std	Y+24, r26	; 0x18
    1818:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    181a:	6e 89       	ldd	r22, Y+22	; 0x16
    181c:	7f 89       	ldd	r23, Y+23	; 0x17
    181e:	88 8d       	ldd	r24, Y+24	; 0x18
    1820:	99 8d       	ldd	r25, Y+25	; 0x19
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <Enable_Pulse+0xe8>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9d 8b       	std	Y+21, r25	; 0x15
    1838:	8c 8b       	std	Y+20, r24	; 0x14
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    183c:	6e 89       	ldd	r22, Y+22	; 0x16
    183e:	7f 89       	ldd	r23, Y+23	; 0x17
    1840:	88 8d       	ldd	r24, Y+24	; 0x18
    1842:	99 8d       	ldd	r25, Y+25	; 0x19
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1856:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9d 8b       	std	Y+21, r25	; 0x15
    187a:	8c 8b       	std	Y+20, r24	; 0x14
    187c:	0f c0       	rjmp	.+30     	; 0x189c <Enable_Pulse+0x148>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9b 8b       	std	Y+19, r25	; 0x13
    1884:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1886:	8a 89       	ldd	r24, Y+18	; 0x12
    1888:	9b 89       	ldd	r25, Y+19	; 0x13
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <Enable_Pulse+0x136>
    188e:	9b 8b       	std	Y+19, r25	; 0x13
    1890:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8c 89       	ldd	r24, Y+20	; 0x14
    1894:	9d 89       	ldd	r25, Y+21	; 0x15
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9d 8b       	std	Y+21, r25	; 0x15
    189a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8c 89       	ldd	r24, Y+20	; 0x14
    189e:	9d 89       	ldd	r25, Y+21	; 0x15
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <Enable_Pulse+0x12a>
    18a4:	24 c0       	rjmp	.+72     	; 0x18ee <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6e 89       	ldd	r22, Y+22	; 0x16
    18a8:	7f 89       	ldd	r23, Y+23	; 0x17
    18aa:	88 8d       	ldd	r24, Y+24	; 0x18
    18ac:	99 8d       	ldd	r25, Y+25	; 0x19
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9d 8b       	std	Y+21, r25	; 0x15
    18b8:	8c 8b       	std	Y+20, r24	; 0x14
    18ba:	8c 89       	ldd	r24, Y+20	; 0x14
    18bc:	9d 89       	ldd	r25, Y+21	; 0x15
    18be:	99 8b       	std	Y+17, r25	; 0x11
    18c0:	88 8b       	std	Y+16, r24	; 0x10
    18c2:	88 89       	ldd	r24, Y+16	; 0x10
    18c4:	99 89       	ldd	r25, Y+17	; 0x11
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <Enable_Pulse+0x172>
    18ca:	99 8b       	std	Y+17, r25	; 0x11
    18cc:	88 8b       	std	Y+16, r24	; 0x10
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d2:	78 a1       	ldd	r23, Y+32	; 0x20
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8e 8f       	std	Y+30, r24	; 0x1e
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	8a 95       	dec	r24
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <Enable_Pulse+0x194>
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	8b 87       	std	Y+11, r24	; 0x0b
    1902:	9c 87       	std	Y+12, r25	; 0x0c
    1904:	ad 87       	std	Y+13, r26	; 0x0d
    1906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	98 87       	std	Y+8, r25	; 0x08
    1924:	a9 87       	std	Y+9, r26	; 0x09
    1926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <Enable_Pulse+0x1f6>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <Enable_Pulse+0x256>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <Enable_Pulse+0x244>
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <Enable_Pulse+0x238>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <Enable_Pulse+0x280>
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    19dc:	a6 96       	adiw	r28, 0x26	; 38
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <Lcd_Data+0x6>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	82 95       	swap	r24
    1a04:	80 7f       	andi	r24, 0xF0	; 240
    1a06:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	60 ef       	ldi	r22, 0xF0	; 240
    1a16:	4a 81       	ldd	r20, Y+2	; 0x02
    1a18:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
	Enable_Pulse();
    1a1c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	60 ef       	ldi	r22, 0xF0	; 240
    1a24:	49 81       	ldd	r20, Y+1	; 0x01
    1a26:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
	Enable_Pulse();
    1a2a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <Lcd_Cmd+0x6>
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	82 95       	swap	r24
    1a50:	80 7f       	andi	r24, 0xF0	; 240
    1a52:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	60 ef       	ldi	r22, 0xF0	; 240
    1a62:	4a 81       	ldd	r20, Y+2	; 0x02
    1a64:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
	Enable_Pulse();
    1a68:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	60 ef       	ldi	r22, 0xF0	; 240
    1a70:	49 81       	ldd	r20, Y+1	; 0x01
    1a72:	0e 94 bd 19 	call	0x337a	; 0x337a <Dio_WriteGroup>
	Enable_Pulse();
    1a76:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	0f 92       	push	r0
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Lcd_Data>
}
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <Lcd_DisplayStr+0x6>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	80 81       	ld	r24, Z
    1ab6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
		str++;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	89 f7       	brne	.-30     	; 0x1ab0 <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <Lcd_Goto_Row_Column+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <Lcd_Goto_Row_Column+0x8>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3c 83       	std	Y+4, r19	; 0x04
    1af0:	2b 83       	std	Y+3, r18	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <Lcd_Goto_Row_Column+0x2e>
    1afa:	2b 81       	ldd	r18, Y+3	; 0x03
    1afc:	3c 81       	ldd	r19, Y+4	; 0x04
    1afe:	21 30       	cpi	r18, 0x01	; 1
    1b00:	31 05       	cpc	r19, r1
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <Lcd_Goto_Row_Column+0x38>
    1b04:	09 c0       	rjmp	.+18     	; 0x1b18 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 58       	subi	r24, 0x80	; 128
    1b0a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	80 54       	subi	r24, 0x40	; 64
    1b14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
		break;
	}
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <Lcd_DisplayNum>:

void Lcd_DisplayNum(u16 num)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <Lcd_DisplayNum+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	28 ee       	ldi	r18, 0xE8	; 232
    1b3a:	33 e0       	ldi	r19, 0x03	; 3
    1b3c:	b9 01       	movw	r22, r18
    1b3e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b42:	cb 01       	movw	r24, r22
    1b44:	80 5d       	subi	r24, 0xD0	; 208
    1b46:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	28 ee       	ldi	r18, 0xE8	; 232
    1b50:	33 e0       	ldi	r19, 0x03	; 3
    1b52:	b9 01       	movw	r22, r18
    1b54:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b58:	24 e6       	ldi	r18, 0x64	; 100
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b62:	cb 01       	movw	r24, r22
    1b64:	80 5d       	subi	r24, 0xD0	; 208
    1b66:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	28 ee       	ldi	r18, 0xE8	; 232
    1b70:	33 e0       	ldi	r19, 0x03	; 3
    1b72:	b9 01       	movw	r22, r18
    1b74:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b78:	24 e6       	ldi	r18, 0x64	; 100
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	80 5d       	subi	r24, 0xD0	; 208
    1b90:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	28 ee       	ldi	r18, 0xE8	; 232
    1b9a:	33 e0       	ldi	r19, 0x03	; 3
    1b9c:	b9 01       	movw	r22, r18
    1b9e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1ba2:	24 e6       	ldi	r18, 0x64	; 100
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__udivmodhi4>
    1bb6:	80 5d       	subi	r24, 0xD0	; 208
    1bb8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	2c 97       	sbiw	r28, 0x0c	; 12
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	69 87       	std	Y+9, r22	; 0x09
    1bdc:	7a 87       	std	Y+10, r23	; 0x0a
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1be2:	18 86       	std	Y+8, r1	; 0x08
    1be4:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	8b 83       	std	Y+3, r24	; 0x03
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	ad 83       	std	Y+5, r26	; 0x05
    1bf4:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1bfa:	69 85       	ldd	r22, Y+9	; 0x09
    1bfc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1c0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c10:	98 85       	ldd	r25, Y+8	; 0x08
    1c12:	cc 01       	movw	r24, r24
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	69 85       	ldd	r22, Y+9	; 0x09
    1c26:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c2c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	ad 83       	std	Y+5, r26	; 0x05
    1c3a:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1c3c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c3e:	7c 81       	ldd	r23, Y+4	; 0x04
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	48 ec       	ldi	r20, 0xC8	; 200
    1c4a:	52 e4       	ldi	r21, 0x42	; 66
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1c64:	8f 81       	ldd	r24, Y+7	; 0x07
    1c66:	98 85       	ldd	r25, Y+8	; 0x08
    1c68:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1c6c:	8e e2       	ldi	r24, 0x2E	; 46
    1c6e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_DisplayNum>
}
    1c7a:	2c 96       	adiw	r28, 0x0c	; 12
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <ndigit>:
	vdown
}axis;


int ndigit(int n)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <ndigit+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <ndigit+0x8>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    if (n/10 == 0)
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	09 96       	adiw	r24, 0x09	; 9
    1ca2:	83 31       	cpi	r24, 0x13	; 19
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	28 f4       	brcc	.+10     	; 0x1cb2 <ndigit+0x26>
        return 1;
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3c 83       	std	Y+4, r19	; 0x04
    1cae:	2b 83       	std	Y+3, r18	; 0x03
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <ndigit+0x44>
    return 1 + ndigit(n / 10);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	2a e0       	ldi	r18, 0x0A	; 10
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	b9 01       	movw	r22, r18
    1cbc:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__divmodhi4>
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <ndigit>
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	3c 83       	std	Y+4, r19	; 0x04
    1cce:	2b 83       	std	Y+3, r18	; 0x03
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <GLCD_Command>:

void GLCD_Command(char Command) /* GLCD command function */
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	e1 97       	sbiw	r28, 0x31	; 49
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Command;        /* Copy command on data pin */
    1cf8:	eb e3       	ldi	r30, 0x3B	; 59
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1cfe:	80 83       	st	Z, r24
    Command_Port &= ~(1 << RS); /* Make RS LOW to select command register */
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8e 7f       	andi	r24, 0xFE	; 254
    1d0c:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    1d0e:	a5 e3       	ldi	r26, 0x35	; 53
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e3       	ldi	r30, 0x35	; 53
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8d 7f       	andi	r24, 0xFD	; 253
    1d1a:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    1d1c:	a5 e3       	ldi	r26, 0x35	; 53
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e3       	ldi	r30, 0x35	; 53
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	84 60       	ori	r24, 0x04	; 4
    1d28:	8c 93       	st	X, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1d30:	b0 e4       	ldi	r27, 0x40	; 64
    1d32:	8d a7       	std	Y+45, r24	; 0x2d
    1d34:	9e a7       	std	Y+46, r25	; 0x2e
    1d36:	af a7       	std	Y+47, r26	; 0x2f
    1d38:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d3a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d3c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d40:	98 a9       	ldd	r25, Y+48	; 0x30
    1d42:	2b ea       	ldi	r18, 0xAB	; 171
    1d44:	3a ea       	ldi	r19, 0xAA	; 170
    1d46:	4a e2       	ldi	r20, 0x2A	; 42
    1d48:	50 e4       	ldi	r21, 0x40	; 64
    1d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 a7       	std	Y+41, r24	; 0x29
    1d54:	9a a7       	std	Y+42, r25	; 0x2a
    1d56:	ab a7       	std	Y+43, r26	; 0x2b
    1d58:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d5a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d5c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	1c f4       	brge	.+6      	; 0x1d78 <GLCD_Command+0x96>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	88 a7       	std	Y+40, r24	; 0x28
    1d76:	91 c0       	rjmp	.+290    	; 0x1e9a <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1d78:	69 a5       	ldd	r22, Y+41	; 0x29
    1d7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	0c f0       	brlt	.+2      	; 0x1d92 <GLCD_Command+0xb0>
    1d90:	7b c0       	rjmp	.+246    	; 0x1e88 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1d92:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d94:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8c a3       	std	Y+36, r24	; 0x24
    1dac:	9d a3       	std	Y+37, r25	; 0x25
    1dae:	ae a3       	std	Y+38, r26	; 0x26
    1db0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6c a1       	ldd	r22, Y+36	; 0x24
    1db4:	7d a1       	ldd	r23, Y+37	; 0x25
    1db6:	8e a1       	ldd	r24, Y+38	; 0x26
    1db8:	9f a1       	ldd	r25, Y+39	; 0x27
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	88 a3       	std	Y+32, r24	; 0x20
    1dcc:	99 a3       	std	Y+33, r25	; 0x21
    1dce:	aa a3       	std	Y+34, r26	; 0x22
    1dd0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1dd2:	68 a1       	ldd	r22, Y+32	; 0x20
    1dd4:	79 a1       	ldd	r23, Y+33	; 0x21
    1dd6:	8a a1       	ldd	r24, Y+34	; 0x22
    1dd8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <GLCD_Command+0x112>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9f 8f       	std	Y+31, r25	; 0x1f
    1df0:	8e 8f       	std	Y+30, r24	; 0x1e
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <GLCD_Command+0x190>
	else if (__tmp > 65535)
    1df4:	68 a1       	ldd	r22, Y+32	; 0x20
    1df6:	79 a1       	ldd	r23, Y+33	; 0x21
    1df8:	8a a1       	ldd	r24, Y+34	; 0x22
    1dfa:	9b a1       	ldd	r25, Y+35	; 0x23
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6c a1       	ldd	r22, Y+36	; 0x24
    1e0e:	7d a1       	ldd	r23, Y+37	; 0x25
    1e10:	8e a1       	ldd	r24, Y+38	; 0x26
    1e12:	9f a1       	ldd	r25, Y+39	; 0x27
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9f 8f       	std	Y+31, r25	; 0x1f
    1e32:	8e 8f       	std	Y+30, r24	; 0x1e
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <GLCD_Command+0x172>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9d 8f       	std	Y+29, r25	; 0x1d
    1e3c:	8c 8f       	std	Y+28, r24	; 0x1c
    1e3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <GLCD_Command+0x160>
    1e46:	9d 8f       	std	Y+29, r25	; 0x1d
    1e48:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9f 8f       	std	Y+31, r25	; 0x1f
    1e52:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e56:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <GLCD_Command+0x154>
    1e5c:	24 c0       	rjmp	.+72     	; 0x1ea6 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e60:	79 a1       	ldd	r23, Y+33	; 0x21
    1e62:	8a a1       	ldd	r24, Y+34	; 0x22
    1e64:	9b a1       	ldd	r25, Y+35	; 0x23
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e70:	8e 8f       	std	Y+30, r24	; 0x1e
    1e72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e76:	9b 8f       	std	Y+27, r25	; 0x1b
    1e78:	8a 8f       	std	Y+26, r24	; 0x1a
    1e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <GLCD_Command+0x19c>
    1e82:	9b 8f       	std	Y+27, r25	; 0x1b
    1e84:	8a 8f       	std	Y+26, r24	; 0x1a
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e88:	69 a5       	ldd	r22, Y+41	; 0x29
    1e8a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 a7       	std	Y+40, r24	; 0x28
    1e9a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e9c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9e:	89 8d       	ldd	r24, Y+25	; 0x19
    1ea0:	8a 95       	dec	r24
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <GLCD_Command+0x1be>
    1ea4:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    1ea6:	a5 e3       	ldi	r26, 0x35	; 53
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e5 e3       	ldi	r30, 0x35	; 53
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8b 7f       	andi	r24, 0xFB	; 251
    1eb2:	8c 93       	st	X, r24
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eba:	b0 e4       	ldi	r27, 0x40	; 64
    1ebc:	8d 8b       	std	Y+21, r24	; 0x15
    1ebe:	9e 8b       	std	Y+22, r25	; 0x16
    1ec0:	af 8b       	std	Y+23, r26	; 0x17
    1ec2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	2b ea       	ldi	r18, 0xAB	; 171
    1ece:	3a ea       	ldi	r19, 0xAA	; 170
    1ed0:	4a e2       	ldi	r20, 0x2A	; 42
    1ed2:	50 e4       	ldi	r21, 0x40	; 64
    1ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	89 8b       	std	Y+17, r24	; 0x11
    1ede:	9a 8b       	std	Y+18, r25	; 0x12
    1ee0:	ab 8b       	std	Y+19, r26	; 0x13
    1ee2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ee4:	69 89       	ldd	r22, Y+17	; 0x11
    1ee6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	1c f4       	brge	.+6      	; 0x1f02 <GLCD_Command+0x220>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	88 8b       	std	Y+16, r24	; 0x10
    1f00:	91 c0       	rjmp	.+290    	; 0x2024 <GLCD_Command+0x342>
	else if (__tmp > 255)
    1f02:	69 89       	ldd	r22, Y+17	; 0x11
    1f04:	7a 89       	ldd	r23, Y+18	; 0x12
    1f06:	8b 89       	ldd	r24, Y+19	; 0x13
    1f08:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	53 e4       	ldi	r21, 0x43	; 67
    1f12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	0c f0       	brlt	.+2      	; 0x1f1c <GLCD_Command+0x23a>
    1f1a:	7b c0       	rjmp	.+246    	; 0x2012 <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	4a e7       	ldi	r20, 0x7A	; 122
    1f2a:	54 e4       	ldi	r21, 0x44	; 68
    1f2c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	8c 87       	std	Y+12, r24	; 0x0c
    1f36:	9d 87       	std	Y+13, r25	; 0x0d
    1f38:	ae 87       	std	Y+14, r26	; 0x0e
    1f3a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a ef       	ldi	r20, 0xFA	; 250
    1f4a:	54 e4       	ldi	r21, 0x44	; 68
    1f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	88 87       	std	Y+8, r24	; 0x08
    1f56:	99 87       	std	Y+9, r25	; 0x09
    1f58:	aa 87       	std	Y+10, r26	; 0x0a
    1f5a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f5c:	68 85       	ldd	r22, Y+8	; 0x08
    1f5e:	79 85       	ldd	r23, Y+9	; 0x09
    1f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <GLCD_Command+0x29c>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9f 83       	std	Y+7, r25	; 0x07
    1f7a:	8e 83       	std	Y+6, r24	; 0x06
    1f7c:	3f c0       	rjmp	.+126    	; 0x1ffc <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    1f7e:	68 85       	ldd	r22, Y+8	; 0x08
    1f80:	79 85       	ldd	r23, Y+9	; 0x09
    1f82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	4c f5       	brge	.+82     	; 0x1fe8 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f98:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e2       	ldi	r20, 0x20	; 32
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9f 83       	std	Y+7, r25	; 0x07
    1fbc:	8e 83       	std	Y+6, r24	; 0x06
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <GLCD_Command+0x2fc>
    1fc0:	88 ec       	ldi	r24, 0xC8	; 200
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9d 83       	std	Y+5, r25	; 0x05
    1fc6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <GLCD_Command+0x2ea>
    1fd0:	9d 83       	std	Y+5, r25	; 0x05
    1fd2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9f 83       	std	Y+7, r25	; 0x07
    1fdc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <GLCD_Command+0x2de>
    1fe6:	24 c0       	rjmp	.+72     	; 0x2030 <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	68 85       	ldd	r22, Y+8	; 0x08
    1fea:	79 85       	ldd	r23, Y+9	; 0x09
    1fec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9f 83       	std	Y+7, r25	; 0x07
    1ffa:	8e 83       	std	Y+6, r24	; 0x06
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    2000:	9b 83       	std	Y+3, r25	; 0x03
    2002:	8a 83       	std	Y+2, r24	; 0x02
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <GLCD_Command+0x326>
    200c:	9b 83       	std	Y+3, r25	; 0x03
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2012:	69 89       	ldd	r22, Y+17	; 0x11
    2014:	7a 89       	ldd	r23, Y+18	; 0x12
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	88 8b       	std	Y+16, r24	; 0x10
    2024:	88 89       	ldd	r24, Y+16	; 0x10
    2026:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	8a 95       	dec	r24
    202c:	f1 f7       	brne	.-4      	; 0x202a <GLCD_Command+0x348>
    202e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    2030:	e1 96       	adiw	r28, 0x31	; 49
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <GLCD_Data>:

void GLCD_Data(char Data) /* GLCD data function */
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	e1 97       	sbiw	r28, 0x31	; 49
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Data;           /* Copy data on data pin */
    2058:	eb e3       	ldi	r30, 0x3B	; 59
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	89 a9       	ldd	r24, Y+49	; 0x31
    205e:	80 83       	st	Z, r24
    Command_Port |= (1 << RS);  /* Make RS HIGH to select data register */
    2060:	a5 e3       	ldi	r26, 0x35	; 53
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e5 e3       	ldi	r30, 0x35	; 53
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	81 60       	ori	r24, 0x01	; 1
    206c:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    206e:	a5 e3       	ldi	r26, 0x35	; 53
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e5 e3       	ldi	r30, 0x35	; 53
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8d 7f       	andi	r24, 0xFD	; 253
    207a:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    207c:	a5 e3       	ldi	r26, 0x35	; 53
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e5 e3       	ldi	r30, 0x35	; 53
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	84 60       	ori	r24, 0x04	; 4
    2088:	8c 93       	st	X, r24
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 ea       	ldi	r26, 0xA0	; 160
    2090:	b0 e4       	ldi	r27, 0x40	; 64
    2092:	8d a7       	std	Y+45, r24	; 0x2d
    2094:	9e a7       	std	Y+46, r25	; 0x2e
    2096:	af a7       	std	Y+47, r26	; 0x2f
    2098:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    209a:	6d a5       	ldd	r22, Y+45	; 0x2d
    209c:	7e a5       	ldd	r23, Y+46	; 0x2e
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	2b ea       	ldi	r18, 0xAB	; 171
    20a4:	3a ea       	ldi	r19, 0xAA	; 170
    20a6:	4a e2       	ldi	r20, 0x2A	; 42
    20a8:	50 e4       	ldi	r21, 0x40	; 64
    20aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	89 a7       	std	Y+41, r24	; 0x29
    20b4:	9a a7       	std	Y+42, r25	; 0x2a
    20b6:	ab a7       	std	Y+43, r26	; 0x2b
    20b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20ba:	69 a5       	ldd	r22, Y+41	; 0x29
    20bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    20be:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	1c f4       	brge	.+6      	; 0x20d8 <GLCD_Data+0x96>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	88 a7       	std	Y+40, r24	; 0x28
    20d6:	91 c0       	rjmp	.+290    	; 0x21fa <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    20d8:	69 a5       	ldd	r22, Y+41	; 0x29
    20da:	7a a5       	ldd	r23, Y+42	; 0x2a
    20dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20de:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	53 e4       	ldi	r21, 0x43	; 67
    20e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <GLCD_Data+0xb0>
    20f0:	7b c0       	rjmp	.+246    	; 0x21e8 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    20f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8c a3       	std	Y+36, r24	; 0x24
    210c:	9d a3       	std	Y+37, r25	; 0x25
    210e:	ae a3       	std	Y+38, r26	; 0x26
    2110:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6c a1       	ldd	r22, Y+36	; 0x24
    2114:	7d a1       	ldd	r23, Y+37	; 0x25
    2116:	8e a1       	ldd	r24, Y+38	; 0x26
    2118:	9f a1       	ldd	r25, Y+39	; 0x27
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	88 a3       	std	Y+32, r24	; 0x20
    212c:	99 a3       	std	Y+33, r25	; 0x21
    212e:	aa a3       	std	Y+34, r26	; 0x22
    2130:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2132:	68 a1       	ldd	r22, Y+32	; 0x20
    2134:	79 a1       	ldd	r23, Y+33	; 0x21
    2136:	8a a1       	ldd	r24, Y+34	; 0x22
    2138:	9b a1       	ldd	r25, Y+35	; 0x23
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <GLCD_Data+0x112>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9f 8f       	std	Y+31, r25	; 0x1f
    2150:	8e 8f       	std	Y+30, r24	; 0x1e
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <GLCD_Data+0x190>
	else if (__tmp > 65535)
    2154:	68 a1       	ldd	r22, Y+32	; 0x20
    2156:	79 a1       	ldd	r23, Y+33	; 0x21
    2158:	8a a1       	ldd	r24, Y+34	; 0x22
    215a:	9b a1       	ldd	r25, Y+35	; 0x23
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6c a1       	ldd	r22, Y+36	; 0x24
    216e:	7d a1       	ldd	r23, Y+37	; 0x25
    2170:	8e a1       	ldd	r24, Y+38	; 0x26
    2172:	9f a1       	ldd	r25, Y+39	; 0x27
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9f 8f       	std	Y+31, r25	; 0x1f
    2192:	8e 8f       	std	Y+30, r24	; 0x1e
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <GLCD_Data+0x172>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9d 8f       	std	Y+29, r25	; 0x1d
    219c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    219e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <GLCD_Data+0x160>
    21a6:	9d 8f       	std	Y+29, r25	; 0x1d
    21a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9f 8f       	std	Y+31, r25	; 0x1f
    21b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <GLCD_Data+0x154>
    21bc:	24 c0       	rjmp	.+72     	; 0x2206 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	68 a1       	ldd	r22, Y+32	; 0x20
    21c0:	79 a1       	ldd	r23, Y+33	; 0x21
    21c2:	8a a1       	ldd	r24, Y+34	; 0x22
    21c4:	9b a1       	ldd	r25, Y+35	; 0x23
    21c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9f 8f       	std	Y+31, r25	; 0x1f
    21d0:	8e 8f       	std	Y+30, r24	; 0x1e
    21d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21d6:	9b 8f       	std	Y+27, r25	; 0x1b
    21d8:	8a 8f       	std	Y+26, r24	; 0x1a
    21da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <GLCD_Data+0x19c>
    21e2:	9b 8f       	std	Y+27, r25	; 0x1b
    21e4:	8a 8f       	std	Y+26, r24	; 0x1a
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e8:	69 a5       	ldd	r22, Y+41	; 0x29
    21ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	88 a7       	std	Y+40, r24	; 0x28
    21fa:	88 a5       	ldd	r24, Y+40	; 0x28
    21fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2200:	8a 95       	dec	r24
    2202:	f1 f7       	brne	.-4      	; 0x2200 <GLCD_Data+0x1be>
    2204:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    2206:	a5 e3       	ldi	r26, 0x35	; 53
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e3       	ldi	r30, 0x35	; 53
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8b 7f       	andi	r24, 0xFB	; 251
    2212:	8c 93       	st	X, r24
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 ea       	ldi	r26, 0xA0	; 160
    221a:	b0 e4       	ldi	r27, 0x40	; 64
    221c:	8d 8b       	std	Y+21, r24	; 0x15
    221e:	9e 8b       	std	Y+22, r25	; 0x16
    2220:	af 8b       	std	Y+23, r26	; 0x17
    2222:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2224:	6d 89       	ldd	r22, Y+21	; 0x15
    2226:	7e 89       	ldd	r23, Y+22	; 0x16
    2228:	8f 89       	ldd	r24, Y+23	; 0x17
    222a:	98 8d       	ldd	r25, Y+24	; 0x18
    222c:	2b ea       	ldi	r18, 0xAB	; 171
    222e:	3a ea       	ldi	r19, 0xAA	; 170
    2230:	4a e2       	ldi	r20, 0x2A	; 42
    2232:	50 e4       	ldi	r21, 0x40	; 64
    2234:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	89 8b       	std	Y+17, r24	; 0x11
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	ab 8b       	std	Y+19, r26	; 0x13
    2242:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2244:	69 89       	ldd	r22, Y+17	; 0x11
    2246:	7a 89       	ldd	r23, Y+18	; 0x12
    2248:	8b 89       	ldd	r24, Y+19	; 0x13
    224a:	9c 89       	ldd	r25, Y+20	; 0x14
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	1c f4       	brge	.+6      	; 0x2262 <GLCD_Data+0x220>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	88 8b       	std	Y+16, r24	; 0x10
    2260:	91 c0       	rjmp	.+290    	; 0x2384 <GLCD_Data+0x342>
	else if (__tmp > 255)
    2262:	69 89       	ldd	r22, Y+17	; 0x11
    2264:	7a 89       	ldd	r23, Y+18	; 0x12
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	53 e4       	ldi	r21, 0x43	; 67
    2272:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	0c f0       	brlt	.+2      	; 0x227c <GLCD_Data+0x23a>
    227a:	7b c0       	rjmp	.+246    	; 0x2372 <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    227c:	6d 89       	ldd	r22, Y+21	; 0x15
    227e:	7e 89       	ldd	r23, Y+22	; 0x16
    2280:	8f 89       	ldd	r24, Y+23	; 0x17
    2282:	98 8d       	ldd	r25, Y+24	; 0x18
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8c 87       	std	Y+12, r24	; 0x0c
    2296:	9d 87       	std	Y+13, r25	; 0x0d
    2298:	ae 87       	std	Y+14, r26	; 0x0e
    229a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6c 85       	ldd	r22, Y+12	; 0x0c
    229e:	7d 85       	ldd	r23, Y+13	; 0x0d
    22a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	88 87       	std	Y+8, r24	; 0x08
    22b6:	99 87       	std	Y+9, r25	; 0x09
    22b8:	aa 87       	std	Y+10, r26	; 0x0a
    22ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22bc:	68 85       	ldd	r22, Y+8	; 0x08
    22be:	79 85       	ldd	r23, Y+9	; 0x09
    22c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <GLCD_Data+0x29c>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9f 83       	std	Y+7, r25	; 0x07
    22da:	8e 83       	std	Y+6, r24	; 0x06
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    22de:	68 85       	ldd	r22, Y+8	; 0x08
    22e0:	79 85       	ldd	r23, Y+9	; 0x09
    22e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    22fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    22fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9f 83       	std	Y+7, r25	; 0x07
    231c:	8e 83       	std	Y+6, r24	; 0x06
    231e:	0f c0       	rjmp	.+30     	; 0x233e <GLCD_Data+0x2fc>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9d 83       	std	Y+5, r25	; 0x05
    2326:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <GLCD_Data+0x2ea>
    2330:	9d 83       	std	Y+5, r25	; 0x05
    2332:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	9f 81       	ldd	r25, Y+7	; 0x07
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9f 83       	std	Y+7, r25	; 0x07
    233c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8e 81       	ldd	r24, Y+6	; 0x06
    2340:	9f 81       	ldd	r25, Y+7	; 0x07
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <GLCD_Data+0x2de>
    2346:	24 c0       	rjmp	.+72     	; 0x2390 <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	68 85       	ldd	r22, Y+8	; 0x08
    234a:	79 85       	ldd	r23, Y+9	; 0x09
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9f 83       	std	Y+7, r25	; 0x07
    235a:	8e 83       	std	Y+6, r24	; 0x06
    235c:	8e 81       	ldd	r24, Y+6	; 0x06
    235e:	9f 81       	ldd	r25, Y+7	; 0x07
    2360:	9b 83       	std	Y+3, r25	; 0x03
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <GLCD_Data+0x326>
    236c:	9b 83       	std	Y+3, r25	; 0x03
    236e:	8a 83       	std	Y+2, r24	; 0x02
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2372:	69 89       	ldd	r22, Y+17	; 0x11
    2374:	7a 89       	ldd	r23, Y+18	; 0x12
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	88 8b       	std	Y+16, r24	; 0x10
    2384:	88 89       	ldd	r24, Y+16	; 0x10
    2386:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	8a 95       	dec	r24
    238c:	f1 f7       	brne	.-4      	; 0x238a <GLCD_Data+0x348>
    238e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    2390:	e1 96       	adiw	r28, 0x31	; 49
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <GLCD_Init>:

void GLCD_Init() /* GLCD initialize function */
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	2e 97       	sbiw	r28, 0x0e	; 14
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    Data_Port_Dir = 0xFF;
    23b6:	ea e3       	ldi	r30, 0x3A	; 58
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	80 83       	st	Z, r24
    Command_Port_Dir = 0xFF;
    23be:	e4 e3       	ldi	r30, 0x34	; 52
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	80 83       	st	Z, r24
    /* Select both left & right half of display & Keep reset pin high */
    Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    23c6:	a5 e3       	ldi	r26, 0x35	; 53
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e5 e3       	ldi	r30, 0x35	; 53
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	88 63       	ori	r24, 0x38	; 56
    23d2:	8c 93       	st	X, r24
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a0 ea       	ldi	r26, 0xA0	; 160
    23da:	b1 e4       	ldi	r27, 0x41	; 65
    23dc:	8b 87       	std	Y+11, r24	; 0x0b
    23de:	9c 87       	std	Y+12, r25	; 0x0c
    23e0:	ad 87       	std	Y+13, r26	; 0x0d
    23e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	4a ef       	ldi	r20, 0xFA	; 250
    23f2:	54 e4       	ldi	r21, 0x44	; 68
    23f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	8f 83       	std	Y+7, r24	; 0x07
    23fe:	98 87       	std	Y+8, r25	; 0x08
    2400:	a9 87       	std	Y+9, r26	; 0x09
    2402:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	5f e3       	ldi	r21, 0x3F	; 63
    2414:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2418:	88 23       	and	r24, r24
    241a:	2c f4       	brge	.+10     	; 0x2426 <GLCD_Init+0x84>
		__ticks = 1;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	3f c0       	rjmp	.+126    	; 0x24a4 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	3f ef       	ldi	r19, 0xFF	; 255
    2432:	4f e7       	ldi	r20, 0x7F	; 127
    2434:	57 e4       	ldi	r21, 0x47	; 71
    2436:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    243a:	18 16       	cp	r1, r24
    243c:	4c f5       	brge	.+82     	; 0x2490 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e2       	ldi	r20, 0x20	; 32
    244c:	51 e4       	ldi	r21, 0x41	; 65
    244e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <GLCD_Init+0xe4>
    2468:	88 ec       	ldi	r24, 0xC8	; 200
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <GLCD_Init+0xd2>
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	69 f7       	brne	.-38     	; 0x2468 <GLCD_Init+0xc6>
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <GLCD_Init+0x10e>
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20);
    GLCD_Command(0x3E); /* Display OFF */
    24b8:	8e e3       	ldi	r24, 0x3E	; 62
    24ba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    GLCD_Command(0x40); /* Set Y address (column=0) */
    24be:	80 e4       	ldi	r24, 0x40	; 64
    24c0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    24c4:	88 eb       	ldi	r24, 0xB8	; 184
    24c6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    GLCD_Command(0xC0); /* Set z address (start line=0) */
    24ca:	80 ec       	ldi	r24, 0xC0	; 192
    24cc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    GLCD_Command(0x3F); /* Display ON */
    24d0:	8f e3       	ldi	r24, 0x3F	; 63
    24d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
}
    24d6:	2e 96       	adiw	r28, 0x0e	; 14
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <GLCD_ClearAll>:

void GLCD_ClearAll() /* GLCD all display clear function */
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <GLCD_ClearAll+0x6>
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <GLCD_ClearAll+0x8>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <GLCD_ClearAll+0xa>
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    24f6:	a5 e3       	ldi	r26, 0x35	; 53
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e5 e3       	ldi	r30, 0x35	; 53
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	80 61       	ori	r24, 0x10	; 16
    2502:	8c 93       	st	X, r24
    Command_Port &= ~(1 << CS1);
    2504:	a5 e3       	ldi	r26, 0x35	; 53
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e5 e3       	ldi	r30, 0x35	; 53
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	87 7f       	andi	r24, 0xF7	; 247
    2510:	8c 93       	st	X, r24
    for (int q = 0; q < 2; q++)
    2512:	1a 82       	std	Y+2, r1	; 0x02
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	34 c0       	rjmp	.+104    	; 0x2580 <GLCD_ClearAll+0x98>
    {
        for (i = 0; i < TotalPage; i++)
    2518:	1e 82       	std	Y+6, r1	; 0x06
    251a:	1d 82       	std	Y+5, r1	; 0x05
    251c:	19 c0       	rjmp	.+50     	; 0x2550 <GLCD_ClearAll+0x68>
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	88 54       	subi	r24, 0x48	; 72
    2522:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
            for (j = 0; j < 64; j++)
    2526:	1c 82       	std	Y+4, r1	; 0x04
    2528:	1b 82       	std	Y+3, r1	; 0x03
    252a:	08 c0       	rjmp	.+16     	; 0x253c <GLCD_ClearAll+0x54>
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
            for (j = 0; j < 64; j++)
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	8b 83       	std	Y+3, r24	; 0x03
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	80 34       	cpi	r24, 0x40	; 64
    2542:	91 05       	cpc	r25, r1
    2544:	9c f3       	brlt	.-26     	; 0x252c <GLCD_ClearAll+0x44>
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	88 30       	cpi	r24, 0x08	; 8
    2556:	91 05       	cpc	r25, r1
    2558:	14 f3       	brlt	.-60     	; 0x251e <GLCD_ClearAll+0x36>
            for (j = 0; j < 64; j++)
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
            }
        }
        Command_Port |= (1 << CS1);
    255a:	a5 e3       	ldi	r26, 0x35	; 53
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e5 e3       	ldi	r30, 0x35	; 53
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	88 60       	ori	r24, 0x08	; 8
    2566:	8c 93       	st	X, r24
        Command_Port &= ~(1 << CS2);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 7e       	andi	r24, 0xEF	; 239
    2574:	8c 93       	st	X, r24
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	82 30       	cpi	r24, 0x02	; 2
    2586:	91 05       	cpc	r25, r1
    2588:	3c f2       	brlt	.-114    	; 0x2518 <GLCD_ClearAll+0x30>
            }
        }
        Command_Port |= (1 << CS1);
        Command_Port &= ~(1 << CS2);
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    258a:	80 e4       	ldi	r24, 0x40	; 64
    258c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    2590:	88 eb       	ldi	r24, 0xB8	; 184
    2592:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
}
    2596:	26 96       	adiw	r28, 0x06	; 6
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <direction>:

void direction(dir d)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	89 83       	std	Y+1, r24	; 0x01
	if(d == left)
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 23       	and	r24, r24
    25b8:	79 f4       	brne	.+30     	; 0x25d8 <direction+0x30>
	{
		Command_Port |= (1 << CS2);
    25ba:	a5 e3       	ldi	r26, 0x35	; 53
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e3       	ldi	r30, 0x35	; 53
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 61       	ori	r24, 0x10	; 16
    25c6:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS1);
    25c8:	a5 e3       	ldi	r26, 0x35	; 53
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e3       	ldi	r30, 0x35	; 53
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	87 7f       	andi	r24, 0xF7	; 247
    25d4:	8c 93       	st	X, r24
    25d6:	0e c0       	rjmp	.+28     	; 0x25f4 <direction+0x4c>
	}
	else
	{
		Command_Port |= (1 << CS1);
    25d8:	a5 e3       	ldi	r26, 0x35	; 53
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e5 e3       	ldi	r30, 0x35	; 53
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	88 60       	ori	r24, 0x08	; 8
    25e4:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS2);
    25e6:	a5 e3       	ldi	r26, 0x35	; 53
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e5 e3       	ldi	r30, 0x35	; 53
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	8f 7e       	andi	r24, 0xEF	; 239
    25f2:	8c 93       	st	X, r24
	}
}
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <cursor_place>:

void cursor_place(int x, int y, dir d)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <cursor_place+0x6>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <cursor_place+0x8>
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	7c 83       	std	Y+4, r23	; 0x04
    2610:	6b 83       	std	Y+3, r22	; 0x03
    2612:	4d 83       	std	Y+5, r20	; 0x05
	direction(d);
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <direction>
	GLCD_Command((0x40) + x);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	80 5c       	subi	r24, 0xC0	; 192
    261e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
	GLCD_Command((0xB8) + y);
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	88 54       	subi	r24, 0x48	; 72
    2626:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <GLCD_String>:


void GLCD_String(char page_no, char *str, char line) /* GLCD string write function */
{
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	60 97       	sbiw	r28, 0x10	; 16
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	8d 87       	std	Y+13, r24	; 0x0d
    2654:	7f 87       	std	Y+15, r23	; 0x0f
    2656:	6e 87       	std	Y+14, r22	; 0x0e
    2658:	48 8b       	std	Y+16, r20	; 0x10
    unsigned int i, column;
    unsigned int Page = ((0xB8) + page_no);
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	88 54       	subi	r24, 0x48	; 72
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	98 87       	std	Y+8, r25	; 0x08
    2666:	8f 83       	std	Y+7, r24	; 0x07
    unsigned int Y_address = 0;
    2668:	1e 82       	std	Y+6, r1	; 0x06
    266a:	1d 82       	std	Y+5, r1	; 0x05
    float Page_inc = 0.5;
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	bf e3       	ldi	r27, 0x3F	; 63
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	ab 83       	std	Y+3, r26	; 0x03
    267a:	bc 83       	std	Y+4, r27	; 0x04

    direction(left); /* Select first Left half of display */
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <direction>

    GLCD_Command(Page);
    2682:	8f 81       	ldd	r24, Y+7	; 0x07
    2684:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    2688:	1c 86       	std	Y+12, r1	; 0x0c
    268a:	1b 86       	std	Y+11, r1	; 0x0b
    268c:	df c2       	rjmp	.+1470   	; 0x2c4c <GLCD_String+0x612>
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	96 95       	lsr	r25
    2696:	98 2f       	mov	r25, r24
    2698:	88 27       	eor	r24, r24
    269a:	97 95       	ror	r25
    269c:	87 95       	ror	r24
    269e:	90 95       	com	r25
    26a0:	81 95       	neg	r24
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	85 50       	subi	r24, 0x05	; 5
    26a6:	9c 4f       	sbci	r25, 0xFC	; 252
    26a8:	9c 01       	movw	r18, r24
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	28 17       	cp	r18, r24
    26b0:	39 07       	cpc	r19, r25
    26b2:	08 f4       	brcc	.+2      	; 0x26b6 <GLCD_String+0x7c>
    26b4:	d6 c2       	rjmp	.+1452   	; 0x2c62 <GLCD_String+0x628>
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
    26b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    26b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    26ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    26bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26be:	f9 01       	movw	r30, r18
    26c0:	e8 0f       	add	r30, r24
    26c2:	f9 1f       	adc	r31, r25
    26c4:	80 81       	ld	r24, Z
    26c6:	80 32       	cpi	r24, 0x20	; 32
    26c8:	09 f4       	brne	.+2      	; 0x26cc <GLCD_String+0x92>
    26ca:	80 c0       	rjmp	.+256    	; 0x27cc <GLCD_String+0x192>
        {
            for (column = 1; column <= FontWidth; column++)
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9a 87       	std	Y+10, r25	; 0x0a
    26d2:	89 87       	std	Y+9, r24	; 0x09
    26d4:	75 c0       	rjmp	.+234    	; 0x27c0 <GLCD_String+0x186>
            {
                if ((Y_address + column) == (128 * ((int)(Page_inc + 0.5)))) /* If yes then check whether it overflow from right side of display */
    26d6:	2d 81       	ldd	r18, Y+5	; 0x05
    26d8:	3e 81       	ldd	r19, Y+6	; 0x06
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	89 01       	movw	r16, r18
    26e0:	08 0f       	add	r16, r24
    26e2:	19 1f       	adc	r17, r25
    26e4:	69 81       	ldd	r22, Y+1	; 0x01
    26e6:	7a 81       	ldd	r23, Y+2	; 0x02
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	96 95       	lsr	r25
    270a:	98 2f       	mov	r25, r24
    270c:	88 27       	eor	r24, r24
    270e:	97 95       	ror	r25
    2710:	87 95       	ror	r24
    2712:	08 17       	cp	r16, r24
    2714:	19 07       	cpc	r17, r25
    2716:	09 f0       	breq	.+2      	; 0x271a <GLCD_String+0xe0>
    2718:	4e c0       	rjmp	.+156    	; 0x27b6 <GLCD_String+0x17c>
                {
                    if (column == FontWidth) /* Also check and break if it overflow after 5th column */
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	85 30       	cpi	r24, 0x05	; 5
    2720:	91 05       	cpc	r25, r1
    2722:	09 f4       	brne	.+2      	; 0x2726 <GLCD_String+0xec>
    2724:	53 c0       	rjmp	.+166    	; 0x27cc <GLCD_String+0x192>
                        break;
                    GLCD_Command(0x40);             /* If not 5th and get overflowed then change Y address to START column */
    2726:	80 e4       	ldi	r24, 0x40	; 64
    2728:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                    Y_address = Y_address + column; /* Increment Y address count by column no. */
    272c:	2d 81       	ldd	r18, Y+5	; 0x05
    272e:	3e 81       	ldd	r19, Y+6	; 0x06
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	82 0f       	add	r24, r18
    2736:	93 1f       	adc	r25, r19
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
                    Command_Port ^= (1 << CS1);     /* If yes then change segment controller to display on other half of display */
    273c:	a5 e3       	ldi	r26, 0x35	; 53
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e5 e3       	ldi	r30, 0x35	; 53
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	90 81       	ld	r25, Z
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	89 27       	eor	r24, r25
    274a:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    274c:	a5 e3       	ldi	r26, 0x35	; 53
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e5 e3       	ldi	r30, 0x35	; 53
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	90 81       	ld	r25, Z
    2756:	80 e1       	ldi	r24, 0x10	; 16
    2758:	89 27       	eor	r24, r25
    275a:	8c 93       	st	X, r24
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
    275c:	8f 81       	ldd	r24, Y+7	; 0x07
    275e:	98 85       	ldd	r25, Y+8	; 0x08
    2760:	cc 01       	movw	r24, r24
    2762:	a0 e0       	ldi	r26, 0x00	; 0
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	29 81       	ldd	r18, Y+1	; 0x01
    2778:	3a 81       	ldd	r19, Y+2	; 0x02
    277a:	4b 81       	ldd	r20, Y+3	; 0x03
    277c:	5c 81       	ldd	r21, Y+4	; 0x04
    277e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
    2796:	69 81       	ldd	r22, Y+1	; 0x01
    2798:	7a 81       	ldd	r23, Y+2	; 0x02
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	ab 83       	std	Y+3, r26	; 0x03
    27b4:	bc 83       	std	Y+4, r27	; 0x04
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
        {
            for (column = 1; column <= FontWidth; column++)
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	9a 87       	std	Y+10, r25	; 0x0a
    27be:	89 87       	std	Y+9, r24	; 0x09
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	86 30       	cpi	r24, 0x06	; 6
    27c6:	91 05       	cpc	r25, r1
    27c8:	08 f4       	brcc	.+2      	; 0x27cc <GLCD_String+0x192>
    27ca:	85 cf       	rjmp	.-246    	; 0x26d6 <GLCD_String+0x9c>
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
                }
            }
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
    27cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	96 95       	lsr	r25
    27d4:	98 2f       	mov	r25, r24
    27d6:	88 27       	eor	r24, r24
    27d8:	97 95       	ror	r25
    27da:	87 95       	ror	r24
    27dc:	90 95       	com	r25
    27de:	81 95       	neg	r24
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	85 50       	subi	r24, 0x05	; 5
    27e4:	9c 4f       	sbci	r25, 0xFC	; 252
    27e6:	9c 01       	movw	r18, r24
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	08 f4       	brcc	.+2      	; 0x27f4 <GLCD_String+0x1ba>
    27f2:	37 c2       	rjmp	.+1134   	; 0x2c62 <GLCD_String+0x628>
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
    27f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    27f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    27f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    27fc:	f9 01       	movw	r30, r18
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
    2802:	80 81       	ld	r24, Z
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	c9 01       	movw	r24, r18
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	82 0f       	add	r24, r18
    2810:	93 1f       	adc	r25, r19
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	82 0f       	add	r24, r18
    2820:	93 1f       	adc	r25, r19
    2822:	8c 50       	subi	r24, 0x0C	; 12
    2824:	93 40       	sbci	r25, 0x03	; 3
    2826:	84 52       	subi	r24, 0x24	; 36
    2828:	9e 4f       	sbci	r25, 0xFE	; 254
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	59 f0       	breq	.+22     	; 0x2844 <GLCD_String+0x20a>
    282e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2830:	3f 85       	ldd	r19, Y+15	; 0x0f
    2832:	8b 85       	ldd	r24, Y+11	; 0x0b
    2834:	9c 85       	ldd	r25, Y+12	; 0x0c
    2836:	f9 01       	movw	r30, r18
    2838:	e8 0f       	add	r30, r24
    283a:	f9 1f       	adc	r31, r25
    283c:	80 81       	ld	r24, Z
    283e:	80 32       	cpi	r24, 0x20	; 32
    2840:	09 f0       	breq	.+2      	; 0x2844 <GLCD_String+0x20a>
    2842:	76 c0       	rjmp	.+236    	; 0x2930 <GLCD_String+0x2f6>
        {
            for (column = 0; column < FontWidth; column++)
    2844:	1a 86       	std	Y+10, r1	; 0x0a
    2846:	19 86       	std	Y+9, r1	; 0x09
    2848:	6c c0       	rjmp	.+216    	; 0x2922 <GLCD_String+0x2e8>
            {
                GLCD_Data(font[str[i] - 32][column]); /* If yes then then print character */
    284a:	2e 85       	ldd	r18, Y+14	; 0x0e
    284c:	3f 85       	ldd	r19, Y+15	; 0x0f
    284e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2850:	9c 85       	ldd	r25, Y+12	; 0x0c
    2852:	f9 01       	movw	r30, r18
    2854:	e8 0f       	add	r30, r24
    2856:	f9 1f       	adc	r31, r25
    2858:	80 81       	ld	r24, Z
    285a:	88 2f       	mov	r24, r24
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c 01       	movw	r18, r24
    2860:	20 52       	subi	r18, 0x20	; 32
    2862:	30 40       	sbci	r19, 0x00	; 0
    2864:	49 85       	ldd	r20, Y+9	; 0x09
    2866:	5a 85       	ldd	r21, Y+10	; 0x0a
    2868:	c9 01       	movw	r24, r18
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	84 0f       	add	r24, r20
    2878:	95 1f       	adc	r25, r21
    287a:	fc 01       	movw	r30, r24
    287c:	e4 52       	subi	r30, 0x24	; 36
    287e:	fe 4f       	sbci	r31, 0xFE	; 254
    2880:	80 81       	ld	r24, Z
    2882:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	8f 73       	andi	r24, 0x3F	; 63
    288e:	90 70       	andi	r25, 0x00	; 0
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	e9 f5       	brne	.+122    	; 0x290e <GLCD_String+0x2d4>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2894:	a5 e3       	ldi	r26, 0x35	; 53
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e5 e3       	ldi	r30, 0x35	; 53
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	90 81       	ld	r25, Z
    289e:	88 e0       	ldi	r24, 0x08	; 8
    28a0:	89 27       	eor	r24, r25
    28a2:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    28a4:	a5 e3       	ldi	r26, 0x35	; 53
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e5 e3       	ldi	r30, 0x35	; 53
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	90 81       	ld	r25, Z
    28ae:	80 e1       	ldi	r24, 0x10	; 16
    28b0:	89 27       	eor	r24, r25
    28b2:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	98 85       	ldd	r25, Y+8	; 0x08
    28b8:	cc 01       	movw	r24, r24
    28ba:	a0 e0       	ldi	r26, 0x00	; 0
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	29 81       	ldd	r18, Y+1	; 0x01
    28d0:	3a 81       	ldd	r19, Y+2	; 0x02
    28d2:	4b 81       	ldd	r20, Y+3	; 0x03
    28d4:	5c 81       	ldd	r21, Y+4	; 0x04
    28d6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    28ee:	69 81       	ldd	r22, Y+1	; 0x01
    28f0:	7a 81       	ldd	r23, Y+2	; 0x02
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	ab 83       	std	Y+3, r26	; 0x03
    290c:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
        {
            for (column = 0; column < FontWidth; column++)
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	9a 87       	std	Y+10, r25	; 0x0a
    2920:	89 87       	std	Y+9, r24	; 0x09
    2922:	89 85       	ldd	r24, Y+9	; 0x09
    2924:	9a 85       	ldd	r25, Y+10	; 0x0a
    2926:	85 30       	cpi	r24, 0x05	; 5
    2928:	91 05       	cpc	r25, r1
    292a:	08 f4       	brcc	.+2      	; 0x292e <GLCD_String+0x2f4>
    292c:	8e cf       	rjmp	.-228    	; 0x284a <GLCD_String+0x210>
    292e:	89 c1       	rjmp	.+786    	; 0x2c42 <GLCD_String+0x608>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
                }
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else if(line) /* If character is not SPACE or character last column is not zero */
    2930:	88 89       	ldd	r24, Y+16	; 0x10
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <GLCD_String+0x2fe>
    2936:	c5 c0       	rjmp	.+394    	; 0x2ac2 <GLCD_String+0x488>
        {
            for (column = 0; column < FontWidth; column++)
    2938:	1a 86       	std	Y+10, r1	; 0x0a
    293a:	19 86       	std	Y+9, r1	; 0x09
    293c:	6c c0       	rjmp	.+216    	; 0x2a16 <GLCD_String+0x3dc>
            {
                GLCD_Data(font[str[i] - 32][column]); /* Then continue to print hat char */
    293e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2940:	3f 85       	ldd	r19, Y+15	; 0x0f
    2942:	8b 85       	ldd	r24, Y+11	; 0x0b
    2944:	9c 85       	ldd	r25, Y+12	; 0x0c
    2946:	f9 01       	movw	r30, r18
    2948:	e8 0f       	add	r30, r24
    294a:	f9 1f       	adc	r31, r25
    294c:	80 81       	ld	r24, Z
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9c 01       	movw	r18, r24
    2954:	20 52       	subi	r18, 0x20	; 32
    2956:	30 40       	sbci	r19, 0x00	; 0
    2958:	49 85       	ldd	r20, Y+9	; 0x09
    295a:	5a 85       	ldd	r21, Y+10	; 0x0a
    295c:	c9 01       	movw	r24, r18
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	82 0f       	add	r24, r18
    2968:	93 1f       	adc	r25, r19
    296a:	84 0f       	add	r24, r20
    296c:	95 1f       	adc	r25, r21
    296e:	fc 01       	movw	r30, r24
    2970:	e4 52       	subi	r30, 0x24	; 36
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	80 81       	ld	r24, Z
    2976:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	8f 73       	andi	r24, 0x3F	; 63
    2982:	90 70       	andi	r25, 0x00	; 0
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	e9 f5       	brne	.+122    	; 0x2a02 <GLCD_String+0x3c8>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2988:	a5 e3       	ldi	r26, 0x35	; 53
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e3       	ldi	r30, 0x35	; 53
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	90 81       	ld	r25, Z
    2992:	88 e0       	ldi	r24, 0x08	; 8
    2994:	89 27       	eor	r24, r25
    2996:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    2998:	a5 e3       	ldi	r26, 0x35	; 53
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e3       	ldi	r30, 0x35	; 53
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	90 81       	ld	r25, Z
    29a2:	80 e1       	ldi	r24, 0x10	; 16
    29a4:	89 27       	eor	r24, r25
    29a6:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    29a8:	8f 81       	ldd	r24, Y+7	; 0x07
    29aa:	98 85       	ldd	r25, Y+8	; 0x08
    29ac:	cc 01       	movw	r24, r24
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	29 81       	ldd	r18, Y+1	; 0x01
    29c4:	3a 81       	ldd	r19, Y+2	; 0x02
    29c6:	4b 81       	ldd	r20, Y+3	; 0x03
    29c8:	5c 81       	ldd	r21, Y+4	; 0x04
    29ca:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    29e2:	69 81       	ldd	r22, Y+1	; 0x01
    29e4:	7a 81       	ldd	r23, Y+2	; 0x02
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	ab 83       	std	Y+3, r26	; 0x03
    2a00:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else if(line) /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	9a 87       	std	Y+10, r25	; 0x0a
    2a14:	89 87       	std	Y+9, r24	; 0x09
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	85 30       	cpi	r24, 0x05	; 5
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	08 f4       	brcc	.+2      	; 0x2a22 <GLCD_String+0x3e8>
    2a20:	8e cf       	rjmp	.-228    	; 0x293e <GLCD_String+0x304>
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
                }
                Y_address++; /* Increment Y_address count per column */
            }
            if(!line)
    2a22:	88 89       	ldd	r24, Y+16	; 0x10
    2a24:	88 23       	and	r24, r24
    2a26:	19 f4       	brne	.+6      	; 0x2a2e <GLCD_String+0x3f4>
            	GLCD_Data(0);            /* Add one column of zero to print next character next of zero */
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
            Y_address++;               /* Increment Y_address count for last added zero */
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	01 96       	adiw	r24, 0x01	; 1
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
            if ((Y_address) % 64 == 0) /* check whether it gets overflowed  from either half of side */
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	8f 73       	andi	r24, 0x3F	; 63
    2a3e:	90 70       	andi	r25, 0x00	; 0
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <GLCD_String+0x40c>
    2a44:	fe c0       	rjmp	.+508    	; 0x2c42 <GLCD_String+0x608>
            {
                Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2a46:	a5 e3       	ldi	r26, 0x35	; 53
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e5 e3       	ldi	r30, 0x35	; 53
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	90 81       	ld	r25, Z
    2a50:	88 e0       	ldi	r24, 0x08	; 8
    2a52:	89 27       	eor	r24, r25
    2a54:	8c 93       	st	X, r24
                Command_Port ^= (1 << CS2);
    2a56:	a5 e3       	ldi	r26, 0x35	; 53
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e5 e3       	ldi	r30, 0x35	; 53
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	90 81       	ld	r25, Z
    2a60:	80 e1       	ldi	r24, 0x10	; 16
    2a62:	89 27       	eor	r24, r25
    2a64:	8c 93       	st	X, r24
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2a66:	8f 81       	ldd	r24, Y+7	; 0x07
    2a68:	98 85       	ldd	r25, Y+8	; 0x08
    2a6a:	cc 01       	movw	r24, r24
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	29 81       	ldd	r18, Y+1	; 0x01
    2a82:	3a 81       	ldd	r19, Y+2	; 0x02
    2a84:	4b 81       	ldd	r20, Y+3	; 0x03
    2a86:	5c 81       	ldd	r21, Y+4	; 0x04
    2a88:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2aa0:	69 81       	ldd	r22, Y+1	; 0x01
    2aa2:	7a 81       	ldd	r23, Y+2	; 0x02
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	ab 83       	std	Y+3, r26	; 0x03
    2abe:	bc 83       	std	Y+4, r27	; 0x04
    2ac0:	c0 c0       	rjmp	.+384    	; 0x2c42 <GLCD_String+0x608>
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    2ac2:	1a 86       	std	Y+10, r1	; 0x0a
    2ac4:	19 86       	std	Y+9, r1	; 0x09
    2ac6:	6c c0       	rjmp	.+216    	; 0x2ba0 <GLCD_String+0x566>
            {
                GLCD_Data(font[str[i] - 32][column]); /* Then continue to print hat char */
    2ac8:	2e 85       	ldd	r18, Y+14	; 0x0e
    2aca:	3f 85       	ldd	r19, Y+15	; 0x0f
    2acc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ace:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	e8 0f       	add	r30, r24
    2ad4:	f9 1f       	adc	r31, r25
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9c 01       	movw	r18, r24
    2ade:	20 52       	subi	r18, 0x20	; 32
    2ae0:	30 40       	sbci	r19, 0x00	; 0
    2ae2:	49 85       	ldd	r20, Y+9	; 0x09
    2ae4:	5a 85       	ldd	r21, Y+10	; 0x0a
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	82 0f       	add	r24, r18
    2af2:	93 1f       	adc	r25, r19
    2af4:	84 0f       	add	r24, r20
    2af6:	95 1f       	adc	r25, r21
    2af8:	fc 01       	movw	r30, r24
    2afa:	e4 52       	subi	r30, 0x24	; 36
    2afc:	fe 4f       	sbci	r31, 0xFE	; 254
    2afe:	80 81       	ld	r24, Z
    2b00:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	8f 73       	andi	r24, 0x3F	; 63
    2b0c:	90 70       	andi	r25, 0x00	; 0
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	e9 f5       	brne	.+122    	; 0x2b8c <GLCD_String+0x552>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2b12:	a5 e3       	ldi	r26, 0x35	; 53
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e5 e3       	ldi	r30, 0x35	; 53
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	90 81       	ld	r25, Z
    2b1c:	88 e0       	ldi	r24, 0x08	; 8
    2b1e:	89 27       	eor	r24, r25
    2b20:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    2b22:	a5 e3       	ldi	r26, 0x35	; 53
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e3       	ldi	r30, 0x35	; 53
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	90 81       	ld	r25, Z
    2b2c:	80 e1       	ldi	r24, 0x10	; 16
    2b2e:	89 27       	eor	r24, r25
    2b30:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2b32:	8f 81       	ldd	r24, Y+7	; 0x07
    2b34:	98 85       	ldd	r25, Y+8	; 0x08
    2b36:	cc 01       	movw	r24, r24
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	29 81       	ldd	r18, Y+1	; 0x01
    2b4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b50:	4b 81       	ldd	r20, Y+3	; 0x03
    2b52:	5c 81       	ldd	r21, Y+4	; 0x04
    2b54:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2b6c:	69 81       	ldd	r22, Y+1	; 0x01
    2b6e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	5f e3       	ldi	r21, 0x3F	; 63
    2b7c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	ab 83       	std	Y+3, r26	; 0x03
    2b8a:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    2b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	9a 87       	std	Y+10, r25	; 0x0a
    2b9e:	89 87       	std	Y+9, r24	; 0x09
    2ba0:	89 85       	ldd	r24, Y+9	; 0x09
    2ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba4:	85 30       	cpi	r24, 0x05	; 5
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	08 f4       	brcc	.+2      	; 0x2bac <GLCD_String+0x572>
    2baa:	8e cf       	rjmp	.-228    	; 0x2ac8 <GLCD_String+0x48e>
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
                }
                Y_address++; /* Increment Y_address count per column */
            }
            GLCD_Data(0);              /* Add one column of zero to print next character next of zero */
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
            Y_address++;               /* Increment Y_address count for last added zero */
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
            if ((Y_address) % 64 == 0) /* check whether it gets overflowed  from either half of side */
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	8f 73       	andi	r24, 0x3F	; 63
    2bc2:	90 70       	andi	r25, 0x00	; 0
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	e9 f5       	brne	.+122    	; 0x2c42 <GLCD_String+0x608>
            {
                Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2bc8:	a5 e3       	ldi	r26, 0x35	; 53
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e5 e3       	ldi	r30, 0x35	; 53
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	90 81       	ld	r25, Z
    2bd2:	88 e0       	ldi	r24, 0x08	; 8
    2bd4:	89 27       	eor	r24, r25
    2bd6:	8c 93       	st	X, r24
                Command_Port ^= (1 << CS2);
    2bd8:	a5 e3       	ldi	r26, 0x35	; 53
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e5 e3       	ldi	r30, 0x35	; 53
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	90 81       	ld	r25, Z
    2be2:	80 e1       	ldi	r24, 0x10	; 16
    2be4:	89 27       	eor	r24, r25
    2be6:	8c 93       	st	X, r24
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2be8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bea:	98 85       	ldd	r25, Y+8	; 0x08
    2bec:	cc 01       	movw	r24, r24
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	29 81       	ldd	r18, Y+1	; 0x01
    2c04:	3a 81       	ldd	r19, Y+2	; 0x02
    2c06:	4b 81       	ldd	r20, Y+3	; 0x03
    2c08:	5c 81       	ldd	r21, Y+4	; 0x04
    2c0a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2c22:	69 81       	ldd	r22, Y+1	; 0x01
    2c24:	7a 81       	ldd	r23, Y+2	; 0x02
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	ab 83       	std	Y+3, r26	; 0x03
    2c40:	bc 83       	std	Y+4, r27	; 0x04
    float Page_inc = 0.5;

    direction(left); /* Select first Left half of display */

    GLCD_Command(Page);
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    2c42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	8b 87       	std	Y+11, r24	; 0x0b
    2c4c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c4e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c52:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c54:	f9 01       	movw	r30, r18
    2c56:	e8 0f       	add	r30, r24
    2c58:	f9 1f       	adc	r31, r25
    2c5a:	80 81       	ld	r24, Z
    2c5c:	88 23       	and	r24, r24
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <GLCD_String+0x628>
    2c60:	16 cd       	rjmp	.-1492   	; 0x268e <GLCD_String+0x54>
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
            }
        }
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    2c62:	80 e4       	ldi	r24, 0x40	; 64
    2c64:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
}
    2c68:	60 96       	adiw	r28, 0x10	; 16
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <line>:


int line(axis a, int x, int y)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	29 97       	sbiw	r28, 0x09	; 9
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	7d 83       	std	Y+5, r23	; 0x05
    2c96:	6c 83       	std	Y+4, r22	; 0x04
    2c98:	5f 83       	std	Y+7, r21	; 0x07
    2c9a:	4e 83       	std	Y+6, r20	; 0x06
	int moves = 0;
    2c9c:	1a 82       	std	Y+2, r1	; 0x02
    2c9e:	19 82       	std	Y+1, r1	; 0x01

	GLCD_Command((0xB8) + y);
    2ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca2:	88 54       	subi	r24, 0x48	; 72
    2ca4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
	GLCD_Command((0x40) + x);
    2ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    2caa:	80 5c       	subi	r24, 0xC0	; 192
    2cac:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
	switch(a)
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	39 87       	std	Y+9, r19	; 0x09
    2cb8:	28 87       	std	Y+8, r18	; 0x08
    2cba:	88 85       	ldd	r24, Y+8	; 0x08
    2cbc:	99 85       	ldd	r25, Y+9	; 0x09
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	09 f1       	breq	.+66     	; 0x2d06 <line+0x88>
    2cc4:	28 85       	ldd	r18, Y+8	; 0x08
    2cc6:	39 85       	ldd	r19, Y+9	; 0x09
    2cc8:	22 30       	cpi	r18, 0x02	; 2
    2cca:	31 05       	cpc	r19, r1
    2ccc:	69 f1       	breq	.+90     	; 0x2d28 <line+0xaa>
    2cce:	88 85       	ldd	r24, Y+8	; 0x08
    2cd0:	99 85       	ldd	r25, Y+9	; 0x09
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	89 f5       	brne	.+98     	; 0x2d38 <line+0xba>
	{
	case h:
		GLCD_Data(0xff);
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
		GLCD_Command((0x40) + x);
    2cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cde:	80 5c       	subi	r24, 0xC0	; 192
    2ce0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
		GLCD_Command((0xB8)+ y  + 1);
    2ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce6:	87 54       	subi	r24, 0x47	; 71
    2ce8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
		GLCD_Data(0xff);
    2cec:	8f ef       	ldi	r24, 0xFF	; 255
    2cee:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
		GLCD_Command((0xB8)+ y);
    2cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf4:	88 54       	subi	r24, 0x48	; 72
    2cf6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
		moves++;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	19 c0       	rjmp	.+50     	; 0x2d38 <line+0xba>
		break;
	case vup:
		moves++;
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
		GLCD_Command((0xB8)+ y  + 1);
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	87 54       	subi	r24, 0x47	; 71
    2d14:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
		GLCD_Data(0x80);
    2d18:	80 e8       	ldi	r24, 0x80	; 128
    2d1a:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
		GLCD_Command((0xB8)+ y);
    2d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d20:	88 54       	subi	r24, 0x48	; 72
    2d22:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GLCD_Command>
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <line+0xba>
		break;
	case vdown:
		moves++;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	9a 83       	std	Y+2, r25	; 0x02
    2d30:	89 83       	std	Y+1, r24	; 0x01
		GLCD_Data(0x1);
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	0e 94 21 10 	call	0x2042	; 0x2042 <GLCD_Data>
		break;
	}
	return moves;
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d3c:	29 96       	adiw	r28, 0x09	; 9
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <get_firstline>:

char* get_firstline(int f, int cycle, char* space)
{
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	ce 58       	subi	r28, 0x8E	; 142
    2d5c:	d0 40       	sbci	r29, 0x00	; 0
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 57       	subi	r30, 0x77	; 119
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
    2d72:	fe 01       	movw	r30, r28
    2d74:	e5 57       	subi	r30, 0x75	; 117
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	71 83       	std	Z+1, r23	; 0x01
    2d7a:	60 83       	st	Z, r22
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e3 57       	subi	r30, 0x73	; 115
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	51 83       	std	Z+1, r21	; 0x01
    2d84:	40 83       	st	Z, r20
	char fstr[4];
	sprintf(fstr, "%d", f);
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <get_firstline+0x3a>
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <get_firstline+0x3c>
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <get_firstline+0x3e>
    2d8c:	ad b7       	in	r26, 0x3d	; 61
    2d8e:	be b7       	in	r27, 0x3e	; 62
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	ce 01       	movw	r24, r28
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	11 96       	adiw	r26, 0x01	; 1
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
    2d9c:	80 e6       	ldi	r24, 0x60	; 96
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	13 96       	adiw	r26, 0x03	; 3
    2da2:	9c 93       	st	X, r25
    2da4:	8e 93       	st	-X, r24
    2da6:	12 97       	sbiw	r26, 0x02	; 2
    2da8:	fe 01       	movw	r30, r28
    2daa:	e7 57       	subi	r30, 0x77	; 119
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	15 96       	adiw	r26, 0x05	; 5
    2db4:	9c 93       	st	X, r25
    2db6:	8e 93       	st	-X, r24
    2db8:	14 97       	sbiw	r26, 0x04	; 4
    2dba:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <sprintf>
    2dbe:	8d b7       	in	r24, 0x3d	; 61
    2dc0:	9e b7       	in	r25, 0x3e	; 62
    2dc2:	06 96       	adiw	r24, 0x06	; 6
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	9e bf       	out	0x3e, r25	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	8d bf       	out	0x3d, r24	; 61
	char cyclestr[4];
    sprintf(cyclestr, "%d", cycle);
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <get_firstline+0x82>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <get_firstline+0x84>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <get_firstline+0x86>
    2dd4:	ad b7       	in	r26, 0x3d	; 61
    2dd6:	be b7       	in	r27, 0x3e	; 62
    2dd8:	11 96       	adiw	r26, 0x01	; 1
    2dda:	ce 01       	movw	r24, r28
    2ddc:	05 96       	adiw	r24, 0x05	; 5
    2dde:	11 96       	adiw	r26, 0x01	; 1
    2de0:	9c 93       	st	X, r25
    2de2:	8e 93       	st	-X, r24
    2de4:	80 e6       	ldi	r24, 0x60	; 96
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	13 96       	adiw	r26, 0x03	; 3
    2dea:	9c 93       	st	X, r25
    2dec:	8e 93       	st	-X, r24
    2dee:	12 97       	sbiw	r26, 0x02	; 2
    2df0:	fe 01       	movw	r30, r28
    2df2:	e5 57       	subi	r30, 0x75	; 117
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	15 96       	adiw	r26, 0x05	; 5
    2dfc:	9c 93       	st	X, r25
    2dfe:	8e 93       	st	-X, r24
    2e00:	14 97       	sbiw	r26, 0x04	; 4
    2e02:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <sprintf>
    2e06:	ad b7       	in	r26, 0x3d	; 61
    2e08:	be b7       	in	r27, 0x3e	; 62
    2e0a:	16 96       	adiw	r26, 0x06	; 6
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	be bf       	out	0x3e, r27	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	ad bf       	out	0x3d, r26	; 61
	char firstLine[128] = "";
    2e16:	19 86       	std	Y+9, r1	; 0x09
    2e18:	1a 86       	std	Y+10, r1	; 0x0a
    2e1a:	1b 86       	std	Y+11, r1	; 0x0b
    2e1c:	1c 86       	std	Y+12, r1	; 0x0c
    2e1e:	8c e7       	ldi	r24, 0x7C	; 124
    2e20:	fe 01       	movw	r30, r28
    2e22:	3d 96       	adiw	r30, 0x0d	; 13
    2e24:	df 01       	movw	r26, r30
    2e26:	98 2f       	mov	r25, r24
    2e28:	1d 92       	st	X+, r1
    2e2a:	9a 95       	dec	r25
    2e2c:	e9 f7       	brne	.-6      	; 0x2e28 <get_firstline+0xda>
    strcat(firstLine, "F:");
    2e2e:	8e 01       	movw	r16, r28
    2e30:	07 5f       	subi	r16, 0xF7	; 247
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	ce 01       	movw	r24, r28
    2e36:	09 96       	adiw	r24, 0x09	; 9
    2e38:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <strlen>
    2e3c:	80 0f       	add	r24, r16
    2e3e:	91 1f       	adc	r25, r17
    2e40:	23 e6       	ldi	r18, 0x63	; 99
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	b9 01       	movw	r22, r18
    2e46:	43 e0       	ldi	r20, 0x03	; 3
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	0e 94 c8 1c 	call	0x3990	; 0x3990 <memcpy>
    strcat(firstLine, fstr);
    2e4e:	ce 01       	movw	r24, r28
    2e50:	09 96       	adiw	r24, 0x09	; 9
    2e52:	9e 01       	movw	r18, r28
    2e54:	2f 5f       	subi	r18, 0xFF	; 255
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	b9 01       	movw	r22, r18
    2e5a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    strcat(firstLine, " KHz");
    2e5e:	ce 01       	movw	r24, r28
    2e60:	09 96       	adiw	r24, 0x09	; 9
    2e62:	26 e6       	ldi	r18, 0x66	; 102
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	b9 01       	movw	r22, r18
    2e68:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    strcat(firstLine, space);
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	09 96       	adiw	r24, 0x09	; 9
    2e70:	fe 01       	movw	r30, r28
    2e72:	e3 57       	subi	r30, 0x73	; 115
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	20 81       	ld	r18, Z
    2e78:	31 81       	ldd	r19, Z+1	; 0x01
    2e7a:	b9 01       	movw	r22, r18
    2e7c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    strcat(firstLine, "Duty:");
    2e80:	ce 01       	movw	r24, r28
    2e82:	09 96       	adiw	r24, 0x09	; 9
    2e84:	2b e6       	ldi	r18, 0x6B	; 107
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	b9 01       	movw	r22, r18
    2e8a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    strcat(firstLine, cyclestr);
    2e8e:	ce 01       	movw	r24, r28
    2e90:	09 96       	adiw	r24, 0x09	; 9
    2e92:	9e 01       	movw	r18, r28
    2e94:	2b 5f       	subi	r18, 0xFB	; 251
    2e96:	3f 4f       	sbci	r19, 0xFF	; 255
    2e98:	b9 01       	movw	r22, r18
    2e9a:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    strcat(firstLine, "%");
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	09 96       	adiw	r24, 0x09	; 9
    2ea2:	21 e7       	ldi	r18, 0x71	; 113
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	b9 01       	movw	r22, r18
    2ea8:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    return firstLine;
    2eac:	ce 01       	movw	r24, r28
    2eae:	09 96       	adiw	r24, 0x09	; 9
}
    2eb0:	c2 57       	subi	r28, 0x72	; 114
    2eb2:	df 4f       	sbci	r29, 0xFF	; 255
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <main>:

int main(void)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	cf 59       	subi	r28, 0x9F	; 159
    2ed2:	d0 40       	sbci	r29, 0x00	; 0
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    int f = 0;
    2ede:	1e 82       	std	Y+6, r1	; 0x06
    2ee0:	1d 82       	std	Y+5, r1	; 0x05
    int cycle = 0;
    2ee2:	1c 82       	std	Y+4, r1	; 0x04
    2ee4:	1b 82       	std	Y+3, r1	; 0x03
    int x = 0;
    2ee6:	1a 82       	std	Y+2, r1	; 0x02
    2ee8:	19 82       	std	Y+1, r1	; 0x01
    char space[20] = "    ";
    2eea:	ce 01       	movw	r24, r28
    2eec:	07 96       	adiw	r24, 0x07	; 7
    2eee:	c5 56       	subi	r28, 0x65	; 101
    2ef0:	df 4f       	sbci	r29, 0xFF	; 255
    2ef2:	99 83       	std	Y+1, r25	; 0x01
    2ef4:	88 83       	st	Y, r24
    2ef6:	cb 59       	subi	r28, 0x9B	; 155
    2ef8:	d0 40       	sbci	r29, 0x00	; 0
    2efa:	a0 e8       	ldi	r26, 0x80	; 128
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	c3 56       	subi	r28, 0x63	; 99
    2f00:	df 4f       	sbci	r29, 0xFF	; 255
    2f02:	b9 83       	std	Y+1, r27	; 0x01
    2f04:	a8 83       	st	Y, r26
    2f06:	cd 59       	subi	r28, 0x9D	; 157
    2f08:	d0 40       	sbci	r29, 0x00	; 0
    2f0a:	b5 e0       	ldi	r27, 0x05	; 5
    2f0c:	c1 56       	subi	r28, 0x61	; 97
    2f0e:	df 4f       	sbci	r29, 0xFF	; 255
    2f10:	b8 83       	st	Y, r27
    2f12:	cf 59       	subi	r28, 0x9F	; 159
    2f14:	d0 40       	sbci	r29, 0x00	; 0
    2f16:	c3 56       	subi	r28, 0x63	; 99
    2f18:	df 4f       	sbci	r29, 0xFF	; 255
    2f1a:	e8 81       	ld	r30, Y
    2f1c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f1e:	cd 59       	subi	r28, 0x9D	; 157
    2f20:	d0 40       	sbci	r29, 0x00	; 0
    2f22:	00 80       	ld	r0, Z
    2f24:	c3 56       	subi	r28, 0x63	; 99
    2f26:	df 4f       	sbci	r29, 0xFF	; 255
    2f28:	88 81       	ld	r24, Y
    2f2a:	99 81       	ldd	r25, Y+1	; 0x01
    2f2c:	cd 59       	subi	r28, 0x9D	; 157
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	c3 56       	subi	r28, 0x63	; 99
    2f34:	df 4f       	sbci	r29, 0xFF	; 255
    2f36:	99 83       	std	Y+1, r25	; 0x01
    2f38:	88 83       	st	Y, r24
    2f3a:	cd 59       	subi	r28, 0x9D	; 157
    2f3c:	d0 40       	sbci	r29, 0x00	; 0
    2f3e:	c5 56       	subi	r28, 0x65	; 101
    2f40:	df 4f       	sbci	r29, 0xFF	; 255
    2f42:	a8 81       	ld	r26, Y
    2f44:	b9 81       	ldd	r27, Y+1	; 0x01
    2f46:	cb 59       	subi	r28, 0x9B	; 155
    2f48:	d0 40       	sbci	r29, 0x00	; 0
    2f4a:	0c 92       	st	X, r0
    2f4c:	c5 56       	subi	r28, 0x65	; 101
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	e8 81       	ld	r30, Y
    2f52:	f9 81       	ldd	r31, Y+1	; 0x01
    2f54:	cb 59       	subi	r28, 0x9B	; 155
    2f56:	d0 40       	sbci	r29, 0x00	; 0
    2f58:	31 96       	adiw	r30, 0x01	; 1
    2f5a:	c5 56       	subi	r28, 0x65	; 101
    2f5c:	df 4f       	sbci	r29, 0xFF	; 255
    2f5e:	f9 83       	std	Y+1, r31	; 0x01
    2f60:	e8 83       	st	Y, r30
    2f62:	cb 59       	subi	r28, 0x9B	; 155
    2f64:	d0 40       	sbci	r29, 0x00	; 0
    2f66:	c1 56       	subi	r28, 0x61	; 97
    2f68:	df 4f       	sbci	r29, 0xFF	; 255
    2f6a:	f8 81       	ld	r31, Y
    2f6c:	cf 59       	subi	r28, 0x9F	; 159
    2f6e:	d0 40       	sbci	r29, 0x00	; 0
    2f70:	f1 50       	subi	r31, 0x01	; 1
    2f72:	c1 56       	subi	r28, 0x61	; 97
    2f74:	df 4f       	sbci	r29, 0xFF	; 255
    2f76:	f8 83       	st	Y, r31
    2f78:	cf 59       	subi	r28, 0x9F	; 159
    2f7a:	d0 40       	sbci	r29, 0x00	; 0
    2f7c:	c1 56       	subi	r28, 0x61	; 97
    2f7e:	df 4f       	sbci	r29, 0xFF	; 255
    2f80:	88 81       	ld	r24, Y
    2f82:	cf 59       	subi	r28, 0x9F	; 159
    2f84:	d0 40       	sbci	r29, 0x00	; 0
    2f86:	88 23       	and	r24, r24
    2f88:	31 f6       	brne	.-116    	; 0x2f16 <main+0x4e>
    2f8a:	8f e0       	ldi	r24, 0x0F	; 15
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	3c 96       	adiw	r30, 0x0c	; 12
    2f90:	df 01       	movw	r26, r30
    2f92:	98 2f       	mov	r25, r24
    2f94:	1d 92       	st	X+, r1
    2f96:	9a 95       	dec	r25
    2f98:	e9 f7       	brne	.-6      	; 0x2f94 <main+0xcc>
    char firstLine[128];

    GLCD_Init();         /* Initialize GLCD */
    2f9a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <GLCD_Init>
    GLCD_ClearAll();     /* Clear all GLCD display */
    2f9e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <GLCD_ClearAll>
    while (1)
    {
        strcat(' ', ' ');
    2fa2:	80 e2       	ldi	r24, 0x20	; 32
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	60 e2       	ldi	r22, 0x20	; 32
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <strcat>
    	strcpy(firstLine, get_firstline(f, cycle, space));
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fb6:	ae 01       	movw	r20, r28
    2fb8:	49 5f       	subi	r20, 0xF9	; 249
    2fba:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <get_firstline>
    2fc2:	9c 01       	movw	r18, r24
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	4b 96       	adiw	r24, 0x1b	; 27
    2fc8:	b9 01       	movw	r22, r18
    2fca:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <strcpy>
    	GLCD_String(0, firstLine, 0); /* Print String on 0th page of display */
    2fce:	9e 01       	movw	r18, r28
    2fd0:	25 5e       	subi	r18, 0xE5	; 229
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	b9 01       	movw	r22, r18
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 1d 13 	call	0x263a	; 0x263a <GLCD_String>
    	GLCD_String(5, "------------", 1);
    2fde:	23 e7       	ldi	r18, 0x73	; 115
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	85 e0       	ldi	r24, 0x05	; 5
    2fe4:	b9 01       	movw	r22, r18
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 1d 13 	call	0x263a	; 0x263a <GLCD_String>
    2fec:	da cf       	rjmp	.-76     	; 0x2fa2 <main+0xda>

00002fee <Dio_ConfigChannel>:
 *  Created on: Feb 12, 2022
 *      Author: 20100
 */
#include "Dio.h"
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <Dio_ConfigChannel+0x6>
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <Dio_ConfigChannel+0x8>
    2ff6:	0f 92       	push	r0
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	6a 83       	std	Y+2, r22	; 0x02
    3000:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	3d 83       	std	Y+5, r19	; 0x05
    300a:	2c 83       	std	Y+4, r18	; 0x04
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	9d 81       	ldd	r25, Y+5	; 0x05
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	91 05       	cpc	r25, r1
    3014:	09 f4       	brne	.+2      	; 0x3018 <Dio_ConfigChannel+0x2a>
    3016:	43 c0       	rjmp	.+134    	; 0x309e <Dio_ConfigChannel+0xb0>
    3018:	2c 81       	ldd	r18, Y+4	; 0x04
    301a:	3d 81       	ldd	r19, Y+5	; 0x05
    301c:	22 30       	cpi	r18, 0x02	; 2
    301e:	31 05       	cpc	r19, r1
    3020:	2c f4       	brge	.+10     	; 0x302c <Dio_ConfigChannel+0x3e>
    3022:	8c 81       	ldd	r24, Y+4	; 0x04
    3024:	9d 81       	ldd	r25, Y+5	; 0x05
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	71 f0       	breq	.+28     	; 0x3046 <Dio_ConfigChannel+0x58>
    302a:	bc c0       	rjmp	.+376    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
    302c:	2c 81       	ldd	r18, Y+4	; 0x04
    302e:	3d 81       	ldd	r19, Y+5	; 0x05
    3030:	22 30       	cpi	r18, 0x02	; 2
    3032:	31 05       	cpc	r19, r1
    3034:	09 f4       	brne	.+2      	; 0x3038 <Dio_ConfigChannel+0x4a>
    3036:	5f c0       	rjmp	.+190    	; 0x30f6 <Dio_ConfigChannel+0x108>
    3038:	8c 81       	ldd	r24, Y+4	; 0x04
    303a:	9d 81       	ldd	r25, Y+5	; 0x05
    303c:	83 30       	cpi	r24, 0x03	; 3
    303e:	91 05       	cpc	r25, r1
    3040:	09 f4       	brne	.+2      	; 0x3044 <Dio_ConfigChannel+0x56>
    3042:	85 c0       	rjmp	.+266    	; 0x314e <Dio_ConfigChannel+0x160>
    3044:	af c0       	rjmp	.+350    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction == INPUT)
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	88 23       	and	r24, r24
    304a:	a9 f4       	brne	.+42     	; 0x3076 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    304c:	aa e3       	ldi	r26, 0x3A	; 58
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	ea e3       	ldi	r30, 0x3A	; 58
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	48 2f       	mov	r20, r24
    3058:	8a 81       	ldd	r24, Y+2	; 0x02
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	02 2e       	mov	r0, r18
    3064:	02 c0       	rjmp	.+4      	; 0x306a <Dio_ConfigChannel+0x7c>
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	0a 94       	dec	r0
    306c:	e2 f7       	brpl	.-8      	; 0x3066 <Dio_ConfigChannel+0x78>
    306e:	80 95       	com	r24
    3070:	84 23       	and	r24, r20
    3072:	8c 93       	st	X, r24
    3074:	97 c0       	rjmp	.+302    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    3076:	aa e3       	ldi	r26, 0x3A	; 58
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	ea e3       	ldi	r30, 0x3A	; 58
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	48 2f       	mov	r20, r24
    3082:	8a 81       	ldd	r24, Y+2	; 0x02
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	02 2e       	mov	r0, r18
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <Dio_ConfigChannel+0xa6>
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	0a 94       	dec	r0
    3096:	e2 f7       	brpl	.-8      	; 0x3090 <Dio_ConfigChannel+0xa2>
    3098:	84 2b       	or	r24, r20
    309a:	8c 93       	st	X, r24
    309c:	83 c0       	rjmp	.+262    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction == INPUT)
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	88 23       	and	r24, r24
    30a2:	a9 f4       	brne	.+42     	; 0x30ce <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    30a4:	a7 e3       	ldi	r26, 0x37	; 55
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e7 e3       	ldi	r30, 0x37	; 55
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	48 2f       	mov	r20, r24
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	02 2e       	mov	r0, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <Dio_ConfigChannel+0xd4>
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	0a 94       	dec	r0
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <Dio_ConfigChannel+0xd0>
    30c6:	80 95       	com	r24
    30c8:	84 23       	and	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	6b c0       	rjmp	.+214    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    30ce:	a7 e3       	ldi	r26, 0x37	; 55
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e7 e3       	ldi	r30, 0x37	; 55
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	48 2f       	mov	r20, r24
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	02 2e       	mov	r0, r18
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <Dio_ConfigChannel+0xfe>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	0a 94       	dec	r0
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <Dio_ConfigChannel+0xfa>
    30f0:	84 2b       	or	r24, r20
    30f2:	8c 93       	st	X, r24
    30f4:	57 c0       	rjmp	.+174    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(direction == INPUT)
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	88 23       	and	r24, r24
    30fa:	a9 f4       	brne	.+42     	; 0x3126 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    30fc:	a4 e3       	ldi	r26, 0x34	; 52
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e4 e3       	ldi	r30, 0x34	; 52
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	48 2f       	mov	r20, r24
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	02 2e       	mov	r0, r18
    3114:	02 c0       	rjmp	.+4      	; 0x311a <Dio_ConfigChannel+0x12c>
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	0a 94       	dec	r0
    311c:	e2 f7       	brpl	.-8      	; 0x3116 <Dio_ConfigChannel+0x128>
    311e:	80 95       	com	r24
    3120:	84 23       	and	r24, r20
    3122:	8c 93       	st	X, r24
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    3126:	a4 e3       	ldi	r26, 0x34	; 52
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e4 e3       	ldi	r30, 0x34	; 52
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	48 2f       	mov	r20, r24
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	02 2e       	mov	r0, r18
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <Dio_ConfigChannel+0x156>
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	0a 94       	dec	r0
    3146:	e2 f7       	brpl	.-8      	; 0x3140 <Dio_ConfigChannel+0x152>
    3148:	84 2b       	or	r24, r20
    314a:	8c 93       	st	X, r24
    314c:	2b c0       	rjmp	.+86     	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(direction == INPUT)
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	88 23       	and	r24, r24
    3152:	a9 f4       	brne	.+42     	; 0x317e <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    3154:	a1 e3       	ldi	r26, 0x31	; 49
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e1 e3       	ldi	r30, 0x31	; 49
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	48 2f       	mov	r20, r24
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	02 2e       	mov	r0, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <Dio_ConfigChannel+0x184>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <Dio_ConfigChannel+0x180>
    3176:	80 95       	com	r24
    3178:	84 23       	and	r24, r20
    317a:	8c 93       	st	X, r24
    317c:	13 c0       	rjmp	.+38     	; 0x31a4 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    317e:	a1 e3       	ldi	r26, 0x31	; 49
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e1 e3       	ldi	r30, 0x31	; 49
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	48 2f       	mov	r20, r24
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	02 2e       	mov	r0, r18
    3196:	02 c0       	rjmp	.+4      	; 0x319c <Dio_ConfigChannel+0x1ae>
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	0a 94       	dec	r0
    319e:	e2 f7       	brpl	.-8      	; 0x3198 <Dio_ConfigChannel+0x1aa>
    31a0:	84 2b       	or	r24, r20
    31a2:	8c 93       	st	X, r24
		}
		break;
	}

}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <Dio_WriteChannel+0x6>
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <Dio_WriteChannel+0x8>
    31bc:	0f 92       	push	r0
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	6a 83       	std	Y+2, r22	; 0x02
    31c6:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	3d 83       	std	Y+5, r19	; 0x05
    31d0:	2c 83       	std	Y+4, r18	; 0x04
    31d2:	8c 81       	ldd	r24, Y+4	; 0x04
    31d4:	9d 81       	ldd	r25, Y+5	; 0x05
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	91 05       	cpc	r25, r1
    31da:	09 f4       	brne	.+2      	; 0x31de <Dio_WriteChannel+0x2a>
    31dc:	43 c0       	rjmp	.+134    	; 0x3264 <Dio_WriteChannel+0xb0>
    31de:	2c 81       	ldd	r18, Y+4	; 0x04
    31e0:	3d 81       	ldd	r19, Y+5	; 0x05
    31e2:	22 30       	cpi	r18, 0x02	; 2
    31e4:	31 05       	cpc	r19, r1
    31e6:	2c f4       	brge	.+10     	; 0x31f2 <Dio_WriteChannel+0x3e>
    31e8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ea:	9d 81       	ldd	r25, Y+5	; 0x05
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	71 f0       	breq	.+28     	; 0x320c <Dio_WriteChannel+0x58>
    31f0:	bc c0       	rjmp	.+376    	; 0x336a <Dio_WriteChannel+0x1b6>
    31f2:	2c 81       	ldd	r18, Y+4	; 0x04
    31f4:	3d 81       	ldd	r19, Y+5	; 0x05
    31f6:	22 30       	cpi	r18, 0x02	; 2
    31f8:	31 05       	cpc	r19, r1
    31fa:	09 f4       	brne	.+2      	; 0x31fe <Dio_WriteChannel+0x4a>
    31fc:	5f c0       	rjmp	.+190    	; 0x32bc <Dio_WriteChannel+0x108>
    31fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3200:	9d 81       	ldd	r25, Y+5	; 0x05
    3202:	83 30       	cpi	r24, 0x03	; 3
    3204:	91 05       	cpc	r25, r1
    3206:	09 f4       	brne	.+2      	; 0x320a <Dio_WriteChannel+0x56>
    3208:	85 c0       	rjmp	.+266    	; 0x3314 <Dio_WriteChannel+0x160>
    320a:	af c0       	rjmp	.+350    	; 0x336a <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level == STD_HIGH)
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	a1 f4       	brne	.+40     	; 0x323a <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    3212:	ab e3       	ldi	r26, 0x3B	; 59
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	eb e3       	ldi	r30, 0x3B	; 59
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	48 2f       	mov	r20, r24
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	02 2e       	mov	r0, r18
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <Dio_WriteChannel+0x7c>
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	0a 94       	dec	r0
    3232:	e2 f7       	brpl	.-8      	; 0x322c <Dio_WriteChannel+0x78>
    3234:	84 2b       	or	r24, r20
    3236:	8c 93       	st	X, r24
    3238:	98 c0       	rjmp	.+304    	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    323a:	ab e3       	ldi	r26, 0x3B	; 59
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	eb e3       	ldi	r30, 0x3B	; 59
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	48 2f       	mov	r20, r24
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	28 2f       	mov	r18, r24
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	02 2e       	mov	r0, r18
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <Dio_WriteChannel+0xa4>
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	0a 94       	dec	r0
    325a:	e2 f7       	brpl	.-8      	; 0x3254 <Dio_WriteChannel+0xa0>
    325c:	80 95       	com	r24
    325e:	84 23       	and	r24, r20
    3260:	8c 93       	st	X, r24
    3262:	83 c0       	rjmp	.+262    	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(level == STD_HIGH)
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	a1 f4       	brne	.+40     	; 0x3292 <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    326a:	a8 e3       	ldi	r26, 0x38	; 56
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	e8 e3       	ldi	r30, 0x38	; 56
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	48 2f       	mov	r20, r24
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	28 2f       	mov	r18, r24
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	02 2e       	mov	r0, r18
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <Dio_WriteChannel+0xd4>
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	0a 94       	dec	r0
    328a:	e2 f7       	brpl	.-8      	; 0x3284 <Dio_WriteChannel+0xd0>
    328c:	84 2b       	or	r24, r20
    328e:	8c 93       	st	X, r24
    3290:	6c c0       	rjmp	.+216    	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    3292:	a8 e3       	ldi	r26, 0x38	; 56
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e8 e3       	ldi	r30, 0x38	; 56
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	48 2f       	mov	r20, r24
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	02 2e       	mov	r0, r18
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <Dio_WriteChannel+0xfc>
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	0a 94       	dec	r0
    32b2:	e2 f7       	brpl	.-8      	; 0x32ac <Dio_WriteChannel+0xf8>
    32b4:	80 95       	com	r24
    32b6:	84 23       	and	r24, r20
    32b8:	8c 93       	st	X, r24
    32ba:	57 c0       	rjmp	.+174    	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(level == STD_HIGH)
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	81 30       	cpi	r24, 0x01	; 1
    32c0:	a1 f4       	brne	.+40     	; 0x32ea <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    32c2:	a5 e3       	ldi	r26, 0x35	; 53
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	e5 e3       	ldi	r30, 0x35	; 53
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	48 2f       	mov	r20, r24
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	28 2f       	mov	r18, r24
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	02 2e       	mov	r0, r18
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <Dio_WriteChannel+0x12c>
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	0a 94       	dec	r0
    32e2:	e2 f7       	brpl	.-8      	; 0x32dc <Dio_WriteChannel+0x128>
    32e4:	84 2b       	or	r24, r20
    32e6:	8c 93       	st	X, r24
    32e8:	40 c0       	rjmp	.+128    	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    32ea:	a5 e3       	ldi	r26, 0x35	; 53
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e5 e3       	ldi	r30, 0x35	; 53
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	48 2f       	mov	r20, r24
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	02 2e       	mov	r0, r18
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <Dio_WriteChannel+0x154>
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	0a 94       	dec	r0
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <Dio_WriteChannel+0x150>
    330c:	80 95       	com	r24
    330e:	84 23       	and	r24, r20
    3310:	8c 93       	st	X, r24
    3312:	2b c0       	rjmp	.+86     	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(level == STD_HIGH)
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	a1 f4       	brne	.+40     	; 0x3342 <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    331a:	a2 e3       	ldi	r26, 0x32	; 50
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e2 e3       	ldi	r30, 0x32	; 50
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <Dio_WriteChannel+0x184>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <Dio_WriteChannel+0x180>
    333c:	84 2b       	or	r24, r20
    333e:	8c 93       	st	X, r24
    3340:	14 c0       	rjmp	.+40     	; 0x336a <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    3342:	a2 e3       	ldi	r26, 0x32	; 50
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e2 e3       	ldi	r30, 0x32	; 50
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	48 2f       	mov	r20, r24
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	02 2e       	mov	r0, r18
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <Dio_WriteChannel+0x1ac>
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	0a 94       	dec	r0
    3362:	e2 f7       	brpl	.-8      	; 0x335c <Dio_WriteChannel+0x1a8>
    3364:	80 95       	com	r24
    3366:	84 23       	and	r24, r20
    3368:	8c 93       	st	X, r24
		}
		break;
	}
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <Dio_WriteGroup+0x6>
    3380:	00 d0       	rcall	.+0      	; 0x3382 <Dio_WriteGroup+0x8>
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	6a 83       	std	Y+2, r22	; 0x02
    338c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	3d 83       	std	Y+5, r19	; 0x05
    3396:	2c 83       	std	Y+4, r18	; 0x04
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	9d 81       	ldd	r25, Y+5	; 0x05
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	91 05       	cpc	r25, r1
    33a0:	59 f1       	breq	.+86     	; 0x33f8 <Dio_WriteGroup+0x7e>
    33a2:	2c 81       	ldd	r18, Y+4	; 0x04
    33a4:	3d 81       	ldd	r19, Y+5	; 0x05
    33a6:	22 30       	cpi	r18, 0x02	; 2
    33a8:	31 05       	cpc	r19, r1
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <Dio_WriteGroup+0x3c>
    33ac:	8c 81       	ldd	r24, Y+4	; 0x04
    33ae:	9d 81       	ldd	r25, Y+5	; 0x05
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	69 f0       	breq	.+26     	; 0x33ce <Dio_WriteGroup+0x54>
    33b4:	5f c0       	rjmp	.+190    	; 0x3474 <Dio_WriteGroup+0xfa>
    33b6:	2c 81       	ldd	r18, Y+4	; 0x04
    33b8:	3d 81       	ldd	r19, Y+5	; 0x05
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	89 f1       	breq	.+98     	; 0x3422 <Dio_WriteGroup+0xa8>
    33c0:	8c 81       	ldd	r24, Y+4	; 0x04
    33c2:	9d 81       	ldd	r25, Y+5	; 0x05
    33c4:	83 30       	cpi	r24, 0x03	; 3
    33c6:	91 05       	cpc	r25, r1
    33c8:	09 f4       	brne	.+2      	; 0x33cc <Dio_WriteGroup+0x52>
    33ca:	40 c0       	rjmp	.+128    	; 0x344c <Dio_WriteGroup+0xd2>
    33cc:	53 c0       	rjmp	.+166    	; 0x3474 <Dio_WriteGroup+0xfa>
	{
	case DIO_PORTA:

		DIO_PORTA_REG &= ~mask;
    33ce:	ab e3       	ldi	r26, 0x3B	; 59
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	eb e3       	ldi	r30, 0x3B	; 59
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	98 2f       	mov	r25, r24
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	80 95       	com	r24
    33de:	89 23       	and	r24, r25
    33e0:	8c 93       	st	X, r24
		DIO_PORTA_REG |= (data & mask);
    33e2:	ab e3       	ldi	r26, 0x3B	; 59
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	eb e3       	ldi	r30, 0x3B	; 59
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	20 81       	ld	r18, Z
    33ec:	9b 81       	ldd	r25, Y+3	; 0x03
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	89 23       	and	r24, r25
    33f2:	82 2b       	or	r24, r18
    33f4:	8c 93       	st	X, r24
    33f6:	3e c0       	rjmp	.+124    	; 0x3474 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG &= ~mask;
    33f8:	a8 e3       	ldi	r26, 0x38	; 56
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e8 e3       	ldi	r30, 0x38	; 56
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	98 2f       	mov	r25, r24
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	80 95       	com	r24
    3408:	89 23       	and	r24, r25
    340a:	8c 93       	st	X, r24
		DIO_PORTB_REG |= (data & mask);
    340c:	a8 e3       	ldi	r26, 0x38	; 56
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	e8 e3       	ldi	r30, 0x38	; 56
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	20 81       	ld	r18, Z
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	89 23       	and	r24, r25
    341c:	82 2b       	or	r24, r18
    341e:	8c 93       	st	X, r24
    3420:	29 c0       	rjmp	.+82     	; 0x3474 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG &= ~mask;
    3422:	a5 e3       	ldi	r26, 0x35	; 53
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e5 e3       	ldi	r30, 0x35	; 53
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	98 2f       	mov	r25, r24
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	80 95       	com	r24
    3432:	89 23       	and	r24, r25
    3434:	8c 93       	st	X, r24
		DIO_PORTC_REG |= (data & mask);
    3436:	a5 e3       	ldi	r26, 0x35	; 53
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e5 e3       	ldi	r30, 0x35	; 53
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	20 81       	ld	r18, Z
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	89 23       	and	r24, r25
    3446:	82 2b       	or	r24, r18
    3448:	8c 93       	st	X, r24
    344a:	14 c0       	rjmp	.+40     	; 0x3474 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG &= ~mask;
    344c:	a2 e3       	ldi	r26, 0x32	; 50
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e2 e3       	ldi	r30, 0x32	; 50
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	98 2f       	mov	r25, r24
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	80 95       	com	r24
    345c:	89 23       	and	r24, r25
    345e:	8c 93       	st	X, r24
		DIO_PORTD_REG |= (data & mask);
    3460:	a2 e3       	ldi	r26, 0x32	; 50
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	e2 e3       	ldi	r30, 0x32	; 50
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	20 81       	ld	r18, Z
    346a:	9b 81       	ldd	r25, Y+3	; 0x03
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	89 23       	and	r24, r25
    3470:	82 2b       	or	r24, r18
    3472:	8c 93       	st	X, r24
		break;
	}
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <Dio_ToggleChannel>:
void Dio_ToggleChannel(port_type port, pin_type pin)
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	00 d0       	rcall	.+0      	; 0x348a <Dio_ToggleChannel+0x6>
    348a:	00 d0       	rcall	.+0      	; 0x348c <Dio_ToggleChannel+0x8>
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	89 83       	std	Y+1, r24	; 0x01
    3492:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	3c 83       	std	Y+4, r19	; 0x04
    349c:	2b 83       	std	Y+3, r18	; 0x03
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	91 05       	cpc	r25, r1
    34a6:	49 f1       	breq	.+82     	; 0x34fa <Dio_ToggleChannel+0x76>
    34a8:	2b 81       	ldd	r18, Y+3	; 0x03
    34aa:	3c 81       	ldd	r19, Y+4	; 0x04
    34ac:	22 30       	cpi	r18, 0x02	; 2
    34ae:	31 05       	cpc	r19, r1
    34b0:	2c f4       	brge	.+10     	; 0x34bc <Dio_ToggleChannel+0x38>
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	61 f0       	breq	.+24     	; 0x34d2 <Dio_ToggleChannel+0x4e>
    34ba:	5a c0       	rjmp	.+180    	; 0x3570 <Dio_ToggleChannel+0xec>
    34bc:	2b 81       	ldd	r18, Y+3	; 0x03
    34be:	3c 81       	ldd	r19, Y+4	; 0x04
    34c0:	22 30       	cpi	r18, 0x02	; 2
    34c2:	31 05       	cpc	r19, r1
    34c4:	71 f1       	breq	.+92     	; 0x3522 <Dio_ToggleChannel+0x9e>
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ca:	83 30       	cpi	r24, 0x03	; 3
    34cc:	91 05       	cpc	r25, r1
    34ce:	e9 f1       	breq	.+122    	; 0x354a <Dio_ToggleChannel+0xc6>
    34d0:	4f c0       	rjmp	.+158    	; 0x3570 <Dio_ToggleChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    34d2:	ab e3       	ldi	r26, 0x3B	; 59
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	eb e3       	ldi	r30, 0x3B	; 59
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	48 2f       	mov	r20, r24
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	02 2e       	mov	r0, r18
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <Dio_ToggleChannel+0x6c>
    34ec:	88 0f       	add	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	0a 94       	dec	r0
    34f2:	e2 f7       	brpl	.-8      	; 0x34ec <Dio_ToggleChannel+0x68>
    34f4:	84 27       	eor	r24, r20
    34f6:	8c 93       	st	X, r24
    34f8:	3b c0       	rjmp	.+118    	; 0x3570 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    34fa:	a8 e3       	ldi	r26, 0x38	; 56
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e8 e3       	ldi	r30, 0x38	; 56
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	48 2f       	mov	r20, r24
    3506:	8a 81       	ldd	r24, Y+2	; 0x02
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	02 2e       	mov	r0, r18
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <Dio_ToggleChannel+0x94>
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	0a 94       	dec	r0
    351a:	e2 f7       	brpl	.-8      	; 0x3514 <Dio_ToggleChannel+0x90>
    351c:	84 27       	eor	r24, r20
    351e:	8c 93       	st	X, r24
    3520:	27 c0       	rjmp	.+78     	; 0x3570 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    3522:	a5 e3       	ldi	r26, 0x35	; 53
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e5 e3       	ldi	r30, 0x35	; 53
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	48 2f       	mov	r20, r24
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <Dio_ToggleChannel+0xbc>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <Dio_ToggleChannel+0xb8>
    3544:	84 27       	eor	r24, r20
    3546:	8c 93       	st	X, r24
    3548:	13 c0       	rjmp	.+38     	; 0x3570 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    354a:	a2 e3       	ldi	r26, 0x32	; 50
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e2 e3       	ldi	r30, 0x32	; 50
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	48 2f       	mov	r20, r24
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	02 2e       	mov	r0, r18
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <Dio_ToggleChannel+0xe4>
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	0a 94       	dec	r0
    356a:	e2 f7       	brpl	.-8      	; 0x3564 <Dio_ToggleChannel+0xe0>
    356c:	84 27       	eor	r24, r20
    356e:	8c 93       	st	X, r24
		break;
	}
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	00 d0       	rcall	.+0      	; 0x3584 <Dio_ReadChannel+0x6>
    3584:	00 d0       	rcall	.+0      	; 0x3586 <Dio_ReadChannel+0x8>
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	8a 83       	std	Y+2, r24	; 0x02
    358e:	6b 83       	std	Y+3, r22	; 0x03
	level_type res = STD_LOW;
    3590:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	3d 83       	std	Y+5, r19	; 0x05
    359a:	2c 83       	std	Y+4, r18	; 0x04
    359c:	4c 81       	ldd	r20, Y+4	; 0x04
    359e:	5d 81       	ldd	r21, Y+5	; 0x05
    35a0:	41 30       	cpi	r20, 0x01	; 1
    35a2:	51 05       	cpc	r21, r1
    35a4:	79 f1       	breq	.+94     	; 0x3604 <Dio_ReadChannel+0x86>
    35a6:	8c 81       	ldd	r24, Y+4	; 0x04
    35a8:	9d 81       	ldd	r25, Y+5	; 0x05
    35aa:	82 30       	cpi	r24, 0x02	; 2
    35ac:	91 05       	cpc	r25, r1
    35ae:	34 f4       	brge	.+12     	; 0x35bc <Dio_ReadChannel+0x3e>
    35b0:	2c 81       	ldd	r18, Y+4	; 0x04
    35b2:	3d 81       	ldd	r19, Y+5	; 0x05
    35b4:	21 15       	cp	r18, r1
    35b6:	31 05       	cpc	r19, r1
    35b8:	69 f0       	breq	.+26     	; 0x35d4 <Dio_ReadChannel+0x56>
    35ba:	6b c0       	rjmp	.+214    	; 0x3692 <Dio_ReadChannel+0x114>
    35bc:	4c 81       	ldd	r20, Y+4	; 0x04
    35be:	5d 81       	ldd	r21, Y+5	; 0x05
    35c0:	42 30       	cpi	r20, 0x02	; 2
    35c2:	51 05       	cpc	r21, r1
    35c4:	b9 f1       	breq	.+110    	; 0x3634 <Dio_ReadChannel+0xb6>
    35c6:	8c 81       	ldd	r24, Y+4	; 0x04
    35c8:	9d 81       	ldd	r25, Y+5	; 0x05
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	91 05       	cpc	r25, r1
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <Dio_ReadChannel+0x54>
    35d0:	49 c0       	rjmp	.+146    	; 0x3664 <Dio_ReadChannel+0xe6>
    35d2:	5f c0       	rjmp	.+190    	; 0x3692 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if (GET_BIT(DIO_PINA_REG,pin))
    35d4:	e9 e3       	ldi	r30, 0x39	; 57
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	28 2f       	mov	r18, r24
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	88 2f       	mov	r24, r24
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a9 01       	movw	r20, r18
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <Dio_ReadChannel+0x6e>
    35e8:	55 95       	asr	r21
    35ea:	47 95       	ror	r20
    35ec:	8a 95       	dec	r24
    35ee:	e2 f7       	brpl	.-8      	; 0x35e8 <Dio_ReadChannel+0x6a>
    35f0:	ca 01       	movw	r24, r20
    35f2:	81 70       	andi	r24, 0x01	; 1
    35f4:	90 70       	andi	r25, 0x00	; 0
    35f6:	88 23       	and	r24, r24
    35f8:	19 f0       	breq	.+6      	; 0x3600 <Dio_ReadChannel+0x82>
			res = STD_HIGH;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	49 c0       	rjmp	.+146    	; 0x3692 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3600:	19 82       	std	Y+1, r1	; 0x01
    3602:	47 c0       	rjmp	.+142    	; 0x3692 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTB:
		if (GET_BIT(DIO_PINB_REG,pin))
    3604:	e6 e3       	ldi	r30, 0x36	; 54
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	88 2f       	mov	r24, r24
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a9 01       	movw	r20, r18
    3616:	02 c0       	rjmp	.+4      	; 0x361c <Dio_ReadChannel+0x9e>
    3618:	55 95       	asr	r21
    361a:	47 95       	ror	r20
    361c:	8a 95       	dec	r24
    361e:	e2 f7       	brpl	.-8      	; 0x3618 <Dio_ReadChannel+0x9a>
    3620:	ca 01       	movw	r24, r20
    3622:	81 70       	andi	r24, 0x01	; 1
    3624:	90 70       	andi	r25, 0x00	; 0
    3626:	88 23       	and	r24, r24
    3628:	19 f0       	breq	.+6      	; 0x3630 <Dio_ReadChannel+0xb2>
			res = STD_HIGH;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	31 c0       	rjmp	.+98     	; 0x3692 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3630:	19 82       	std	Y+1, r1	; 0x01
    3632:	2f c0       	rjmp	.+94     	; 0x3692 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTC:
		if (GET_BIT(DIO_PINC_REG,pin))
    3634:	e3 e3       	ldi	r30, 0x33	; 51
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	8b 81       	ldd	r24, Y+3	; 0x03
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a9 01       	movw	r20, r18
    3646:	02 c0       	rjmp	.+4      	; 0x364c <Dio_ReadChannel+0xce>
    3648:	55 95       	asr	r21
    364a:	47 95       	ror	r20
    364c:	8a 95       	dec	r24
    364e:	e2 f7       	brpl	.-8      	; 0x3648 <Dio_ReadChannel+0xca>
    3650:	ca 01       	movw	r24, r20
    3652:	81 70       	andi	r24, 0x01	; 1
    3654:	90 70       	andi	r25, 0x00	; 0
    3656:	88 23       	and	r24, r24
    3658:	19 f0       	breq	.+6      	; 0x3660 <Dio_ReadChannel+0xe2>
			res = STD_HIGH;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	19 c0       	rjmp	.+50     	; 0x3692 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3660:	19 82       	std	Y+1, r1	; 0x01
    3662:	17 c0       	rjmp	.+46     	; 0x3692 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTD:
		if (GET_BIT(DIO_PIND_REG,pin))
    3664:	e0 e3       	ldi	r30, 0x30	; 48
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	88 2f       	mov	r24, r24
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	a9 01       	movw	r20, r18
    3676:	02 c0       	rjmp	.+4      	; 0x367c <Dio_ReadChannel+0xfe>
    3678:	55 95       	asr	r21
    367a:	47 95       	ror	r20
    367c:	8a 95       	dec	r24
    367e:	e2 f7       	brpl	.-8      	; 0x3678 <Dio_ReadChannel+0xfa>
    3680:	ca 01       	movw	r24, r20
    3682:	81 70       	andi	r24, 0x01	; 1
    3684:	90 70       	andi	r25, 0x00	; 0
    3686:	88 23       	and	r24, r24
    3688:	19 f0       	breq	.+6      	; 0x3690 <Dio_ReadChannel+0x112>
			res = STD_HIGH;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	01 c0       	rjmp	.+2      	; 0x3692 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3690:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return res;
    3692:	89 81       	ldd	r24, Y+1	; 0x01
}
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <BUZZER_Init>:
 *      Author: 20100
 */
#include "Buzzer.h"

void BUZZER_Init(void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	63 e0       	ldi	r22, 0x03	; 3
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
}
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <BUZZER_ON>:
void BUZZER_ON(void)
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_HIGH);
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	63 e0       	ldi	r22, 0x03	; 3
    36c8:	41 e0       	ldi	r20, 0x01	; 1
    36ca:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
}
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_LOW);
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	63 e0       	ldi	r22, 0x03	; 3
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Dio_WriteChannel>
}
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <BUZZER_TOGGLE>:
void BUZZER_TOGGLE(void)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
	Dio_ToggleChannel(BUZZER_PORT, BUZZER_PIN);
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	63 e0       	ldi	r22, 0x03	; 3
    36f8:	0e 94 42 1a 	call	0x3484	; 0x3484 <Dio_ToggleChannel>
}
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <Buzzer_GetStatus>:
buzzer_type Buzzer_GetStatus(void)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
	buzzer_type status = OFF;
    370c:	19 82       	std	Y+1, r1	; 0x01
	if(Dio_ReadChannel(BUZZER_PORT, BUZZER_PIN) == STD_HIGH)
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	63 e0       	ldi	r22, 0x03	; 3
    3712:	0e 94 bf 1a 	call	0x357e	; 0x357e <Dio_ReadChannel>
    3716:	81 30       	cpi	r24, 0x01	; 1
    3718:	19 f4       	brne	.+6      	; 0x3720 <Buzzer_GetStatus+0x1e>
	{
		status = ON;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	89 83       	std	Y+1, r24	; 0x01
    371e:	01 c0       	rjmp	.+2      	; 0x3722 <Buzzer_GetStatus+0x20>
	}
	else
	{
		status = OFF;
    3720:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
}
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <Button_Init>:
 */

#include "Button.h"

void Button_Init(void)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT, BUTTON0_PIN, INPUT);//BUTTON 0
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRB_REG,0);
	Dio_ConfigChannel(BUTTON1_PORT, BUTTON1_PIN, INPUT);//BUTTON 1
    373e:	83 e0       	ldi	r24, 0x03	; 3
    3740:	66 e0       	ldi	r22, 0x06	; 6
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,6);
	Dio_ConfigChannel(BUTTON2_PORT, BUTTON2_PIN, INPUT);//BUTTON 2
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	62 e0       	ldi	r22, 0x02	; 2
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,2);
}
    3752:	cf 91       	pop	r28
    3754:	df 91       	pop	r29
    3756:	08 95       	ret

00003758 <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	00 d0       	rcall	.+0      	; 0x375e <Button_GetStatus+0x6>
    375e:	00 d0       	rcall	.+0      	; 0x3760 <Button_GetStatus+0x8>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    3766:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	3c 83       	std	Y+4, r19	; 0x04
    3770:	2b 83       	std	Y+3, r18	; 0x03
    3772:	8b 81       	ldd	r24, Y+3	; 0x03
    3774:	9c 81       	ldd	r25, Y+4	; 0x04
    3776:	81 30       	cpi	r24, 0x01	; 1
    3778:	91 05       	cpc	r25, r1
    377a:	a1 f0       	breq	.+40     	; 0x37a4 <Button_GetStatus+0x4c>
    377c:	2b 81       	ldd	r18, Y+3	; 0x03
    377e:	3c 81       	ldd	r19, Y+4	; 0x04
    3780:	22 30       	cpi	r18, 0x02	; 2
    3782:	31 05       	cpc	r19, r1
    3784:	d1 f0       	breq	.+52     	; 0x37ba <Button_GetStatus+0x62>
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	9c 81       	ldd	r25, Y+4	; 0x04
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	01 f5       	brne	.+64     	; 0x37ce <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if(Dio_ReadChannel(BUTTON0_PORT, BUTTON0_PIN) == STD_HIGH)
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	0e 94 bf 1a 	call	0x357e	; 0x357e <Dio_ReadChannel>
    3796:	81 30       	cpi	r24, 0x01	; 1
    3798:	19 f4       	brne	.+6      	; 0x37a0 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	17 c0       	rjmp	.+46     	; 0x37ce <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    37a0:	19 82       	std	Y+1, r1	; 0x01
    37a2:	15 c0       	rjmp	.+42     	; 0x37ce <Button_GetStatus+0x76>
		}
		break;
	case BUTTON1:
		if(Dio_ReadChannel(BUTTON1_PORT, BUTTON1_PIN) == STD_HIGH)
    37a4:	83 e0       	ldi	r24, 0x03	; 3
    37a6:	66 e0       	ldi	r22, 0x06	; 6
    37a8:	0e 94 bf 1a 	call	0x357e	; 0x357e <Dio_ReadChannel>
    37ac:	81 30       	cpi	r24, 0x01	; 1
    37ae:	19 f4       	brne	.+6      	; 0x37b6 <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	0c c0       	rjmp	.+24     	; 0x37ce <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    37b6:	19 82       	std	Y+1, r1	; 0x01
    37b8:	0a c0       	rjmp	.+20     	; 0x37ce <Button_GetStatus+0x76>
		}
		break;
	case BUTTON2:
		if(Dio_ReadChannel(BUTTON2_PORT, BUTTON2_PIN) == STD_HIGH)
    37ba:	83 e0       	ldi	r24, 0x03	; 3
    37bc:	62 e0       	ldi	r22, 0x02	; 2
    37be:	0e 94 bf 1a 	call	0x357e	; 0x357e <Dio_ReadChannel>
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	19 f4       	brne	.+6      	; 0x37cc <Button_GetStatus+0x74>
		{
			status = PRESSED;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    37cc:	19 82       	std	Y+1, r1	; 0x01
		}
		break;


	}
	return status;
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <TIMER0_Init>:
 * Target	:  ATMEGA32
 * Author	:  Eng_Fawzi
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
    37e6:	e3 e5       	ldi	r30, 0x53	; 83
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	a3 e5       	ldi	r26, 0x53	; 83
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	8c 91       	ld	r24, X
    37f0:	80 83       	st	Z, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <TIMER0_Start>:
#if ((TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL) || (TIMER_OPERATION_MODE == TIMER0_MODE_CTC))
void TIMER0_Start(u8 prescaler)
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	0f 92       	push	r0
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCCR0_REG |=prescaler;
    3804:	a3 e5       	ldi	r26, 0x53	; 83
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	e3 e5       	ldi	r30, 0x53	; 83
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	90 81       	ld	r25, Z
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	89 2b       	or	r24, r25
    3812:	8c 93       	st	X, r24
}
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <TIMER0_Stop>:

void TIMER0_Stop(void)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0_REG &=0xFC;
    3824:	a3 e5       	ldi	r26, 0x53	; 83
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e3 e5       	ldi	r30, 0x53	; 83
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	8c 7f       	andi	r24, 0xFC	; 252
    3830:	8c 93       	st	X, r24
}
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 preLoadValue)
{
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	0f 92       	push	r0
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = preLoadValue;
    3844:	e2 e5       	ldi	r30, 0x52	; 82
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	80 83       	st	Z, r24
}
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <TIMER0_GetPreload>:
u8 TIMER0_GetPreload()
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
	return TIMER0_TCNT0_REG;
    385c:	e2 e5       	ldi	r30, 0x52	; 82
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
}
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <TIMER0_EnableInterrupt>:
void TIMER0_EnableInterrupt(void)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    3870:	a9 e5       	ldi	r26, 0x59	; 89
    3872:	b0 e0       	ldi	r27, 0x00	; 0
    3874:	e9 e5       	ldi	r30, 0x59	; 89
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	80 81       	ld	r24, Z
    387a:	81 60       	ori	r24, 0x01	; 1
    387c:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <TIMER0_DisableInterrupt>:
void TIMER0_DisableInterrupt(void)
{
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    388c:	a9 e5       	ldi	r26, 0x59	; 89
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e9 e5       	ldi	r30, 0x59	; 89
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	8e 7f       	andi	r24, 0xFE	; 254
    3898:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    389a:	cf 91       	pop	r28
    389c:	df 91       	pop	r29
    389e:	08 95       	ret

000038a0 <TIMER0_SetCompareValue>:
void TIMER0_SetCompareValue(u8 compareValue)
{
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	0f 92       	push	r0
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = compareValue;
    38ac:	ec e5       	ldi	r30, 0x5C	; 92
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	80 83       	st	Z, r24
}
    38b4:	0f 90       	pop	r0
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <__udivmodqi4>:
    38bc:	99 1b       	sub	r25, r25
    38be:	79 e0       	ldi	r23, 0x09	; 9
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <__udivmodqi4_ep>

000038c2 <__udivmodqi4_loop>:
    38c2:	99 1f       	adc	r25, r25
    38c4:	96 17       	cp	r25, r22
    38c6:	08 f0       	brcs	.+2      	; 0x38ca <__udivmodqi4_ep>
    38c8:	96 1b       	sub	r25, r22

000038ca <__udivmodqi4_ep>:
    38ca:	88 1f       	adc	r24, r24
    38cc:	7a 95       	dec	r23
    38ce:	c9 f7       	brne	.-14     	; 0x38c2 <__udivmodqi4_loop>
    38d0:	80 95       	com	r24
    38d2:	08 95       	ret

000038d4 <__udivmodhi4>:
    38d4:	aa 1b       	sub	r26, r26
    38d6:	bb 1b       	sub	r27, r27
    38d8:	51 e1       	ldi	r21, 0x11	; 17
    38da:	07 c0       	rjmp	.+14     	; 0x38ea <__udivmodhi4_ep>

000038dc <__udivmodhi4_loop>:
    38dc:	aa 1f       	adc	r26, r26
    38de:	bb 1f       	adc	r27, r27
    38e0:	a6 17       	cp	r26, r22
    38e2:	b7 07       	cpc	r27, r23
    38e4:	10 f0       	brcs	.+4      	; 0x38ea <__udivmodhi4_ep>
    38e6:	a6 1b       	sub	r26, r22
    38e8:	b7 0b       	sbc	r27, r23

000038ea <__udivmodhi4_ep>:
    38ea:	88 1f       	adc	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	5a 95       	dec	r21
    38f0:	a9 f7       	brne	.-22     	; 0x38dc <__udivmodhi4_loop>
    38f2:	80 95       	com	r24
    38f4:	90 95       	com	r25
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	08 95       	ret

000038fc <__divmodhi4>:
    38fc:	97 fb       	bst	r25, 7
    38fe:	09 2e       	mov	r0, r25
    3900:	07 26       	eor	r0, r23
    3902:	0a d0       	rcall	.+20     	; 0x3918 <__divmodhi4_neg1>
    3904:	77 fd       	sbrc	r23, 7
    3906:	04 d0       	rcall	.+8      	; 0x3910 <__divmodhi4_neg2>
    3908:	e5 df       	rcall	.-54     	; 0x38d4 <__udivmodhi4>
    390a:	06 d0       	rcall	.+12     	; 0x3918 <__divmodhi4_neg1>
    390c:	00 20       	and	r0, r0
    390e:	1a f4       	brpl	.+6      	; 0x3916 <__divmodhi4_exit>

00003910 <__divmodhi4_neg2>:
    3910:	70 95       	com	r23
    3912:	61 95       	neg	r22
    3914:	7f 4f       	sbci	r23, 0xFF	; 255

00003916 <__divmodhi4_exit>:
    3916:	08 95       	ret

00003918 <__divmodhi4_neg1>:
    3918:	f6 f7       	brtc	.-4      	; 0x3916 <__divmodhi4_exit>
    391a:	90 95       	com	r25
    391c:	81 95       	neg	r24
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	08 95       	ret

00003922 <__prologue_saves__>:
    3922:	2f 92       	push	r2
    3924:	3f 92       	push	r3
    3926:	4f 92       	push	r4
    3928:	5f 92       	push	r5
    392a:	6f 92       	push	r6
    392c:	7f 92       	push	r7
    392e:	8f 92       	push	r8
    3930:	9f 92       	push	r9
    3932:	af 92       	push	r10
    3934:	bf 92       	push	r11
    3936:	cf 92       	push	r12
    3938:	df 92       	push	r13
    393a:	ef 92       	push	r14
    393c:	ff 92       	push	r15
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
    394a:	ca 1b       	sub	r28, r26
    394c:	db 0b       	sbc	r29, r27
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	09 94       	ijmp

0000395a <__epilogue_restores__>:
    395a:	2a 88       	ldd	r2, Y+18	; 0x12
    395c:	39 88       	ldd	r3, Y+17	; 0x11
    395e:	48 88       	ldd	r4, Y+16	; 0x10
    3960:	5f 84       	ldd	r5, Y+15	; 0x0f
    3962:	6e 84       	ldd	r6, Y+14	; 0x0e
    3964:	7d 84       	ldd	r7, Y+13	; 0x0d
    3966:	8c 84       	ldd	r8, Y+12	; 0x0c
    3968:	9b 84       	ldd	r9, Y+11	; 0x0b
    396a:	aa 84       	ldd	r10, Y+10	; 0x0a
    396c:	b9 84       	ldd	r11, Y+9	; 0x09
    396e:	c8 84       	ldd	r12, Y+8	; 0x08
    3970:	df 80       	ldd	r13, Y+7	; 0x07
    3972:	ee 80       	ldd	r14, Y+6	; 0x06
    3974:	fd 80       	ldd	r15, Y+5	; 0x05
    3976:	0c 81       	ldd	r16, Y+4	; 0x04
    3978:	1b 81       	ldd	r17, Y+3	; 0x03
    397a:	aa 81       	ldd	r26, Y+2	; 0x02
    397c:	b9 81       	ldd	r27, Y+1	; 0x01
    397e:	ce 0f       	add	r28, r30
    3980:	d1 1d       	adc	r29, r1
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	ed 01       	movw	r28, r26
    398e:	08 95       	ret

00003990 <memcpy>:
    3990:	fb 01       	movw	r30, r22
    3992:	dc 01       	movw	r26, r24
    3994:	02 c0       	rjmp	.+4      	; 0x399a <memcpy+0xa>
    3996:	01 90       	ld	r0, Z+
    3998:	0d 92       	st	X+, r0
    399a:	41 50       	subi	r20, 0x01	; 1
    399c:	50 40       	sbci	r21, 0x00	; 0
    399e:	d8 f7       	brcc	.-10     	; 0x3996 <memcpy+0x6>
    39a0:	08 95       	ret

000039a2 <strcat>:
    39a2:	fb 01       	movw	r30, r22
    39a4:	dc 01       	movw	r26, r24
    39a6:	0d 90       	ld	r0, X+
    39a8:	00 20       	and	r0, r0
    39aa:	e9 f7       	brne	.-6      	; 0x39a6 <strcat+0x4>
    39ac:	11 97       	sbiw	r26, 0x01	; 1
    39ae:	01 90       	ld	r0, Z+
    39b0:	0d 92       	st	X+, r0
    39b2:	00 20       	and	r0, r0
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <strcat+0xc>
    39b6:	08 95       	ret

000039b8 <strcpy>:
    39b8:	fb 01       	movw	r30, r22
    39ba:	dc 01       	movw	r26, r24
    39bc:	01 90       	ld	r0, Z+
    39be:	0d 92       	st	X+, r0
    39c0:	00 20       	and	r0, r0
    39c2:	e1 f7       	brne	.-8      	; 0x39bc <strcpy+0x4>
    39c4:	08 95       	ret

000039c6 <strlen>:
    39c6:	fc 01       	movw	r30, r24
    39c8:	01 90       	ld	r0, Z+
    39ca:	00 20       	and	r0, r0
    39cc:	e9 f7       	brne	.-6      	; 0x39c8 <strlen+0x2>
    39ce:	80 95       	com	r24
    39d0:	90 95       	com	r25
    39d2:	8e 0f       	add	r24, r30
    39d4:	9f 1f       	adc	r25, r31
    39d6:	08 95       	ret

000039d8 <sprintf>:
    39d8:	ae e0       	ldi	r26, 0x0E	; 14
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e2 ef       	ldi	r30, 0xF2	; 242
    39de:	fc e1       	ldi	r31, 0x1C	; 28
    39e0:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__prologue_saves__+0x1c>
    39e4:	0d 89       	ldd	r16, Y+21	; 0x15
    39e6:	1e 89       	ldd	r17, Y+22	; 0x16
    39e8:	86 e0       	ldi	r24, 0x06	; 6
    39ea:	8c 83       	std	Y+4, r24	; 0x04
    39ec:	1a 83       	std	Y+2, r17	; 0x02
    39ee:	09 83       	std	Y+1, r16	; 0x01
    39f0:	8f ef       	ldi	r24, 0xFF	; 255
    39f2:	9f e7       	ldi	r25, 0x7F	; 127
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	8d 83       	std	Y+5, r24	; 0x05
    39f8:	9e 01       	movw	r18, r28
    39fa:	27 5e       	subi	r18, 0xE7	; 231
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	ce 01       	movw	r24, r28
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	6f 89       	ldd	r22, Y+23	; 0x17
    3a04:	78 8d       	ldd	r23, Y+24	; 0x18
    3a06:	a9 01       	movw	r20, r18
    3a08:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <vfprintf>
    3a0c:	2f 81       	ldd	r18, Y+7	; 0x07
    3a0e:	38 85       	ldd	r19, Y+8	; 0x08
    3a10:	02 0f       	add	r16, r18
    3a12:	13 1f       	adc	r17, r19
    3a14:	f8 01       	movw	r30, r16
    3a16:	10 82       	st	Z, r1
    3a18:	2e 96       	adiw	r28, 0x0e	; 14
    3a1a:	e4 e0       	ldi	r30, 0x04	; 4
    3a1c:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__epilogue_restores__+0x1c>

00003a20 <vfprintf>:
    3a20:	ab e0       	ldi	r26, 0x0B	; 11
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	e6 e1       	ldi	r30, 0x16	; 22
    3a26:	fd e1       	ldi	r31, 0x1D	; 29
    3a28:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__>
    3a2c:	3c 01       	movw	r6, r24
    3a2e:	2b 01       	movw	r4, r22
    3a30:	5a 01       	movw	r10, r20
    3a32:	fc 01       	movw	r30, r24
    3a34:	17 82       	std	Z+7, r1	; 0x07
    3a36:	16 82       	std	Z+6, r1	; 0x06
    3a38:	83 81       	ldd	r24, Z+3	; 0x03
    3a3a:	81 fd       	sbrc	r24, 1
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <vfprintf+0x24>
    3a3e:	6f ef       	ldi	r22, 0xFF	; 255
    3a40:	7f ef       	ldi	r23, 0xFF	; 255
    3a42:	c6 c1       	rjmp	.+908    	; 0x3dd0 <vfprintf+0x3b0>
    3a44:	9a e0       	ldi	r25, 0x0A	; 10
    3a46:	89 2e       	mov	r8, r25
    3a48:	1e 01       	movw	r2, r28
    3a4a:	08 94       	sec
    3a4c:	21 1c       	adc	r2, r1
    3a4e:	31 1c       	adc	r3, r1
    3a50:	f3 01       	movw	r30, r6
    3a52:	23 81       	ldd	r18, Z+3	; 0x03
    3a54:	f2 01       	movw	r30, r4
    3a56:	23 fd       	sbrc	r18, 3
    3a58:	85 91       	lpm	r24, Z+
    3a5a:	23 ff       	sbrs	r18, 3
    3a5c:	81 91       	ld	r24, Z+
    3a5e:	2f 01       	movw	r4, r30
    3a60:	88 23       	and	r24, r24
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <vfprintf+0x46>
    3a64:	b2 c1       	rjmp	.+868    	; 0x3dca <vfprintf+0x3aa>
    3a66:	85 32       	cpi	r24, 0x25	; 37
    3a68:	39 f4       	brne	.+14     	; 0x3a78 <vfprintf+0x58>
    3a6a:	23 fd       	sbrc	r18, 3
    3a6c:	85 91       	lpm	r24, Z+
    3a6e:	23 ff       	sbrs	r18, 3
    3a70:	81 91       	ld	r24, Z+
    3a72:	2f 01       	movw	r4, r30
    3a74:	85 32       	cpi	r24, 0x25	; 37
    3a76:	29 f4       	brne	.+10     	; 0x3a82 <vfprintf+0x62>
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	b3 01       	movw	r22, r6
    3a7c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3a80:	e7 cf       	rjmp	.-50     	; 0x3a50 <vfprintf+0x30>
    3a82:	98 2f       	mov	r25, r24
    3a84:	ff 24       	eor	r15, r15
    3a86:	ee 24       	eor	r14, r14
    3a88:	99 24       	eor	r9, r9
    3a8a:	ff e1       	ldi	r31, 0x1F	; 31
    3a8c:	ff 15       	cp	r31, r15
    3a8e:	d0 f0       	brcs	.+52     	; 0x3ac4 <vfprintf+0xa4>
    3a90:	9b 32       	cpi	r25, 0x2B	; 43
    3a92:	69 f0       	breq	.+26     	; 0x3aae <vfprintf+0x8e>
    3a94:	9c 32       	cpi	r25, 0x2C	; 44
    3a96:	28 f4       	brcc	.+10     	; 0x3aa2 <vfprintf+0x82>
    3a98:	90 32       	cpi	r25, 0x20	; 32
    3a9a:	59 f0       	breq	.+22     	; 0x3ab2 <vfprintf+0x92>
    3a9c:	93 32       	cpi	r25, 0x23	; 35
    3a9e:	91 f4       	brne	.+36     	; 0x3ac4 <vfprintf+0xa4>
    3aa0:	0e c0       	rjmp	.+28     	; 0x3abe <vfprintf+0x9e>
    3aa2:	9d 32       	cpi	r25, 0x2D	; 45
    3aa4:	49 f0       	breq	.+18     	; 0x3ab8 <vfprintf+0x98>
    3aa6:	90 33       	cpi	r25, 0x30	; 48
    3aa8:	69 f4       	brne	.+26     	; 0x3ac4 <vfprintf+0xa4>
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	24 c0       	rjmp	.+72     	; 0x3af6 <vfprintf+0xd6>
    3aae:	52 e0       	ldi	r21, 0x02	; 2
    3ab0:	f5 2a       	or	r15, r21
    3ab2:	84 e0       	ldi	r24, 0x04	; 4
    3ab4:	f8 2a       	or	r15, r24
    3ab6:	28 c0       	rjmp	.+80     	; 0x3b08 <vfprintf+0xe8>
    3ab8:	98 e0       	ldi	r25, 0x08	; 8
    3aba:	f9 2a       	or	r15, r25
    3abc:	25 c0       	rjmp	.+74     	; 0x3b08 <vfprintf+0xe8>
    3abe:	e0 e1       	ldi	r30, 0x10	; 16
    3ac0:	fe 2a       	or	r15, r30
    3ac2:	22 c0       	rjmp	.+68     	; 0x3b08 <vfprintf+0xe8>
    3ac4:	f7 fc       	sbrc	r15, 7
    3ac6:	29 c0       	rjmp	.+82     	; 0x3b1a <vfprintf+0xfa>
    3ac8:	89 2f       	mov	r24, r25
    3aca:	80 53       	subi	r24, 0x30	; 48
    3acc:	8a 30       	cpi	r24, 0x0A	; 10
    3ace:	70 f4       	brcc	.+28     	; 0x3aec <vfprintf+0xcc>
    3ad0:	f6 fe       	sbrs	r15, 6
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <vfprintf+0xbe>
    3ad4:	98 9c       	mul	r9, r8
    3ad6:	90 2c       	mov	r9, r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	98 0e       	add	r9, r24
    3adc:	15 c0       	rjmp	.+42     	; 0x3b08 <vfprintf+0xe8>
    3ade:	e8 9c       	mul	r14, r8
    3ae0:	e0 2c       	mov	r14, r0
    3ae2:	11 24       	eor	r1, r1
    3ae4:	e8 0e       	add	r14, r24
    3ae6:	f0 e2       	ldi	r31, 0x20	; 32
    3ae8:	ff 2a       	or	r15, r31
    3aea:	0e c0       	rjmp	.+28     	; 0x3b08 <vfprintf+0xe8>
    3aec:	9e 32       	cpi	r25, 0x2E	; 46
    3aee:	29 f4       	brne	.+10     	; 0x3afa <vfprintf+0xda>
    3af0:	f6 fc       	sbrc	r15, 6
    3af2:	6b c1       	rjmp	.+726    	; 0x3dca <vfprintf+0x3aa>
    3af4:	40 e4       	ldi	r20, 0x40	; 64
    3af6:	f4 2a       	or	r15, r20
    3af8:	07 c0       	rjmp	.+14     	; 0x3b08 <vfprintf+0xe8>
    3afa:	9c 36       	cpi	r25, 0x6C	; 108
    3afc:	19 f4       	brne	.+6      	; 0x3b04 <vfprintf+0xe4>
    3afe:	50 e8       	ldi	r21, 0x80	; 128
    3b00:	f5 2a       	or	r15, r21
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <vfprintf+0xe8>
    3b04:	98 36       	cpi	r25, 0x68	; 104
    3b06:	49 f4       	brne	.+18     	; 0x3b1a <vfprintf+0xfa>
    3b08:	f2 01       	movw	r30, r4
    3b0a:	23 fd       	sbrc	r18, 3
    3b0c:	95 91       	lpm	r25, Z+
    3b0e:	23 ff       	sbrs	r18, 3
    3b10:	91 91       	ld	r25, Z+
    3b12:	2f 01       	movw	r4, r30
    3b14:	99 23       	and	r25, r25
    3b16:	09 f0       	breq	.+2      	; 0x3b1a <vfprintf+0xfa>
    3b18:	b8 cf       	rjmp	.-144    	; 0x3a8a <vfprintf+0x6a>
    3b1a:	89 2f       	mov	r24, r25
    3b1c:	85 54       	subi	r24, 0x45	; 69
    3b1e:	83 30       	cpi	r24, 0x03	; 3
    3b20:	18 f0       	brcs	.+6      	; 0x3b28 <vfprintf+0x108>
    3b22:	80 52       	subi	r24, 0x20	; 32
    3b24:	83 30       	cpi	r24, 0x03	; 3
    3b26:	38 f4       	brcc	.+14     	; 0x3b36 <vfprintf+0x116>
    3b28:	44 e0       	ldi	r20, 0x04	; 4
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	a4 0e       	add	r10, r20
    3b2e:	b5 1e       	adc	r11, r21
    3b30:	5f e3       	ldi	r21, 0x3F	; 63
    3b32:	59 83       	std	Y+1, r21	; 0x01
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <vfprintf+0x134>
    3b36:	93 36       	cpi	r25, 0x63	; 99
    3b38:	31 f0       	breq	.+12     	; 0x3b46 <vfprintf+0x126>
    3b3a:	93 37       	cpi	r25, 0x73	; 115
    3b3c:	79 f0       	breq	.+30     	; 0x3b5c <vfprintf+0x13c>
    3b3e:	93 35       	cpi	r25, 0x53	; 83
    3b40:	09 f0       	breq	.+2      	; 0x3b44 <vfprintf+0x124>
    3b42:	56 c0       	rjmp	.+172    	; 0x3bf0 <vfprintf+0x1d0>
    3b44:	20 c0       	rjmp	.+64     	; 0x3b86 <vfprintf+0x166>
    3b46:	f5 01       	movw	r30, r10
    3b48:	80 81       	ld	r24, Z
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	42 e0       	ldi	r20, 0x02	; 2
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	a4 0e       	add	r10, r20
    3b52:	b5 1e       	adc	r11, r21
    3b54:	61 01       	movw	r12, r2
    3b56:	01 e0       	ldi	r16, 0x01	; 1
    3b58:	10 e0       	ldi	r17, 0x00	; 0
    3b5a:	12 c0       	rjmp	.+36     	; 0x3b80 <vfprintf+0x160>
    3b5c:	f5 01       	movw	r30, r10
    3b5e:	c0 80       	ld	r12, Z
    3b60:	d1 80       	ldd	r13, Z+1	; 0x01
    3b62:	f6 fc       	sbrc	r15, 6
    3b64:	03 c0       	rjmp	.+6      	; 0x3b6c <vfprintf+0x14c>
    3b66:	6f ef       	ldi	r22, 0xFF	; 255
    3b68:	7f ef       	ldi	r23, 0xFF	; 255
    3b6a:	02 c0       	rjmp	.+4      	; 0x3b70 <vfprintf+0x150>
    3b6c:	69 2d       	mov	r22, r9
    3b6e:	70 e0       	ldi	r23, 0x00	; 0
    3b70:	42 e0       	ldi	r20, 0x02	; 2
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	a4 0e       	add	r10, r20
    3b76:	b5 1e       	adc	r11, r21
    3b78:	c6 01       	movw	r24, r12
    3b7a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <strnlen>
    3b7e:	8c 01       	movw	r16, r24
    3b80:	5f e7       	ldi	r21, 0x7F	; 127
    3b82:	f5 22       	and	r15, r21
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <vfprintf+0x18e>
    3b86:	f5 01       	movw	r30, r10
    3b88:	c0 80       	ld	r12, Z
    3b8a:	d1 80       	ldd	r13, Z+1	; 0x01
    3b8c:	f6 fc       	sbrc	r15, 6
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <vfprintf+0x176>
    3b90:	6f ef       	ldi	r22, 0xFF	; 255
    3b92:	7f ef       	ldi	r23, 0xFF	; 255
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <vfprintf+0x17a>
    3b96:	69 2d       	mov	r22, r9
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	42 e0       	ldi	r20, 0x02	; 2
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	a4 0e       	add	r10, r20
    3ba0:	b5 1e       	adc	r11, r21
    3ba2:	c6 01       	movw	r24, r12
    3ba4:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <strnlen_P>
    3ba8:	8c 01       	movw	r16, r24
    3baa:	50 e8       	ldi	r21, 0x80	; 128
    3bac:	f5 2a       	or	r15, r21
    3bae:	f3 fe       	sbrs	r15, 3
    3bb0:	07 c0       	rjmp	.+14     	; 0x3bc0 <vfprintf+0x1a0>
    3bb2:	1a c0       	rjmp	.+52     	; 0x3be8 <vfprintf+0x1c8>
    3bb4:	80 e2       	ldi	r24, 0x20	; 32
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	b3 01       	movw	r22, r6
    3bba:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3bbe:	ea 94       	dec	r14
    3bc0:	8e 2d       	mov	r24, r14
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	08 17       	cp	r16, r24
    3bc6:	19 07       	cpc	r17, r25
    3bc8:	a8 f3       	brcs	.-22     	; 0x3bb4 <vfprintf+0x194>
    3bca:	0e c0       	rjmp	.+28     	; 0x3be8 <vfprintf+0x1c8>
    3bcc:	f6 01       	movw	r30, r12
    3bce:	f7 fc       	sbrc	r15, 7
    3bd0:	85 91       	lpm	r24, Z+
    3bd2:	f7 fe       	sbrs	r15, 7
    3bd4:	81 91       	ld	r24, Z+
    3bd6:	6f 01       	movw	r12, r30
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	b3 01       	movw	r22, r6
    3bdc:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3be0:	e1 10       	cpse	r14, r1
    3be2:	ea 94       	dec	r14
    3be4:	01 50       	subi	r16, 0x01	; 1
    3be6:	10 40       	sbci	r17, 0x00	; 0
    3be8:	01 15       	cp	r16, r1
    3bea:	11 05       	cpc	r17, r1
    3bec:	79 f7       	brne	.-34     	; 0x3bcc <vfprintf+0x1ac>
    3bee:	ea c0       	rjmp	.+468    	; 0x3dc4 <vfprintf+0x3a4>
    3bf0:	94 36       	cpi	r25, 0x64	; 100
    3bf2:	11 f0       	breq	.+4      	; 0x3bf8 <vfprintf+0x1d8>
    3bf4:	99 36       	cpi	r25, 0x69	; 105
    3bf6:	69 f5       	brne	.+90     	; 0x3c52 <vfprintf+0x232>
    3bf8:	f7 fe       	sbrs	r15, 7
    3bfa:	08 c0       	rjmp	.+16     	; 0x3c0c <vfprintf+0x1ec>
    3bfc:	f5 01       	movw	r30, r10
    3bfe:	20 81       	ld	r18, Z
    3c00:	31 81       	ldd	r19, Z+1	; 0x01
    3c02:	42 81       	ldd	r20, Z+2	; 0x02
    3c04:	53 81       	ldd	r21, Z+3	; 0x03
    3c06:	84 e0       	ldi	r24, 0x04	; 4
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0a c0       	rjmp	.+20     	; 0x3c20 <vfprintf+0x200>
    3c0c:	f5 01       	movw	r30, r10
    3c0e:	80 81       	ld	r24, Z
    3c10:	91 81       	ldd	r25, Z+1	; 0x01
    3c12:	9c 01       	movw	r18, r24
    3c14:	44 27       	eor	r20, r20
    3c16:	37 fd       	sbrc	r19, 7
    3c18:	40 95       	com	r20
    3c1a:	54 2f       	mov	r21, r20
    3c1c:	82 e0       	ldi	r24, 0x02	; 2
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	a8 0e       	add	r10, r24
    3c22:	b9 1e       	adc	r11, r25
    3c24:	9f e6       	ldi	r25, 0x6F	; 111
    3c26:	f9 22       	and	r15, r25
    3c28:	57 ff       	sbrs	r21, 7
    3c2a:	09 c0       	rjmp	.+18     	; 0x3c3e <vfprintf+0x21e>
    3c2c:	50 95       	com	r21
    3c2e:	40 95       	com	r20
    3c30:	30 95       	com	r19
    3c32:	21 95       	neg	r18
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	4f 4f       	sbci	r20, 0xFF	; 255
    3c38:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3a:	e0 e8       	ldi	r30, 0x80	; 128
    3c3c:	fe 2a       	or	r15, r30
    3c3e:	ca 01       	movw	r24, r20
    3c40:	b9 01       	movw	r22, r18
    3c42:	a1 01       	movw	r20, r2
    3c44:	2a e0       	ldi	r18, 0x0A	; 10
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__ultoa_invert>
    3c4c:	d8 2e       	mov	r13, r24
    3c4e:	d2 18       	sub	r13, r2
    3c50:	40 c0       	rjmp	.+128    	; 0x3cd2 <vfprintf+0x2b2>
    3c52:	95 37       	cpi	r25, 0x75	; 117
    3c54:	29 f4       	brne	.+10     	; 0x3c60 <vfprintf+0x240>
    3c56:	1f 2d       	mov	r17, r15
    3c58:	1f 7e       	andi	r17, 0xEF	; 239
    3c5a:	2a e0       	ldi	r18, 0x0A	; 10
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	1d c0       	rjmp	.+58     	; 0x3c9a <vfprintf+0x27a>
    3c60:	1f 2d       	mov	r17, r15
    3c62:	19 7f       	andi	r17, 0xF9	; 249
    3c64:	9f 36       	cpi	r25, 0x6F	; 111
    3c66:	61 f0       	breq	.+24     	; 0x3c80 <vfprintf+0x260>
    3c68:	90 37       	cpi	r25, 0x70	; 112
    3c6a:	20 f4       	brcc	.+8      	; 0x3c74 <vfprintf+0x254>
    3c6c:	98 35       	cpi	r25, 0x58	; 88
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <vfprintf+0x252>
    3c70:	ac c0       	rjmp	.+344    	; 0x3dca <vfprintf+0x3aa>
    3c72:	0f c0       	rjmp	.+30     	; 0x3c92 <vfprintf+0x272>
    3c74:	90 37       	cpi	r25, 0x70	; 112
    3c76:	39 f0       	breq	.+14     	; 0x3c86 <vfprintf+0x266>
    3c78:	98 37       	cpi	r25, 0x78	; 120
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <vfprintf+0x25e>
    3c7c:	a6 c0       	rjmp	.+332    	; 0x3dca <vfprintf+0x3aa>
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <vfprintf+0x268>
    3c80:	28 e0       	ldi	r18, 0x08	; 8
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	0a c0       	rjmp	.+20     	; 0x3c9a <vfprintf+0x27a>
    3c86:	10 61       	ori	r17, 0x10	; 16
    3c88:	14 fd       	sbrc	r17, 4
    3c8a:	14 60       	ori	r17, 0x04	; 4
    3c8c:	20 e1       	ldi	r18, 0x10	; 16
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	04 c0       	rjmp	.+8      	; 0x3c9a <vfprintf+0x27a>
    3c92:	14 fd       	sbrc	r17, 4
    3c94:	16 60       	ori	r17, 0x06	; 6
    3c96:	20 e1       	ldi	r18, 0x10	; 16
    3c98:	32 e0       	ldi	r19, 0x02	; 2
    3c9a:	17 ff       	sbrs	r17, 7
    3c9c:	08 c0       	rjmp	.+16     	; 0x3cae <vfprintf+0x28e>
    3c9e:	f5 01       	movw	r30, r10
    3ca0:	60 81       	ld	r22, Z
    3ca2:	71 81       	ldd	r23, Z+1	; 0x01
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	44 e0       	ldi	r20, 0x04	; 4
    3caa:	50 e0       	ldi	r21, 0x00	; 0
    3cac:	08 c0       	rjmp	.+16     	; 0x3cbe <vfprintf+0x29e>
    3cae:	f5 01       	movw	r30, r10
    3cb0:	80 81       	ld	r24, Z
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	42 e0       	ldi	r20, 0x02	; 2
    3cbc:	50 e0       	ldi	r21, 0x00	; 0
    3cbe:	a4 0e       	add	r10, r20
    3cc0:	b5 1e       	adc	r11, r21
    3cc2:	a1 01       	movw	r20, r2
    3cc4:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__ultoa_invert>
    3cc8:	d8 2e       	mov	r13, r24
    3cca:	d2 18       	sub	r13, r2
    3ccc:	8f e7       	ldi	r24, 0x7F	; 127
    3cce:	f8 2e       	mov	r15, r24
    3cd0:	f1 22       	and	r15, r17
    3cd2:	f6 fe       	sbrs	r15, 6
    3cd4:	0b c0       	rjmp	.+22     	; 0x3cec <vfprintf+0x2cc>
    3cd6:	5e ef       	ldi	r21, 0xFE	; 254
    3cd8:	f5 22       	and	r15, r21
    3cda:	d9 14       	cp	r13, r9
    3cdc:	38 f4       	brcc	.+14     	; 0x3cec <vfprintf+0x2cc>
    3cde:	f4 fe       	sbrs	r15, 4
    3ce0:	07 c0       	rjmp	.+14     	; 0x3cf0 <vfprintf+0x2d0>
    3ce2:	f2 fc       	sbrc	r15, 2
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <vfprintf+0x2d0>
    3ce6:	8f ee       	ldi	r24, 0xEF	; 239
    3ce8:	f8 22       	and	r15, r24
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <vfprintf+0x2d0>
    3cec:	1d 2d       	mov	r17, r13
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <vfprintf+0x2d2>
    3cf0:	19 2d       	mov	r17, r9
    3cf2:	f4 fe       	sbrs	r15, 4
    3cf4:	0d c0       	rjmp	.+26     	; 0x3d10 <vfprintf+0x2f0>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	ed 0d       	add	r30, r13
    3cfa:	f1 1d       	adc	r31, r1
    3cfc:	80 81       	ld	r24, Z
    3cfe:	80 33       	cpi	r24, 0x30	; 48
    3d00:	19 f4       	brne	.+6      	; 0x3d08 <vfprintf+0x2e8>
    3d02:	99 ee       	ldi	r25, 0xE9	; 233
    3d04:	f9 22       	and	r15, r25
    3d06:	08 c0       	rjmp	.+16     	; 0x3d18 <vfprintf+0x2f8>
    3d08:	1f 5f       	subi	r17, 0xFF	; 255
    3d0a:	f2 fe       	sbrs	r15, 2
    3d0c:	05 c0       	rjmp	.+10     	; 0x3d18 <vfprintf+0x2f8>
    3d0e:	03 c0       	rjmp	.+6      	; 0x3d16 <vfprintf+0x2f6>
    3d10:	8f 2d       	mov	r24, r15
    3d12:	86 78       	andi	r24, 0x86	; 134
    3d14:	09 f0       	breq	.+2      	; 0x3d18 <vfprintf+0x2f8>
    3d16:	1f 5f       	subi	r17, 0xFF	; 255
    3d18:	0f 2d       	mov	r16, r15
    3d1a:	f3 fc       	sbrc	r15, 3
    3d1c:	14 c0       	rjmp	.+40     	; 0x3d46 <vfprintf+0x326>
    3d1e:	f0 fe       	sbrs	r15, 0
    3d20:	0f c0       	rjmp	.+30     	; 0x3d40 <vfprintf+0x320>
    3d22:	1e 15       	cp	r17, r14
    3d24:	10 f0       	brcs	.+4      	; 0x3d2a <vfprintf+0x30a>
    3d26:	9d 2c       	mov	r9, r13
    3d28:	0b c0       	rjmp	.+22     	; 0x3d40 <vfprintf+0x320>
    3d2a:	9d 2c       	mov	r9, r13
    3d2c:	9e 0c       	add	r9, r14
    3d2e:	91 1a       	sub	r9, r17
    3d30:	1e 2d       	mov	r17, r14
    3d32:	06 c0       	rjmp	.+12     	; 0x3d40 <vfprintf+0x320>
    3d34:	80 e2       	ldi	r24, 0x20	; 32
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	b3 01       	movw	r22, r6
    3d3a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3d3e:	1f 5f       	subi	r17, 0xFF	; 255
    3d40:	1e 15       	cp	r17, r14
    3d42:	c0 f3       	brcs	.-16     	; 0x3d34 <vfprintf+0x314>
    3d44:	04 c0       	rjmp	.+8      	; 0x3d4e <vfprintf+0x32e>
    3d46:	1e 15       	cp	r17, r14
    3d48:	10 f4       	brcc	.+4      	; 0x3d4e <vfprintf+0x32e>
    3d4a:	e1 1a       	sub	r14, r17
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <vfprintf+0x330>
    3d4e:	ee 24       	eor	r14, r14
    3d50:	04 ff       	sbrs	r16, 4
    3d52:	0f c0       	rjmp	.+30     	; 0x3d72 <vfprintf+0x352>
    3d54:	80 e3       	ldi	r24, 0x30	; 48
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	b3 01       	movw	r22, r6
    3d5a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3d5e:	02 ff       	sbrs	r16, 2
    3d60:	1d c0       	rjmp	.+58     	; 0x3d9c <vfprintf+0x37c>
    3d62:	01 fd       	sbrc	r16, 1
    3d64:	03 c0       	rjmp	.+6      	; 0x3d6c <vfprintf+0x34c>
    3d66:	88 e7       	ldi	r24, 0x78	; 120
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0e c0       	rjmp	.+28     	; 0x3d88 <vfprintf+0x368>
    3d6c:	88 e5       	ldi	r24, 0x58	; 88
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	0b c0       	rjmp	.+22     	; 0x3d88 <vfprintf+0x368>
    3d72:	80 2f       	mov	r24, r16
    3d74:	86 78       	andi	r24, 0x86	; 134
    3d76:	91 f0       	breq	.+36     	; 0x3d9c <vfprintf+0x37c>
    3d78:	01 ff       	sbrs	r16, 1
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <vfprintf+0x360>
    3d7c:	8b e2       	ldi	r24, 0x2B	; 43
    3d7e:	01 c0       	rjmp	.+2      	; 0x3d82 <vfprintf+0x362>
    3d80:	80 e2       	ldi	r24, 0x20	; 32
    3d82:	f7 fc       	sbrc	r15, 7
    3d84:	8d e2       	ldi	r24, 0x2D	; 45
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	b3 01       	movw	r22, r6
    3d8a:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <vfprintf+0x37c>
    3d90:	80 e3       	ldi	r24, 0x30	; 48
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	b3 01       	movw	r22, r6
    3d96:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3d9a:	9a 94       	dec	r9
    3d9c:	d9 14       	cp	r13, r9
    3d9e:	c0 f3       	brcs	.-16     	; 0x3d90 <vfprintf+0x370>
    3da0:	da 94       	dec	r13
    3da2:	f1 01       	movw	r30, r2
    3da4:	ed 0d       	add	r30, r13
    3da6:	f1 1d       	adc	r31, r1
    3da8:	80 81       	ld	r24, Z
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	b3 01       	movw	r22, r6
    3dae:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3db2:	dd 20       	and	r13, r13
    3db4:	a9 f7       	brne	.-22     	; 0x3da0 <vfprintf+0x380>
    3db6:	06 c0       	rjmp	.+12     	; 0x3dc4 <vfprintf+0x3a4>
    3db8:	80 e2       	ldi	r24, 0x20	; 32
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	b3 01       	movw	r22, r6
    3dbe:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <fputc>
    3dc2:	ea 94       	dec	r14
    3dc4:	ee 20       	and	r14, r14
    3dc6:	c1 f7       	brne	.-16     	; 0x3db8 <vfprintf+0x398>
    3dc8:	43 ce       	rjmp	.-890    	; 0x3a50 <vfprintf+0x30>
    3dca:	f3 01       	movw	r30, r6
    3dcc:	66 81       	ldd	r22, Z+6	; 0x06
    3dce:	77 81       	ldd	r23, Z+7	; 0x07
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	2b 96       	adiw	r28, 0x0b	; 11
    3dd4:	e2 e1       	ldi	r30, 0x12	; 18
    3dd6:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__>

00003dda <strnlen_P>:
    3dda:	fc 01       	movw	r30, r24
    3ddc:	05 90       	lpm	r0, Z+
    3dde:	61 50       	subi	r22, 0x01	; 1
    3de0:	70 40       	sbci	r23, 0x00	; 0
    3de2:	01 10       	cpse	r0, r1
    3de4:	d8 f7       	brcc	.-10     	; 0x3ddc <strnlen_P+0x2>
    3de6:	80 95       	com	r24
    3de8:	90 95       	com	r25
    3dea:	8e 0f       	add	r24, r30
    3dec:	9f 1f       	adc	r25, r31
    3dee:	08 95       	ret

00003df0 <strnlen>:
    3df0:	fc 01       	movw	r30, r24
    3df2:	61 50       	subi	r22, 0x01	; 1
    3df4:	70 40       	sbci	r23, 0x00	; 0
    3df6:	01 90       	ld	r0, Z+
    3df8:	01 10       	cpse	r0, r1
    3dfa:	d8 f7       	brcc	.-10     	; 0x3df2 <strnlen+0x2>
    3dfc:	80 95       	com	r24
    3dfe:	90 95       	com	r25
    3e00:	8e 0f       	add	r24, r30
    3e02:	9f 1f       	adc	r25, r31
    3e04:	08 95       	ret

00003e06 <fputc>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	8c 01       	movw	r16, r24
    3e10:	eb 01       	movw	r28, r22
    3e12:	8b 81       	ldd	r24, Y+3	; 0x03
    3e14:	81 ff       	sbrs	r24, 1
    3e16:	1b c0       	rjmp	.+54     	; 0x3e4e <fputc+0x48>
    3e18:	82 ff       	sbrs	r24, 2
    3e1a:	0d c0       	rjmp	.+26     	; 0x3e36 <fputc+0x30>
    3e1c:	2e 81       	ldd	r18, Y+6	; 0x06
    3e1e:	3f 81       	ldd	r19, Y+7	; 0x07
    3e20:	8c 81       	ldd	r24, Y+4	; 0x04
    3e22:	9d 81       	ldd	r25, Y+5	; 0x05
    3e24:	28 17       	cp	r18, r24
    3e26:	39 07       	cpc	r19, r25
    3e28:	64 f4       	brge	.+24     	; 0x3e42 <fputc+0x3c>
    3e2a:	e8 81       	ld	r30, Y
    3e2c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e2e:	01 93       	st	Z+, r16
    3e30:	f9 83       	std	Y+1, r31	; 0x01
    3e32:	e8 83       	st	Y, r30
    3e34:	06 c0       	rjmp	.+12     	; 0x3e42 <fputc+0x3c>
    3e36:	e8 85       	ldd	r30, Y+8	; 0x08
    3e38:	f9 85       	ldd	r31, Y+9	; 0x09
    3e3a:	80 2f       	mov	r24, r16
    3e3c:	09 95       	icall
    3e3e:	89 2b       	or	r24, r25
    3e40:	31 f4       	brne	.+12     	; 0x3e4e <fputc+0x48>
    3e42:	8e 81       	ldd	r24, Y+6	; 0x06
    3e44:	9f 81       	ldd	r25, Y+7	; 0x07
    3e46:	01 96       	adiw	r24, 0x01	; 1
    3e48:	9f 83       	std	Y+7, r25	; 0x07
    3e4a:	8e 83       	std	Y+6, r24	; 0x06
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <fputc+0x4c>
    3e4e:	0f ef       	ldi	r16, 0xFF	; 255
    3e50:	1f ef       	ldi	r17, 0xFF	; 255
    3e52:	c8 01       	movw	r24, r16
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	08 95       	ret

00003e5e <__ultoa_invert>:
    3e5e:	fa 01       	movw	r30, r20
    3e60:	aa 27       	eor	r26, r26
    3e62:	28 30       	cpi	r18, 0x08	; 8
    3e64:	51 f1       	breq	.+84     	; 0x3eba <__ultoa_invert+0x5c>
    3e66:	20 31       	cpi	r18, 0x10	; 16
    3e68:	81 f1       	breq	.+96     	; 0x3eca <__ultoa_invert+0x6c>
    3e6a:	e8 94       	clt
    3e6c:	6f 93       	push	r22
    3e6e:	6e 7f       	andi	r22, 0xFE	; 254
    3e70:	6e 5f       	subi	r22, 0xFE	; 254
    3e72:	7f 4f       	sbci	r23, 0xFF	; 255
    3e74:	8f 4f       	sbci	r24, 0xFF	; 255
    3e76:	9f 4f       	sbci	r25, 0xFF	; 255
    3e78:	af 4f       	sbci	r26, 0xFF	; 255
    3e7a:	b1 e0       	ldi	r27, 0x01	; 1
    3e7c:	3e d0       	rcall	.+124    	; 0x3efa <__ultoa_invert+0x9c>
    3e7e:	b4 e0       	ldi	r27, 0x04	; 4
    3e80:	3c d0       	rcall	.+120    	; 0x3efa <__ultoa_invert+0x9c>
    3e82:	67 0f       	add	r22, r23
    3e84:	78 1f       	adc	r23, r24
    3e86:	89 1f       	adc	r24, r25
    3e88:	9a 1f       	adc	r25, r26
    3e8a:	a1 1d       	adc	r26, r1
    3e8c:	68 0f       	add	r22, r24
    3e8e:	79 1f       	adc	r23, r25
    3e90:	8a 1f       	adc	r24, r26
    3e92:	91 1d       	adc	r25, r1
    3e94:	a1 1d       	adc	r26, r1
    3e96:	6a 0f       	add	r22, r26
    3e98:	71 1d       	adc	r23, r1
    3e9a:	81 1d       	adc	r24, r1
    3e9c:	91 1d       	adc	r25, r1
    3e9e:	a1 1d       	adc	r26, r1
    3ea0:	20 d0       	rcall	.+64     	; 0x3ee2 <__ultoa_invert+0x84>
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <__ultoa_invert+0x48>
    3ea4:	68 94       	set
    3ea6:	3f 91       	pop	r19
    3ea8:	2a e0       	ldi	r18, 0x0A	; 10
    3eaa:	26 9f       	mul	r18, r22
    3eac:	11 24       	eor	r1, r1
    3eae:	30 19       	sub	r19, r0
    3eb0:	30 5d       	subi	r19, 0xD0	; 208
    3eb2:	31 93       	st	Z+, r19
    3eb4:	de f6       	brtc	.-74     	; 0x3e6c <__ultoa_invert+0xe>
    3eb6:	cf 01       	movw	r24, r30
    3eb8:	08 95       	ret
    3eba:	46 2f       	mov	r20, r22
    3ebc:	47 70       	andi	r20, 0x07	; 7
    3ebe:	40 5d       	subi	r20, 0xD0	; 208
    3ec0:	41 93       	st	Z+, r20
    3ec2:	b3 e0       	ldi	r27, 0x03	; 3
    3ec4:	0f d0       	rcall	.+30     	; 0x3ee4 <__ultoa_invert+0x86>
    3ec6:	c9 f7       	brne	.-14     	; 0x3eba <__ultoa_invert+0x5c>
    3ec8:	f6 cf       	rjmp	.-20     	; 0x3eb6 <__ultoa_invert+0x58>
    3eca:	46 2f       	mov	r20, r22
    3ecc:	4f 70       	andi	r20, 0x0F	; 15
    3ece:	40 5d       	subi	r20, 0xD0	; 208
    3ed0:	4a 33       	cpi	r20, 0x3A	; 58
    3ed2:	18 f0       	brcs	.+6      	; 0x3eda <__ultoa_invert+0x7c>
    3ed4:	49 5d       	subi	r20, 0xD9	; 217
    3ed6:	31 fd       	sbrc	r19, 1
    3ed8:	40 52       	subi	r20, 0x20	; 32
    3eda:	41 93       	st	Z+, r20
    3edc:	02 d0       	rcall	.+4      	; 0x3ee2 <__ultoa_invert+0x84>
    3ede:	a9 f7       	brne	.-22     	; 0x3eca <__ultoa_invert+0x6c>
    3ee0:	ea cf       	rjmp	.-44     	; 0x3eb6 <__ultoa_invert+0x58>
    3ee2:	b4 e0       	ldi	r27, 0x04	; 4
    3ee4:	a6 95       	lsr	r26
    3ee6:	97 95       	ror	r25
    3ee8:	87 95       	ror	r24
    3eea:	77 95       	ror	r23
    3eec:	67 95       	ror	r22
    3eee:	ba 95       	dec	r27
    3ef0:	c9 f7       	brne	.-14     	; 0x3ee4 <__ultoa_invert+0x86>
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	61 05       	cpc	r22, r1
    3ef6:	71 05       	cpc	r23, r1
    3ef8:	08 95       	ret
    3efa:	9b 01       	movw	r18, r22
    3efc:	ac 01       	movw	r20, r24
    3efe:	0a 2e       	mov	r0, r26
    3f00:	06 94       	lsr	r0
    3f02:	57 95       	ror	r21
    3f04:	47 95       	ror	r20
    3f06:	37 95       	ror	r19
    3f08:	27 95       	ror	r18
    3f0a:	ba 95       	dec	r27
    3f0c:	c9 f7       	brne	.-14     	; 0x3f00 <__ultoa_invert+0xa2>
    3f0e:	62 0f       	add	r22, r18
    3f10:	73 1f       	adc	r23, r19
    3f12:	84 1f       	adc	r24, r20
    3f14:	95 1f       	adc	r25, r21
    3f16:	a0 1d       	adc	r26, r0
    3f18:	08 95       	ret

00003f1a <_exit>:
    3f1a:	f8 94       	cli

00003f1c <__stop_program>:
    3f1c:	ff cf       	rjmp	.-2      	; 0x3f1c <__stop_program>
