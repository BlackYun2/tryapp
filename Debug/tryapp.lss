
tryapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000034e  00800060  00004300  00004374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000390c  00000000  00000000  000046c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a15  00000000  00000000  00007fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000099e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00009ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00009db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000d899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000eba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000ed84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000f08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000faa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b7 18 	call	0x316e	; 0x316e <main>
      7a:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e8       	ldi	r26, 0x86	; 134
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e8       	ldi	r24, 0x86	; 134
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e8       	ldi	r22, 0x86	; 134
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e2 57       	subi	r30, 0x72	; 114
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <SSD_Init>:
 *      Author: 20100
 */
#include"SSD.h"

void SSD_Init(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE DATA LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN4, OUTPUT);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN5, OUTPUT);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	65 e0       	ldi	r22, 0x05	; 5
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN6, OUTPUT);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	66 e0       	ldi	r22, 0x06	; 6
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN7, OUTPUT);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	67 e0       	ldi	r22, 0x07	; 7
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>


	// CONFIGURE CONTROL LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN1, OUTPUT);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN2, OUTPUT);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>

}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <SSD_DisplayNumber>:
because the second one is at the end so it
will stay on untill the function work again
but the first one will be off at
that time so your eye will notice*/
SSD_DisplayNumber(u8 num)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	af 97       	sbiw	r28, 0x2f	; 47
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8d a7       	std	Y+45, r24	; 0x2d
	u8 loc_FirstDigit = (num/10)<<4;
     f3a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f3c:	9a e0       	ldi	r25, 0x0A	; 10
     f3e:	69 2f       	mov	r22, r25
     f40:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <__udivmodqi4>
     f44:	82 95       	swap	r24
     f46:	80 7f       	andi	r24, 0xF0	; 240
     f48:	8c a7       	std	Y+44, r24	; 0x2c
	u8 loc_SecondtDigit = (num%10)<<4;
     f4a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f4c:	9a e0       	ldi	r25, 0x0A	; 10
     f4e:	69 2f       	mov	r22, r25
     f50:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <__udivmodqi4>
     f54:	89 2f       	mov	r24, r25
     f56:	82 95       	swap	r24
     f58:	80 7f       	andi	r24, 0xF0	; 240
     f5a:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	60 ef       	ldi	r22, 0xF0	; 240
     f60:	4c a5       	ldd	r20, Y+44	; 0x2c
     f62:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	8f a3       	std	Y+39, r24	; 0x27
     f70:	98 a7       	std	Y+40, r25	; 0x28
     f72:	a9 a7       	std	Y+41, r26	; 0x29
     f74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6f a1       	ldd	r22, Y+39	; 0x27
     f78:	78 a5       	ldd	r23, Y+40	; 0x28
     f7a:	89 a5       	ldd	r24, Y+41	; 0x29
     f7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a ef       	ldi	r20, 0xFA	; 250
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8b a3       	std	Y+35, r24	; 0x23
     f90:	9c a3       	std	Y+36, r25	; 0x24
     f92:	ad a3       	std	Y+37, r26	; 0x25
     f94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <SSD_DisplayNumber+0x94>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9a a3       	std	Y+34, r25	; 0x22
     fb4:	89 a3       	std	Y+33, r24	; 0x21
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <SSD_DisplayNumber+0x112>
	else if (__tmp > 65535)
     fb8:	6b a1       	ldd	r22, Y+35	; 0x23
     fba:	7c a1       	ldd	r23, Y+36	; 0x24
     fbc:	8d a1       	ldd	r24, Y+37	; 0x25
     fbe:	9e a1       	ldd	r25, Y+38	; 0x26
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <SSD_DisplayNumber+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6f a1       	ldd	r22, Y+39	; 0x27
     fd2:	78 a5       	ldd	r23, Y+40	; 0x28
     fd4:	89 a5       	ldd	r24, Y+41	; 0x29
     fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <SSD_DisplayNumber+0xf4>
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	98 a3       	std	Y+32, r25	; 0x20
    1000:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1004:	98 a1       	ldd	r25, Y+32	; 0x20
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <SSD_DisplayNumber+0xe2>
    100a:	98 a3       	std	Y+32, r25	; 0x20
    100c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	89 a1       	ldd	r24, Y+33	; 0x21
    1010:	9a a1       	ldd	r25, Y+34	; 0x22
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9a a3       	std	Y+34, r25	; 0x22
    1016:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	89 a1       	ldd	r24, Y+33	; 0x21
    101a:	9a a1       	ldd	r25, Y+34	; 0x22
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <SSD_DisplayNumber+0xd6>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <SSD_DisplayNumber+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6b a1       	ldd	r22, Y+35	; 0x23
    1024:	7c a1       	ldd	r23, Y+36	; 0x24
    1026:	8d a1       	ldd	r24, Y+37	; 0x25
    1028:	9e a1       	ldd	r25, Y+38	; 0x26
    102a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9a a3       	std	Y+34, r25	; 0x22
    1034:	89 a3       	std	Y+33, r24	; 0x21
    1036:	89 a1       	ldd	r24, Y+33	; 0x21
    1038:	9a a1       	ldd	r25, Y+34	; 0x22
    103a:	9e 8f       	std	Y+30, r25	; 0x1e
    103c:	8d 8f       	std	Y+29, r24	; 0x1d
    103e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <SSD_DisplayNumber+0x11e>
    1046:	9e 8f       	std	Y+30, r25	; 0x1e
    1048:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//enable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	//disable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num/10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	60 ef       	ldi	r22, 0xF0	; 240
    1062:	4c a5       	ldd	r20, Y+44	; 0x2c
    1064:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e8       	ldi	r26, 0x80	; 128
    106e:	bf e3       	ldi	r27, 0x3F	; 63
    1070:	89 8f       	std	Y+25, r24	; 0x19
    1072:	9a 8f       	std	Y+26, r25	; 0x1a
    1074:	ab 8f       	std	Y+27, r26	; 0x1b
    1076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	69 8d       	ldd	r22, Y+25	; 0x19
    107a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8d 8b       	std	Y+21, r24	; 0x15
    1092:	9e 8b       	std	Y+22, r25	; 0x16
    1094:	af 8b       	std	Y+23, r26	; 0x17
    1096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1098:	6d 89       	ldd	r22, Y+21	; 0x15
    109a:	7e 89       	ldd	r23, Y+22	; 0x16
    109c:	8f 89       	ldd	r24, Y+23	; 0x17
    109e:	98 8d       	ldd	r25, Y+24	; 0x18
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <SSD_DisplayNumber+0x196>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 8b       	std	Y+20, r25	; 0x14
    10b6:	8b 8b       	std	Y+19, r24	; 0x13
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <SSD_DisplayNumber+0x214>
	else if (__tmp > 65535)
    10ba:	6d 89       	ldd	r22, Y+21	; 0x15
    10bc:	7e 89       	ldd	r23, Y+22	; 0x16
    10be:	8f 89       	ldd	r24, Y+23	; 0x17
    10c0:	98 8d       	ldd	r25, Y+24	; 0x18
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <SSD_DisplayNumber+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	69 8d       	ldd	r22, Y+25	; 0x19
    10d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9c 8b       	std	Y+20, r25	; 0x14
    10f8:	8b 8b       	std	Y+19, r24	; 0x13
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <SSD_DisplayNumber+0x1f6>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9a 8b       	std	Y+18, r25	; 0x12
    1102:	89 8b       	std	Y+17, r24	; 0x11
    1104:	89 89       	ldd	r24, Y+17	; 0x11
    1106:	9a 89       	ldd	r25, Y+18	; 0x12
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <SSD_DisplayNumber+0x1e4>
    110c:	9a 8b       	std	Y+18, r25	; 0x12
    110e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8b 89       	ldd	r24, Y+19	; 0x13
    1112:	9c 89       	ldd	r25, Y+20	; 0x14
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9c 8b       	std	Y+20, r25	; 0x14
    1118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <SSD_DisplayNumber+0x1d8>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <SSD_DisplayNumber+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6d 89       	ldd	r22, Y+21	; 0x15
    1126:	7e 89       	ldd	r23, Y+22	; 0x16
    1128:	8f 89       	ldd	r24, Y+23	; 0x17
    112a:	98 8d       	ldd	r25, Y+24	; 0x18
    112c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9c 8b       	std	Y+20, r25	; 0x14
    1136:	8b 8b       	std	Y+19, r24	; 0x13
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	9c 89       	ldd	r25, Y+20	; 0x14
    113c:	98 8b       	std	Y+16, r25	; 0x10
    113e:	8f 87       	std	Y+15, r24	; 0x0f
    1140:	8f 85       	ldd	r24, Y+15	; 0x0f
    1142:	98 89       	ldd	r25, Y+16	; 0x10
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <SSD_DisplayNumber+0x220>
    1148:	98 8b       	std	Y+16, r25	; 0x10
    114a:	8f 87       	std	Y+15, r24	; 0x0f
	//wait (1m)
	_delay_ms(1);
	//disable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	//enable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num%10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_SecondtDigit);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	60 ef       	ldi	r22, 0xF0	; 240
    1164:	4b a5       	ldd	r20, Y+43	; 0x2b
    1166:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	bf e3       	ldi	r27, 0x3F	; 63
    1172:	8b 87       	std	Y+11, r24	; 0x0b
    1174:	9c 87       	std	Y+12, r25	; 0x0c
    1176:	ad 87       	std	Y+13, r26	; 0x0d
    1178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117a:	6b 85       	ldd	r22, Y+11	; 0x0b
    117c:	7c 85       	ldd	r23, Y+12	; 0x0c
    117e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1180:	9e 85       	ldd	r25, Y+14	; 0x0e
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a ef       	ldi	r20, 0xFA	; 250
    1188:	54 e4       	ldi	r21, 0x44	; 68
    118a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8f 83       	std	Y+7, r24	; 0x07
    1194:	98 87       	std	Y+8, r25	; 0x08
    1196:	a9 87       	std	Y+9, r26	; 0x09
    1198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <SSD_DisplayNumber+0x298>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <SSD_DisplayNumber+0x316>
	else if (__tmp > 65535)
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	4c f5       	brge	.+82     	; 0x1226 <SSD_DisplayNumber+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11da:	9e 85       	ldd	r25, Y+14	; 0x0e
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <SSD_DisplayNumber+0x2f8>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <SSD_DisplayNumber+0x2e6>
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9e 83       	std	Y+6, r25	; 0x06
    121a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f7       	brne	.-38     	; 0x11fe <SSD_DisplayNumber+0x2da>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <SSD_DisplayNumber+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	6f 81       	ldd	r22, Y+7	; 0x07
    1228:	78 85       	ldd	r23, Y+8	; 0x08
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <SSD_DisplayNumber+0x322>
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	//wait (1m)
	_delay_ms(1);
}
    124e:	af 96       	adiw	r28, 0x2f	; 47
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <LED_Init>:
 */
#include"led.h"


void LED_Init(void)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_PIN, OUTPUT);//LED 0
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,2);
	Dio_ConfigChannel(LED1_PORT, LED1_PIN, OUTPUT);//LED 1
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	67 e0       	ldi	r22, 0x07	; 7
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,7);
	Dio_ConfigChannel(LED2_PORT, LED2_PIN, OUTPUT);//LED 2
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	63 e0       	ldi	r22, 0x03	; 3
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRD_REG,3);

}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <LED_ON>:
void LED_ON(led_type ledId)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <LED_ON+0x6>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3b 83       	std	Y+3, r19	; 0x03
    12a2:	2a 83       	std	Y+2, r18	; 0x02
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	79 f0       	breq	.+30     	; 0x12cc <LED_ON+0x40>
    12ae:	2a 81       	ldd	r18, Y+2	; 0x02
    12b0:	3b 81       	ldd	r19, Y+3	; 0x03
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <LED_ON+0x4c>
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	89 f4       	brne	.+34     	; 0x12e2 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_HIGH);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    12ca:	0b c0       	rjmp	.+22     	; 0x12e2 <LED_ON+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_HIGH);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	67 e0       	ldi	r22, 0x07	; 7
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <LED_ON+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_HIGH);
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	63 e0       	ldi	r22, 0x03	; 3
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
		break;

	}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <LED_OFF>:
void LED_OFF(led_type ledId)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <LED_OFF+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3b 83       	std	Y+3, r19	; 0x03
    1304:	2a 83       	std	Y+2, r18	; 0x02
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	79 f0       	breq	.+30     	; 0x132e <LED_OFF+0x40>
    1310:	2a 81       	ldd	r18, Y+2	; 0x02
    1312:	3b 81       	ldd	r19, Y+3	; 0x03
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	81 f0       	breq	.+32     	; 0x133a <LED_OFF+0x4c>
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	89 f4       	brne	.+34     	; 0x1344 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_LOW);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <LED_OFF+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_LOW);
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <LED_OFF+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_LOW);
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	63 e0       	ldi	r22, 0x03	; 3
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
		break;
	}


}
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <LED_TOGGLE+0x6>
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01

	switch (ledId)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3b 83       	std	Y+3, r19	; 0x03
    1366:	2a 83       	std	Y+2, r18	; 0x02
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	71 f0       	breq	.+28     	; 0x138e <LED_TOGGLE+0x3e>
    1372:	2a 81       	ldd	r18, Y+2	; 0x02
    1374:	3b 81       	ldd	r19, Y+3	; 0x03
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	71 f0       	breq	.+28     	; 0x1398 <LED_TOGGLE+0x48>
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	9b 81       	ldd	r25, Y+3	; 0x03
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	71 f4       	brne	.+28     	; 0x13a0 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	62 e0       	ldi	r22, 0x02	; 2
    1388:	0e 94 a4 1b 	call	0x3748	; 0x3748 <Dio_ToggleChannel>
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <LED_TOGGLE+0x50>
		break;
	case LED1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	67 e0       	ldi	r22, 0x07	; 7
    1392:	0e 94 a4 1b 	call	0x3748	; 0x3748 <Dio_ToggleChannel>
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <LED_TOGGLE+0x50>
		break;
	case LED2:
		Dio_ToggleChannel(LED2_PORT, LED2_PIN);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	63 e0       	ldi	r22, 0x03	; 3
    139c:	0e 94 a4 1b 	call	0x3748	; 0x3748 <Dio_ToggleChannel>
		break;
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <Lcd_WriteCustom+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    13b6:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	2c c0       	rjmp	.+88     	; 0x1416 <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 96       	adiw	r24, 0x08	; 8
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    13d6:	1a 82       	std	Y+2, r1	; 0x02
    13d8:	18 c0       	rjmp	.+48     	; 0x140a <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	48 2f       	mov	r20, r24
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	ca 01       	movw	r24, r20
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	fc 01       	movw	r30, r24
    13fa:	e2 57       	subi	r30, 0x72	; 114
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	80 81       	ld	r24, Z
    1400:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 30       	cpi	r24, 0x08	; 8
    140e:	28 f3       	brcs	.-54     	; 0x13da <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	88 f2       	brcs	.-94     	; 0x13be <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <Lcd_Init>:

void Lcd_Init(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	e4 97       	sbiw	r28, 0x34	; 52
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	64 e0       	ldi	r22, 0x04	; 4
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	65 e0       	ldi	r22, 0x05	; 5
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	66 e0       	ldi	r22, 0x06	; 6
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	67 e0       	ldi	r22, 0x07	; 7
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e7       	ldi	r26, 0x70	; 112
    1490:	b1 e4       	ldi	r27, 0x41	; 65
    1492:	89 ab       	std	Y+49, r24	; 0x31
    1494:	9a ab       	std	Y+50, r25	; 0x32
    1496:	ab ab       	std	Y+51, r26	; 0x33
    1498:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149a:	69 a9       	ldd	r22, Y+49	; 0x31
    149c:	7a a9       	ldd	r23, Y+50	; 0x32
    149e:	8b a9       	ldd	r24, Y+51	; 0x33
    14a0:	9c a9       	ldd	r25, Y+52	; 0x34
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4a ef       	ldi	r20, 0xFA	; 250
    14a8:	54 e4       	ldi	r21, 0x44	; 68
    14aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8d a7       	std	Y+45, r24	; 0x2d
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	af a7       	std	Y+47, r26	; 0x2f
    14b8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    14bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    14be:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c0:	98 a9       	ldd	r25, Y+48	; 0x30
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <Lcd_Init+0xb6>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c a7       	std	Y+44, r25	; 0x2c
    14d8:	8b a7       	std	Y+43, r24	; 0x2b
    14da:	3f c0       	rjmp	.+126    	; 0x155a <Lcd_Init+0x134>
	else if (__tmp > 65535)
    14dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14de:	7e a5       	ldd	r23, Y+46	; 0x2e
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	4c f5       	brge	.+82     	; 0x1546 <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9c a7       	std	Y+44, r25	; 0x2c
    151a:	8b a7       	std	Y+43, r24	; 0x2b
    151c:	0f c0       	rjmp	.+30     	; 0x153c <Lcd_Init+0x116>
    151e:	88 ec       	ldi	r24, 0xC8	; 200
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9a a7       	std	Y+42, r25	; 0x2a
    1524:	89 a7       	std	Y+41, r24	; 0x29
    1526:	89 a5       	ldd	r24, Y+41	; 0x29
    1528:	9a a5       	ldd	r25, Y+42	; 0x2a
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <Lcd_Init+0x104>
    152e:	9a a7       	std	Y+42, r25	; 0x2a
    1530:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	8b a5       	ldd	r24, Y+43	; 0x2b
    1534:	9c a5       	ldd	r25, Y+44	; 0x2c
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	9c a7       	std	Y+44, r25	; 0x2c
    153a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	8b a5       	ldd	r24, Y+43	; 0x2b
    153e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f7       	brne	.-38     	; 0x151e <Lcd_Init+0xf8>
    1544:	14 c0       	rjmp	.+40     	; 0x156e <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	6d a5       	ldd	r22, Y+45	; 0x2d
    1548:	7e a5       	ldd	r23, Y+46	; 0x2e
    154a:	8f a5       	ldd	r24, Y+47	; 0x2f
    154c:	98 a9       	ldd	r25, Y+48	; 0x30
    154e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9c a7       	std	Y+44, r25	; 0x2c
    1558:	8b a7       	std	Y+43, r24	; 0x2b
    155a:	8b a5       	ldd	r24, Y+43	; 0x2b
    155c:	9c a5       	ldd	r25, Y+44	; 0x2c
    155e:	98 a7       	std	Y+40, r25	; 0x28
    1560:	8f a3       	std	Y+39, r24	; 0x27
    1562:	8f a1       	ldd	r24, Y+39	; 0x27
    1564:	98 a5       	ldd	r25, Y+40	; 0x28
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <Lcd_Init+0x140>
    156a:	98 a7       	std	Y+40, r25	; 0x28
    156c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 ea       	ldi	r26, 0xA0	; 160
    157a:	b0 e4       	ldi	r27, 0x40	; 64
    157c:	8b a3       	std	Y+35, r24	; 0x23
    157e:	9c a3       	std	Y+36, r25	; 0x24
    1580:	ad a3       	std	Y+37, r26	; 0x25
    1582:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b a1       	ldd	r22, Y+35	; 0x23
    1586:	7c a1       	ldd	r23, Y+36	; 0x24
    1588:	8d a1       	ldd	r24, Y+37	; 0x25
    158a:	9e a1       	ldd	r25, Y+38	; 0x26
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4a ef       	ldi	r20, 0xFA	; 250
    1592:	54 e4       	ldi	r21, 0x44	; 68
    1594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 8f       	std	Y+31, r24	; 0x1f
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	a9 a3       	std	Y+33, r26	; 0x21
    15a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15a6:	78 a1       	ldd	r23, Y+32	; 0x20
    15a8:	89 a1       	ldd	r24, Y+33	; 0x21
    15aa:	9a a1       	ldd	r25, Y+34	; 0x22
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <Lcd_Init+0x1a0>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 8f       	std	Y+30, r25	; 0x1e
    15c2:	8d 8f       	std	Y+29, r24	; 0x1d
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    15c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15c8:	78 a1       	ldd	r23, Y+32	; 0x20
    15ca:	89 a1       	ldd	r24, Y+33	; 0x21
    15cc:	9a a1       	ldd	r25, Y+34	; 0x22
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b a1       	ldd	r22, Y+35	; 0x23
    15e0:	7c a1       	ldd	r23, Y+36	; 0x24
    15e2:	8d a1       	ldd	r24, Y+37	; 0x25
    15e4:	9e a1       	ldd	r25, Y+38	; 0x26
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 8f       	std	Y+30, r25	; 0x1e
    1604:	8d 8f       	std	Y+29, r24	; 0x1d
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <Lcd_Init+0x200>
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8f       	std	Y+28, r25	; 0x1c
    160e:	8b 8f       	std	Y+27, r24	; 0x1b
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <Lcd_Init+0x1ee>
    1618:	9c 8f       	std	Y+28, r25	; 0x1c
    161a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 8f       	std	Y+30, r25	; 0x1e
    1624:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <Lcd_Init+0x1e2>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1632:	78 a1       	ldd	r23, Y+32	; 0x20
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 8f       	std	Y+30, r25	; 0x1e
    1642:	8d 8f       	std	Y+29, r24	; 0x1d
    1644:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1646:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1648:	9a 8f       	std	Y+26, r25	; 0x1a
    164a:	89 8f       	std	Y+25, r24	; 0x19
    164c:	89 8d       	ldd	r24, Y+25	; 0x19
    164e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <Lcd_Init+0x22a>
    1654:	9a 8f       	std	Y+26, r25	; 0x1a
    1656:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a8 ec       	ldi	r26, 0xC8	; 200
    1664:	b2 e4       	ldi	r27, 0x42	; 66
    1666:	8d 8b       	std	Y+21, r24	; 0x15
    1668:	9e 8b       	std	Y+22, r25	; 0x16
    166a:	af 8b       	std	Y+23, r26	; 0x17
    166c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	2b ea       	ldi	r18, 0xAB	; 171
    1678:	3a ea       	ldi	r19, 0xAA	; 170
    167a:	4a e2       	ldi	r20, 0x2A	; 42
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	89 8b       	std	Y+17, r24	; 0x11
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	ab 8b       	std	Y+19, r26	; 0x13
    168c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    168e:	69 89       	ldd	r22, Y+17	; 0x11
    1690:	7a 89       	ldd	r23, Y+18	; 0x12
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	1c f4       	brge	.+6      	; 0x16ac <Lcd_Init+0x286>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	88 8b       	std	Y+16, r24	; 0x10
    16aa:	91 c0       	rjmp	.+290    	; 0x17ce <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    16ac:	69 89       	ldd	r22, Y+17	; 0x11
    16ae:	7a 89       	ldd	r23, Y+18	; 0x12
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <Lcd_Init+0x2a0>
    16c4:	7b c0       	rjmp	.+246    	; 0x17bc <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8c 87       	std	Y+12, r24	; 0x0c
    16e0:	9d 87       	std	Y+13, r25	; 0x0d
    16e2:	ae 87       	std	Y+14, r26	; 0x0e
    16e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    16e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    16ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	88 87       	std	Y+8, r24	; 0x08
    1700:	99 87       	std	Y+9, r25	; 0x09
    1702:	aa 87       	std	Y+10, r26	; 0x0a
    1704:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1706:	68 85       	ldd	r22, Y+8	; 0x08
    1708:	79 85       	ldd	r23, Y+9	; 0x09
    170a:	8a 85       	ldd	r24, Y+10	; 0x0a
    170c:	9b 85       	ldd	r25, Y+11	; 0x0b
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <Lcd_Init+0x302>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9f 83       	std	Y+7, r25	; 0x07
    1724:	8e 83       	std	Y+6, r24	; 0x06
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <Lcd_Init+0x380>
	else if (__tmp > 65535)
    1728:	68 85       	ldd	r22, Y+8	; 0x08
    172a:	79 85       	ldd	r23, Y+9	; 0x09
    172c:	8a 85       	ldd	r24, Y+10	; 0x0a
    172e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6c 85       	ldd	r22, Y+12	; 0x0c
    1742:	7d 85       	ldd	r23, Y+13	; 0x0d
    1744:	8e 85       	ldd	r24, Y+14	; 0x0e
    1746:	9f 85       	ldd	r25, Y+15	; 0x0f
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9f 83       	std	Y+7, r25	; 0x07
    1766:	8e 83       	std	Y+6, r24	; 0x06
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <Lcd_Init+0x362>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9d 83       	std	Y+5, r25	; 0x05
    1770:	8c 83       	std	Y+4, r24	; 0x04
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <Lcd_Init+0x350>
    177a:	9d 83       	std	Y+5, r25	; 0x05
    177c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9f 83       	std	Y+7, r25	; 0x07
    1786:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	9f 81       	ldd	r25, Y+7	; 0x07
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <Lcd_Init+0x344>
    1790:	24 c0       	rjmp	.+72     	; 0x17da <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	68 85       	ldd	r22, Y+8	; 0x08
    1794:	79 85       	ldd	r23, Y+9	; 0x09
    1796:	8a 85       	ldd	r24, Y+10	; 0x0a
    1798:	9b 85       	ldd	r25, Y+11	; 0x0b
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9f 83       	std	Y+7, r25	; 0x07
    17a4:	8e 83       	std	Y+6, r24	; 0x06
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	9b 83       	std	Y+3, r25	; 0x03
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	9b 81       	ldd	r25, Y+3	; 0x03
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Lcd_Init+0x38c>
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17bc:	69 89       	ldd	r22, Y+17	; 0x11
    17be:	7a 89       	ldd	r23, Y+18	; 0x12
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	88 8b       	std	Y+16, r24	; 0x10
    17ce:	88 89       	ldd	r24, Y+16	; 0x10
    17d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8a 95       	dec	r24
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Lcd_Init+0x3ae>
    17d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_Cmd(2);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    17e6:	88 e2       	ldi	r24, 0x28	; 40
    17e8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
	Lcd_WriteCustom();
    17ec:	0e 94 d6 09 	call	0x13ac	; 0x13ac <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    17f8:	8c e0       	ldi	r24, 0x0C	; 12
    17fa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
}
    17fe:	e4 96       	adiw	r28, 0x34	; 52
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Enable_Pulse>:
static void Enable_Pulse(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	a6 97       	sbiw	r28, 0x26	; 38
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e8       	ldi	r26, 0x80	; 128
    1834:	bf e3       	ldi	r27, 0x3F	; 63
    1836:	8b a3       	std	Y+35, r24	; 0x23
    1838:	9c a3       	std	Y+36, r25	; 0x24
    183a:	ad a3       	std	Y+37, r26	; 0x25
    183c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	2b ea       	ldi	r18, 0xAB	; 171
    1848:	3a ea       	ldi	r19, 0xAA	; 170
    184a:	4a e2       	ldi	r20, 0x2A	; 42
    184c:	50 e4       	ldi	r21, 0x40	; 64
    184e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8f 8f       	std	Y+31, r24	; 0x1f
    1858:	98 a3       	std	Y+32, r25	; 0x20
    185a:	a9 a3       	std	Y+33, r26	; 0x21
    185c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    185e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1860:	78 a1       	ldd	r23, Y+32	; 0x20
    1862:	89 a1       	ldd	r24, Y+33	; 0x21
    1864:	9a a1       	ldd	r25, Y+34	; 0x22
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	1c f4       	brge	.+6      	; 0x187c <Enable_Pulse+0x6c>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8e 8f       	std	Y+30, r24	; 0x1e
    187a:	91 c0       	rjmp	.+290    	; 0x199e <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    187c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    187e:	78 a1       	ldd	r23, Y+32	; 0x20
    1880:	89 a1       	ldd	r24, Y+33	; 0x21
    1882:	9a a1       	ldd	r25, Y+34	; 0x22
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	53 e4       	ldi	r21, 0x43	; 67
    188c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	0c f0       	brlt	.+2      	; 0x1896 <Enable_Pulse+0x86>
    1894:	7b c0       	rjmp	.+246    	; 0x198c <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8a 8f       	std	Y+26, r24	; 0x1a
    18b0:	9b 8f       	std	Y+27, r25	; 0x1b
    18b2:	ac 8f       	std	Y+28, r26	; 0x1c
    18b4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a ef       	ldi	r20, 0xFA	; 250
    18c4:	54 e4       	ldi	r21, 0x44	; 68
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8e 8b       	std	Y+22, r24	; 0x16
    18d0:	9f 8b       	std	Y+23, r25	; 0x17
    18d2:	a8 8f       	std	Y+24, r26	; 0x18
    18d4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18d6:	6e 89       	ldd	r22, Y+22	; 0x16
    18d8:	7f 89       	ldd	r23, Y+23	; 0x17
    18da:	88 8d       	ldd	r24, Y+24	; 0x18
    18dc:	99 8d       	ldd	r25, Y+25	; 0x19
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <Enable_Pulse+0xe8>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9d 8b       	std	Y+21, r25	; 0x15
    18f4:	8c 8b       	std	Y+20, r24	; 0x14
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    18f8:	6e 89       	ldd	r22, Y+22	; 0x16
    18fa:	7f 89       	ldd	r23, Y+23	; 0x17
    18fc:	88 8d       	ldd	r24, Y+24	; 0x18
    18fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1912:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1916:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9d 8b       	std	Y+21, r25	; 0x15
    1936:	8c 8b       	std	Y+20, r24	; 0x14
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <Enable_Pulse+0x148>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9b 8b       	std	Y+19, r25	; 0x13
    1940:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1942:	8a 89       	ldd	r24, Y+18	; 0x12
    1944:	9b 89       	ldd	r25, Y+19	; 0x13
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <Enable_Pulse+0x136>
    194a:	9b 8b       	std	Y+19, r25	; 0x13
    194c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8c 89       	ldd	r24, Y+20	; 0x14
    1950:	9d 89       	ldd	r25, Y+21	; 0x15
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9d 8b       	std	Y+21, r25	; 0x15
    1956:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8c 89       	ldd	r24, Y+20	; 0x14
    195a:	9d 89       	ldd	r25, Y+21	; 0x15
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <Enable_Pulse+0x12a>
    1960:	24 c0       	rjmp	.+72     	; 0x19aa <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6e 89       	ldd	r22, Y+22	; 0x16
    1964:	7f 89       	ldd	r23, Y+23	; 0x17
    1966:	88 8d       	ldd	r24, Y+24	; 0x18
    1968:	99 8d       	ldd	r25, Y+25	; 0x19
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9d 8b       	std	Y+21, r25	; 0x15
    1974:	8c 8b       	std	Y+20, r24	; 0x14
    1976:	8c 89       	ldd	r24, Y+20	; 0x14
    1978:	9d 89       	ldd	r25, Y+21	; 0x15
    197a:	99 8b       	std	Y+17, r25	; 0x11
    197c:	88 8b       	std	Y+16, r24	; 0x10
    197e:	88 89       	ldd	r24, Y+16	; 0x10
    1980:	99 89       	ldd	r25, Y+17	; 0x11
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <Enable_Pulse+0x172>
    1986:	99 8b       	std	Y+17, r25	; 0x11
    1988:	88 8b       	std	Y+16, r24	; 0x10
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    198c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    198e:	78 a1       	ldd	r23, Y+32	; 0x20
    1990:	89 a1       	ldd	r24, Y+33	; 0x21
    1992:	9a a1       	ldd	r25, Y+34	; 0x22
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8e 8f       	std	Y+30, r24	; 0x1e
    199e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a4:	8a 95       	dec	r24
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <Enable_Pulse+0x194>
    19a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	63 e0       	ldi	r22, 0x03	; 3
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <Enable_Pulse+0x1f6>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <Enable_Pulse+0x256>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Enable_Pulse+0x244>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <Enable_Pulse+0x238>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <Enable_Pulse+0x280>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a98:	a6 96       	adiw	r28, 0x26	; 38
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <Lcd_Data+0x6>
    1ab0:	0f 92       	push	r0
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	82 95       	swap	r24
    1ac0:	80 7f       	andi	r24, 0xF0	; 240
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	60 ef       	ldi	r22, 0xF0	; 240
    1ad2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ad4:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
	Enable_Pulse();
    1ad8:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	60 ef       	ldi	r22, 0xF0	; 240
    1ae0:	49 81       	ldd	r20, Y+1	; 0x01
    1ae2:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
	Enable_Pulse();
    1ae6:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <Lcd_Cmd+0x6>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	82 95       	swap	r24
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	60 ef       	ldi	r22, 0xF0	; 240
    1b1e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b20:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
	Enable_Pulse();
    1b24:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	60 ef       	ldi	r22, 0xF0	; 240
    1b2c:	49 81       	ldd	r20, Y+1	; 0x01
    1b2e:	0e 94 1f 1b 	call	0x363e	; 0x363e <Dio_WriteGroup>
	Enable_Pulse();
    1b32:	0e 94 08 0c 	call	0x1810	; 0x1810 <Enable_Pulse>
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_Data>
}
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <Lcd_DisplayStr+0x6>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b70:	80 81       	ld	r24, Z
    1b72:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
		str++;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	80 81       	ld	r24, Z
    1b86:	88 23       	and	r24, r24
    1b88:	89 f7       	brne	.-30     	; 0x1b6c <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <Lcd_Goto_Row_Column+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <Lcd_Goto_Row_Column+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	31 f0       	breq	.+12     	; 0x1bc2 <Lcd_Goto_Row_Column+0x2e>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	21 30       	cpi	r18, 0x01	; 1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	31 f0       	breq	.+12     	; 0x1bcc <Lcd_Goto_Row_Column+0x38>
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 58       	subi	r24, 0x80	; 128
    1bc6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 54       	subi	r24, 0x40	; 64
    1bd0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Lcd_Cmd>
		break;
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <Lcd_DisplayNum>:

void Lcd_DisplayNum(u16 num)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <Lcd_DisplayNum+0x6>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	28 ee       	ldi	r18, 0xE8	; 232
    1bf6:	33 e0       	ldi	r19, 0x03	; 3
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1bfe:	cb 01       	movw	r24, r22
    1c00:	80 5d       	subi	r24, 0xD0	; 208
    1c02:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	28 ee       	ldi	r18, 0xE8	; 232
    1c0c:	33 e0       	ldi	r19, 0x03	; 3
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c14:	24 e6       	ldi	r18, 0x64	; 100
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	b9 01       	movw	r22, r18
    1c1a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c1e:	cb 01       	movw	r24, r22
    1c20:	80 5d       	subi	r24, 0xD0	; 208
    1c22:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	28 ee       	ldi	r18, 0xE8	; 232
    1c2c:	33 e0       	ldi	r19, 0x03	; 3
    1c2e:	b9 01       	movw	r22, r18
    1c30:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c34:	24 e6       	ldi	r18, 0x64	; 100
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	b9 01       	movw	r22, r18
    1c3a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c48:	cb 01       	movw	r24, r22
    1c4a:	80 5d       	subi	r24, 0xD0	; 208
    1c4c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	28 ee       	ldi	r18, 0xE8	; 232
    1c56:	33 e0       	ldi	r19, 0x03	; 3
    1c58:	b9 01       	movw	r22, r18
    1c5a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c5e:	24 e6       	ldi	r18, 0x64	; 100
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	b9 01       	movw	r22, r18
    1c64:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__udivmodhi4>
    1c72:	80 5d       	subi	r24, 0xD0	; 208
    1c74:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	69 87       	std	Y+9, r22	; 0x09
    1c98:	7a 87       	std	Y+10, r23	; 0x0a
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1c9e:	18 86       	std	Y+8, r1	; 0x08
    1ca0:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	ad 83       	std	Y+5, r26	; 0x05
    1cb0:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1cb2:	1a 82       	std	Y+2, r1	; 0x02
    1cb4:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1cb6:	69 85       	ldd	r22, Y+9	; 0x09
    1cb8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	cc 01       	movw	r24, r24
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	69 85       	ldd	r22, Y+9	; 0x09
    1ce2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ce4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ce8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	ad 83       	std	Y+5, r26	; 0x05
    1cf6:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1cf8:	6b 81       	ldd	r22, Y+3	; 0x03
    1cfa:	7c 81       	ldd	r23, Y+4	; 0x04
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	48 ec       	ldi	r20, 0xC8	; 200
    1d06:	52 e4       	ldi	r21, 0x42	; 66
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1d20:	8f 81       	ldd	r24, Y+7	; 0x07
    1d22:	98 85       	ldd	r25, Y+8	; 0x08
    1d24:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1d28:	8e e2       	ldi	r24, 0x2E	; 46
    1d2a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <Lcd_DisplayNum>
}
    1d36:	2c 96       	adiw	r28, 0x0c	; 12
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <ndigit>:
	vdown
}axis;


int ndigit(int n)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <ndigit+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <ndigit+0x8>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    if (n/10 == 0)
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	09 96       	adiw	r24, 0x09	; 9
    1d5e:	83 31       	cpi	r24, 0x13	; 19
    1d60:	91 05       	cpc	r25, r1
    1d62:	28 f4       	brcc	.+10     	; 0x1d6e <ndigit+0x26>
        return 1;
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3c 83       	std	Y+4, r19	; 0x04
    1d6a:	2b 83       	std	Y+3, r18	; 0x03
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <ndigit+0x44>
    return 1 + ndigit(n / 10);
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	2a e0       	ldi	r18, 0x0A	; 10
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	b9 01       	movw	r22, r18
    1d78:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <__divmodhi4>
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <ndigit>
    1d82:	9c 01       	movw	r18, r24
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	3c 83       	std	Y+4, r19	; 0x04
    1d8a:	2b 83       	std	Y+3, r18	; 0x03
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <GLCD_Command>:

void GLCD_Command(char Command) /* GLCD command function */
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	e1 97       	sbiw	r28, 0x31	; 49
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Command;        /* Copy command on data pin */
    1db4:	eb e3       	ldi	r30, 0x3B	; 59
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	89 a9       	ldd	r24, Y+49	; 0x31
    1dba:	80 83       	st	Z, r24
    Command_Port &= ~(1 << RS); /* Make RS LOW to select command register */
    1dbc:	a5 e3       	ldi	r26, 0x35	; 53
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e3       	ldi	r30, 0x35	; 53
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    1dca:	a5 e3       	ldi	r26, 0x35	; 53
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e3       	ldi	r30, 0x35	; 53
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8d 7f       	andi	r24, 0xFD	; 253
    1dd6:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    1dd8:	a5 e3       	ldi	r26, 0x35	; 53
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e3       	ldi	r30, 0x35	; 53
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	84 60       	ori	r24, 0x04	; 4
    1de4:	8c 93       	st	X, r24
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 ea       	ldi	r26, 0xA0	; 160
    1dec:	b0 e4       	ldi	r27, 0x40	; 64
    1dee:	8d a7       	std	Y+45, r24	; 0x2d
    1df0:	9e a7       	std	Y+46, r25	; 0x2e
    1df2:	af a7       	std	Y+47, r26	; 0x2f
    1df4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1df6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1df8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfe:	2b ea       	ldi	r18, 0xAB	; 171
    1e00:	3a ea       	ldi	r19, 0xAA	; 170
    1e02:	4a e2       	ldi	r20, 0x2A	; 42
    1e04:	50 e4       	ldi	r21, 0x40	; 64
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	89 a7       	std	Y+41, r24	; 0x29
    1e10:	9a a7       	std	Y+42, r25	; 0x2a
    1e12:	ab a7       	std	Y+43, r26	; 0x2b
    1e14:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e16:	69 a5       	ldd	r22, Y+41	; 0x29
    1e18:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	1c f4       	brge	.+6      	; 0x1e34 <GLCD_Command+0x96>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	88 a7       	std	Y+40, r24	; 0x28
    1e32:	91 c0       	rjmp	.+290    	; 0x1f56 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    1e34:	69 a5       	ldd	r22, Y+41	; 0x29
    1e36:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4f e7       	ldi	r20, 0x7F	; 127
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e48:	18 16       	cp	r1, r24
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <GLCD_Command+0xb0>
    1e4c:	7b c0       	rjmp	.+246    	; 0x1f44 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1e4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e50:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e54:	98 a9       	ldd	r25, Y+48	; 0x30
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a e7       	ldi	r20, 0x7A	; 122
    1e5c:	54 e4       	ldi	r21, 0x44	; 68
    1e5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	8c a3       	std	Y+36, r24	; 0x24
    1e68:	9d a3       	std	Y+37, r25	; 0x25
    1e6a:	ae a3       	std	Y+38, r26	; 0x26
    1e6c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6c a1       	ldd	r22, Y+36	; 0x24
    1e70:	7d a1       	ldd	r23, Y+37	; 0x25
    1e72:	8e a1       	ldd	r24, Y+38	; 0x26
    1e74:	9f a1       	ldd	r25, Y+39	; 0x27
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	88 a3       	std	Y+32, r24	; 0x20
    1e88:	99 a3       	std	Y+33, r25	; 0x21
    1e8a:	aa a3       	std	Y+34, r26	; 0x22
    1e8c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e8e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e90:	79 a1       	ldd	r23, Y+33	; 0x21
    1e92:	8a a1       	ldd	r24, Y+34	; 0x22
    1e94:	9b a1       	ldd	r25, Y+35	; 0x23
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <GLCD_Command+0x112>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9f 8f       	std	Y+31, r25	; 0x1f
    1eac:	8e 8f       	std	Y+30, r24	; 0x1e
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <GLCD_Command+0x190>
	else if (__tmp > 65535)
    1eb0:	68 a1       	ldd	r22, Y+32	; 0x20
    1eb2:	79 a1       	ldd	r23, Y+33	; 0x21
    1eb4:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb6:	9b a1       	ldd	r25, Y+35	; 0x23
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eca:	7d a1       	ldd	r23, Y+37	; 0x25
    1ecc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ece:	9f a1       	ldd	r25, Y+39	; 0x27
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9f 8f       	std	Y+31, r25	; 0x1f
    1eee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <GLCD_Command+0x172>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9d 8f       	std	Y+29, r25	; 0x1d
    1ef8:	8c 8f       	std	Y+28, r24	; 0x1c
    1efa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1efc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <GLCD_Command+0x160>
    1f02:	9d 8f       	std	Y+29, r25	; 0x1d
    1f04:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f0e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <GLCD_Command+0x154>
    1f18:	24 c0       	rjmp	.+72     	; 0x1f62 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f1c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f1e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f20:	9b a1       	ldd	r25, Y+35	; 0x23
    1f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f2c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f32:	9b 8f       	std	Y+27, r25	; 0x1b
    1f34:	8a 8f       	std	Y+26, r24	; 0x1a
    1f36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <GLCD_Command+0x19c>
    1f3e:	9b 8f       	std	Y+27, r25	; 0x1b
    1f40:	8a 8f       	std	Y+26, r24	; 0x1a
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f44:	69 a5       	ldd	r22, Y+41	; 0x29
    1f46:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	88 a7       	std	Y+40, r24	; 0x28
    1f56:	88 a5       	ldd	r24, Y+40	; 0x28
    1f58:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f5a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f5c:	8a 95       	dec	r24
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <GLCD_Command+0x1be>
    1f60:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    1f62:	a5 e3       	ldi	r26, 0x35	; 53
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e5 e3       	ldi	r30, 0x35	; 53
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8b 7f       	andi	r24, 0xFB	; 251
    1f6e:	8c 93       	st	X, r24
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 ea       	ldi	r26, 0xA0	; 160
    1f76:	b0 e4       	ldi	r27, 0x40	; 64
    1f78:	8d 8b       	std	Y+21, r24	; 0x15
    1f7a:	9e 8b       	std	Y+22, r25	; 0x16
    1f7c:	af 8b       	std	Y+23, r26	; 0x17
    1f7e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f80:	6d 89       	ldd	r22, Y+21	; 0x15
    1f82:	7e 89       	ldd	r23, Y+22	; 0x16
    1f84:	8f 89       	ldd	r24, Y+23	; 0x17
    1f86:	98 8d       	ldd	r25, Y+24	; 0x18
    1f88:	2b ea       	ldi	r18, 0xAB	; 171
    1f8a:	3a ea       	ldi	r19, 0xAA	; 170
    1f8c:	4a e2       	ldi	r20, 0x2A	; 42
    1f8e:	50 e4       	ldi	r21, 0x40	; 64
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	9a 8b       	std	Y+18, r25	; 0x12
    1f9c:	ab 8b       	std	Y+19, r26	; 0x13
    1f9e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fa0:	69 89       	ldd	r22, Y+17	; 0x11
    1fa2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <GLCD_Command+0x220>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	88 8b       	std	Y+16, r24	; 0x10
    1fbc:	91 c0       	rjmp	.+290    	; 0x20e0 <GLCD_Command+0x342>
	else if (__tmp > 255)
    1fbe:	69 89       	ldd	r22, Y+17	; 0x11
    1fc0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	53 e4       	ldi	r21, 0x43	; 67
    1fce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	0c f0       	brlt	.+2      	; 0x1fd8 <GLCD_Command+0x23a>
    1fd6:	7b c0       	rjmp	.+246    	; 0x20ce <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a e7       	ldi	r20, 0x7A	; 122
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8c 87       	std	Y+12, r24	; 0x0c
    1ff2:	9d 87       	std	Y+13, r25	; 0x0d
    1ff4:	ae 87       	std	Y+14, r26	; 0x0e
    1ff6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ffa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ffc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	88 87       	std	Y+8, r24	; 0x08
    2012:	99 87       	std	Y+9, r25	; 0x09
    2014:	aa 87       	std	Y+10, r26	; 0x0a
    2016:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2018:	68 85       	ldd	r22, Y+8	; 0x08
    201a:	79 85       	ldd	r23, Y+9	; 0x09
    201c:	8a 85       	ldd	r24, Y+10	; 0x0a
    201e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <GLCD_Command+0x29c>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9f 83       	std	Y+7, r25	; 0x07
    2036:	8e 83       	std	Y+6, r24	; 0x06
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    203a:	68 85       	ldd	r22, Y+8	; 0x08
    203c:	79 85       	ldd	r23, Y+9	; 0x09
    203e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2040:	9b 85       	ldd	r25, Y+11	; 0x0b
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6c 85       	ldd	r22, Y+12	; 0x0c
    2054:	7d 85       	ldd	r23, Y+13	; 0x0d
    2056:	8e 85       	ldd	r24, Y+14	; 0x0e
    2058:	9f 85       	ldd	r25, Y+15	; 0x0f
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9f 83       	std	Y+7, r25	; 0x07
    2078:	8e 83       	std	Y+6, r24	; 0x06
    207a:	0f c0       	rjmp	.+30     	; 0x209a <GLCD_Command+0x2fc>
    207c:	88 ec       	ldi	r24, 0xC8	; 200
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9d 83       	std	Y+5, r25	; 0x05
    2082:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <GLCD_Command+0x2ea>
    208c:	9d 83       	std	Y+5, r25	; 0x05
    208e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8e 81       	ldd	r24, Y+6	; 0x06
    2092:	9f 81       	ldd	r25, Y+7	; 0x07
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9f 83       	std	Y+7, r25	; 0x07
    2098:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8e 81       	ldd	r24, Y+6	; 0x06
    209c:	9f 81       	ldd	r25, Y+7	; 0x07
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <GLCD_Command+0x2de>
    20a2:	24 c0       	rjmp	.+72     	; 0x20ec <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	68 85       	ldd	r22, Y+8	; 0x08
    20a6:	79 85       	ldd	r23, Y+9	; 0x09
    20a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9f 83       	std	Y+7, r25	; 0x07
    20b6:	8e 83       	std	Y+6, r24	; 0x06
    20b8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ba:	9f 81       	ldd	r25, Y+7	; 0x07
    20bc:	9b 83       	std	Y+3, r25	; 0x03
    20be:	8a 83       	std	Y+2, r24	; 0x02
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <GLCD_Command+0x326>
    20c8:	9b 83       	std	Y+3, r25	; 0x03
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ce:	69 89       	ldd	r22, Y+17	; 0x11
    20d0:	7a 89       	ldd	r23, Y+18	; 0x12
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	88 8b       	std	Y+16, r24	; 0x10
    20e0:	88 89       	ldd	r24, Y+16	; 0x10
    20e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	8a 95       	dec	r24
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <GLCD_Command+0x348>
    20ea:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    20ec:	e1 96       	adiw	r28, 0x31	; 49
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <GLCD_Data>:

void GLCD_Data(char Data) /* GLCD data function */
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	e1 97       	sbiw	r28, 0x31	; 49
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	89 ab       	std	Y+49, r24	; 0x31
    Data_Port = Data;           /* Copy data on data pin */
    2114:	eb e3       	ldi	r30, 0x3B	; 59
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	89 a9       	ldd	r24, Y+49	; 0x31
    211a:	80 83       	st	Z, r24
    Command_Port |= (1 << RS);  /* Make RS HIGH to select data register */
    211c:	a5 e3       	ldi	r26, 0x35	; 53
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e5 e3       	ldi	r30, 0x35	; 53
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	81 60       	ori	r24, 0x01	; 1
    2128:	8c 93       	st	X, r24
    Command_Port &= ~(1 << RW); /* Make RW LOW to select write operation */
    212a:	a5 e3       	ldi	r26, 0x35	; 53
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e5 e3       	ldi	r30, 0x35	; 53
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8d 7f       	andi	r24, 0xFD	; 253
    2136:	8c 93       	st	X, r24
    Command_Port |= (1 << EN);  /* Make HIGH to LOW transition on Enable pin */
    2138:	a5 e3       	ldi	r26, 0x35	; 53
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e5 e3       	ldi	r30, 0x35	; 53
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	8c 93       	st	X, r24
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 ea       	ldi	r26, 0xA0	; 160
    214c:	b0 e4       	ldi	r27, 0x40	; 64
    214e:	8d a7       	std	Y+45, r24	; 0x2d
    2150:	9e a7       	std	Y+46, r25	; 0x2e
    2152:	af a7       	std	Y+47, r26	; 0x2f
    2154:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2156:	6d a5       	ldd	r22, Y+45	; 0x2d
    2158:	7e a5       	ldd	r23, Y+46	; 0x2e
    215a:	8f a5       	ldd	r24, Y+47	; 0x2f
    215c:	98 a9       	ldd	r25, Y+48	; 0x30
    215e:	2b ea       	ldi	r18, 0xAB	; 171
    2160:	3a ea       	ldi	r19, 0xAA	; 170
    2162:	4a e2       	ldi	r20, 0x2A	; 42
    2164:	50 e4       	ldi	r21, 0x40	; 64
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	89 a7       	std	Y+41, r24	; 0x29
    2170:	9a a7       	std	Y+42, r25	; 0x2a
    2172:	ab a7       	std	Y+43, r26	; 0x2b
    2174:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2176:	69 a5       	ldd	r22, Y+41	; 0x29
    2178:	7a a5       	ldd	r23, Y+42	; 0x2a
    217a:	8b a5       	ldd	r24, Y+43	; 0x2b
    217c:	9c a5       	ldd	r25, Y+44	; 0x2c
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	1c f4       	brge	.+6      	; 0x2194 <GLCD_Data+0x96>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	88 a7       	std	Y+40, r24	; 0x28
    2192:	91 c0       	rjmp	.+290    	; 0x22b6 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    2194:	69 a5       	ldd	r22, Y+41	; 0x29
    2196:	7a a5       	ldd	r23, Y+42	; 0x2a
    2198:	8b a5       	ldd	r24, Y+43	; 0x2b
    219a:	9c a5       	ldd	r25, Y+44	; 0x2c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	0c f0       	brlt	.+2      	; 0x21ae <GLCD_Data+0xb0>
    21ac:	7b c0       	rjmp	.+246    	; 0x22a4 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    21ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    21b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    21b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b4:	98 a9       	ldd	r25, Y+48	; 0x30
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8c a3       	std	Y+36, r24	; 0x24
    21c8:	9d a3       	std	Y+37, r25	; 0x25
    21ca:	ae a3       	std	Y+38, r26	; 0x26
    21cc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	6c a1       	ldd	r22, Y+36	; 0x24
    21d0:	7d a1       	ldd	r23, Y+37	; 0x25
    21d2:	8e a1       	ldd	r24, Y+38	; 0x26
    21d4:	9f a1       	ldd	r25, Y+39	; 0x27
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	88 a3       	std	Y+32, r24	; 0x20
    21e8:	99 a3       	std	Y+33, r25	; 0x21
    21ea:	aa a3       	std	Y+34, r26	; 0x22
    21ec:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21ee:	68 a1       	ldd	r22, Y+32	; 0x20
    21f0:	79 a1       	ldd	r23, Y+33	; 0x21
    21f2:	8a a1       	ldd	r24, Y+34	; 0x22
    21f4:	9b a1       	ldd	r25, Y+35	; 0x23
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <GLCD_Data+0x112>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9f 8f       	std	Y+31, r25	; 0x1f
    220c:	8e 8f       	std	Y+30, r24	; 0x1e
    220e:	3f c0       	rjmp	.+126    	; 0x228e <GLCD_Data+0x190>
	else if (__tmp > 65535)
    2210:	68 a1       	ldd	r22, Y+32	; 0x20
    2212:	79 a1       	ldd	r23, Y+33	; 0x21
    2214:	8a a1       	ldd	r24, Y+34	; 0x22
    2216:	9b a1       	ldd	r25, Y+35	; 0x23
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	6c a1       	ldd	r22, Y+36	; 0x24
    222a:	7d a1       	ldd	r23, Y+37	; 0x25
    222c:	8e a1       	ldd	r24, Y+38	; 0x26
    222e:	9f a1       	ldd	r25, Y+39	; 0x27
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9f 8f       	std	Y+31, r25	; 0x1f
    224e:	8e 8f       	std	Y+30, r24	; 0x1e
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <GLCD_Data+0x172>
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9d 8f       	std	Y+29, r25	; 0x1d
    2258:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    225a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    225c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <GLCD_Data+0x160>
    2262:	9d 8f       	std	Y+29, r25	; 0x1d
    2264:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2268:	9f 8d       	ldd	r25, Y+31	; 0x1f
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9f 8f       	std	Y+31, r25	; 0x1f
    226e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2272:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <GLCD_Data+0x154>
    2278:	24 c0       	rjmp	.+72     	; 0x22c2 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	68 a1       	ldd	r22, Y+32	; 0x20
    227c:	79 a1       	ldd	r23, Y+33	; 0x21
    227e:	8a a1       	ldd	r24, Y+34	; 0x22
    2280:	9b a1       	ldd	r25, Y+35	; 0x23
    2282:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9f 8f       	std	Y+31, r25	; 0x1f
    228c:	8e 8f       	std	Y+30, r24	; 0x1e
    228e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2290:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2292:	9b 8f       	std	Y+27, r25	; 0x1b
    2294:	8a 8f       	std	Y+26, r24	; 0x1a
    2296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2298:	9b 8d       	ldd	r25, Y+27	; 0x1b
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <GLCD_Data+0x19c>
    229e:	9b 8f       	std	Y+27, r25	; 0x1b
    22a0:	8a 8f       	std	Y+26, r24	; 0x1a
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22a4:	69 a5       	ldd	r22, Y+41	; 0x29
    22a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    22a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	88 a7       	std	Y+40, r24	; 0x28
    22b6:	88 a5       	ldd	r24, Y+40	; 0x28
    22b8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22ba:	89 8d       	ldd	r24, Y+25	; 0x19
    22bc:	8a 95       	dec	r24
    22be:	f1 f7       	brne	.-4      	; 0x22bc <GLCD_Data+0x1be>
    22c0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);
    Command_Port &= ~(1 << EN);
    22c2:	a5 e3       	ldi	r26, 0x35	; 53
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e5 e3       	ldi	r30, 0x35	; 53
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8b 7f       	andi	r24, 0xFB	; 251
    22ce:	8c 93       	st	X, r24
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 ea       	ldi	r26, 0xA0	; 160
    22d6:	b0 e4       	ldi	r27, 0x40	; 64
    22d8:	8d 8b       	std	Y+21, r24	; 0x15
    22da:	9e 8b       	std	Y+22, r25	; 0x16
    22dc:	af 8b       	std	Y+23, r26	; 0x17
    22de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	2b ea       	ldi	r18, 0xAB	; 171
    22ea:	3a ea       	ldi	r19, 0xAA	; 170
    22ec:	4a e2       	ldi	r20, 0x2A	; 42
    22ee:	50 e4       	ldi	r21, 0x40	; 64
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	89 8b       	std	Y+17, r24	; 0x11
    22fa:	9a 8b       	std	Y+18, r25	; 0x12
    22fc:	ab 8b       	std	Y+19, r26	; 0x13
    22fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2300:	69 89       	ldd	r22, Y+17	; 0x11
    2302:	7a 89       	ldd	r23, Y+18	; 0x12
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	1c f4       	brge	.+6      	; 0x231e <GLCD_Data+0x220>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	88 8b       	std	Y+16, r24	; 0x10
    231c:	91 c0       	rjmp	.+290    	; 0x2440 <GLCD_Data+0x342>
	else if (__tmp > 255)
    231e:	69 89       	ldd	r22, Y+17	; 0x11
    2320:	7a 89       	ldd	r23, Y+18	; 0x12
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	53 e4       	ldi	r21, 0x43	; 67
    232e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	0c f0       	brlt	.+2      	; 0x2338 <GLCD_Data+0x23a>
    2336:	7b c0       	rjmp	.+246    	; 0x242e <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    2338:	6d 89       	ldd	r22, Y+21	; 0x15
    233a:	7e 89       	ldd	r23, Y+22	; 0x16
    233c:	8f 89       	ldd	r24, Y+23	; 0x17
    233e:	98 8d       	ldd	r25, Y+24	; 0x18
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a e7       	ldi	r20, 0x7A	; 122
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8c 87       	std	Y+12, r24	; 0x0c
    2352:	9d 87       	std	Y+13, r25	; 0x0d
    2354:	ae 87       	std	Y+14, r26	; 0x0e
    2356:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6c 85       	ldd	r22, Y+12	; 0x0c
    235a:	7d 85       	ldd	r23, Y+13	; 0x0d
    235c:	8e 85       	ldd	r24, Y+14	; 0x0e
    235e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	88 87       	std	Y+8, r24	; 0x08
    2372:	99 87       	std	Y+9, r25	; 0x09
    2374:	aa 87       	std	Y+10, r26	; 0x0a
    2376:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2378:	68 85       	ldd	r22, Y+8	; 0x08
    237a:	79 85       	ldd	r23, Y+9	; 0x09
    237c:	8a 85       	ldd	r24, Y+10	; 0x0a
    237e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <GLCD_Data+0x29c>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9f 83       	std	Y+7, r25	; 0x07
    2396:	8e 83       	std	Y+6, r24	; 0x06
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    239a:	68 85       	ldd	r22, Y+8	; 0x08
    239c:	79 85       	ldd	r23, Y+9	; 0x09
    239e:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    23b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    23b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9f 83       	std	Y+7, r25	; 0x07
    23d8:	8e 83       	std	Y+6, r24	; 0x06
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <GLCD_Data+0x2fc>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9d 83       	std	Y+5, r25	; 0x05
    23e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	9d 81       	ldd	r25, Y+5	; 0x05
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <GLCD_Data+0x2ea>
    23ec:	9d 83       	std	Y+5, r25	; 0x05
    23ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8e 81       	ldd	r24, Y+6	; 0x06
    23f2:	9f 81       	ldd	r25, Y+7	; 0x07
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9f 83       	std	Y+7, r25	; 0x07
    23f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8e 81       	ldd	r24, Y+6	; 0x06
    23fc:	9f 81       	ldd	r25, Y+7	; 0x07
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <GLCD_Data+0x2de>
    2402:	24 c0       	rjmp	.+72     	; 0x244c <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	68 85       	ldd	r22, Y+8	; 0x08
    2406:	79 85       	ldd	r23, Y+9	; 0x09
    2408:	8a 85       	ldd	r24, Y+10	; 0x0a
    240a:	9b 85       	ldd	r25, Y+11	; 0x0b
    240c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9f 83       	std	Y+7, r25	; 0x07
    2416:	8e 83       	std	Y+6, r24	; 0x06
    2418:	8e 81       	ldd	r24, Y+6	; 0x06
    241a:	9f 81       	ldd	r25, Y+7	; 0x07
    241c:	9b 83       	std	Y+3, r25	; 0x03
    241e:	8a 83       	std	Y+2, r24	; 0x02
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <GLCD_Data+0x326>
    2428:	9b 83       	std	Y+3, r25	; 0x03
    242a:	8a 83       	std	Y+2, r24	; 0x02
    242c:	0f c0       	rjmp	.+30     	; 0x244c <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242e:	69 89       	ldd	r22, Y+17	; 0x11
    2430:	7a 89       	ldd	r23, Y+18	; 0x12
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	88 8b       	std	Y+16, r24	; 0x10
    2440:	88 89       	ldd	r24, Y+16	; 0x10
    2442:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	8a 95       	dec	r24
    2448:	f1 f7       	brne	.-4      	; 0x2446 <GLCD_Data+0x348>
    244a:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    244c:	e1 96       	adiw	r28, 0x31	; 49
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <GLCD_Init>:

void GLCD_Init() /* GLCD initialize function */
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	2e 97       	sbiw	r28, 0x0e	; 14
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    Data_Port_Dir = 0xFF;
    2472:	ea e3       	ldi	r30, 0x3A	; 58
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	80 83       	st	Z, r24
    Command_Port_Dir = 0xFF;
    247a:	e4 e3       	ldi	r30, 0x34	; 52
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	80 83       	st	Z, r24
    /* Select both left & right half of display & Keep reset pin high */
    Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    2482:	a5 e3       	ldi	r26, 0x35	; 53
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e5 e3       	ldi	r30, 0x35	; 53
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	88 63       	ori	r24, 0x38	; 56
    248e:	8c 93       	st	X, r24
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 ea       	ldi	r26, 0xA0	; 160
    2496:	b1 e4       	ldi	r27, 0x41	; 65
    2498:	8b 87       	std	Y+11, r24	; 0x0b
    249a:	9c 87       	std	Y+12, r25	; 0x0c
    249c:	ad 87       	std	Y+13, r26	; 0x0d
    249e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8f 83       	std	Y+7, r24	; 0x07
    24ba:	98 87       	std	Y+8, r25	; 0x08
    24bc:	a9 87       	std	Y+9, r26	; 0x09
    24be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <GLCD_Init+0x84>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <GLCD_Init+0xe4>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <GLCD_Init+0xd2>
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <GLCD_Init+0xc6>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <GLCD_Init+0x10e>
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20);
    GLCD_Command(0x3E); /* Display OFF */
    2574:	8e e3       	ldi	r24, 0x3E	; 62
    2576:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    GLCD_Command(0x40); /* Set Y address (column=0) */
    257a:	80 e4       	ldi	r24, 0x40	; 64
    257c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    2580:	88 eb       	ldi	r24, 0xB8	; 184
    2582:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    GLCD_Command(0xC0); /* Set z address (start line=0) */
    2586:	80 ec       	ldi	r24, 0xC0	; 192
    2588:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    GLCD_Command(0x3F); /* Display ON */
    258c:	8f e3       	ldi	r24, 0x3F	; 63
    258e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
}
    2592:	2e 96       	adiw	r28, 0x0e	; 14
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <GLCD_ClearAll>:

void GLCD_ClearAll() /* GLCD all display clear function */
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <GLCD_ClearAll+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <GLCD_ClearAll+0x8>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <GLCD_ClearAll+0xa>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    25b2:	a5 e3       	ldi	r26, 0x35	; 53
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e3       	ldi	r30, 0x35	; 53
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	8c 93       	st	X, r24
    Command_Port &= ~(1 << CS1);
    25c0:	a5 e3       	ldi	r26, 0x35	; 53
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e3       	ldi	r30, 0x35	; 53
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	87 7f       	andi	r24, 0xF7	; 247
    25cc:	8c 93       	st	X, r24
    for (int q = 0; q < 2; q++)
    25ce:	1a 82       	std	Y+2, r1	; 0x02
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	34 c0       	rjmp	.+104    	; 0x263c <GLCD_ClearAll+0x98>
    {
        for (i = 0; i < TotalPage; i++)
    25d4:	1e 82       	std	Y+6, r1	; 0x06
    25d6:	1d 82       	std	Y+5, r1	; 0x05
    25d8:	19 c0       	rjmp	.+50     	; 0x260c <GLCD_ClearAll+0x68>
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	88 54       	subi	r24, 0x48	; 72
    25de:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
            for (j = 0; j < 64; j++)
    25e2:	1c 82       	std	Y+4, r1	; 0x04
    25e4:	1b 82       	std	Y+3, r1	; 0x03
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <GLCD_ClearAll+0x54>
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
        {
            GLCD_Command((0xB8) + i); /* Increment page each time after 64 column */
            for (j = 0; j < 64; j++)
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	80 34       	cpi	r24, 0x40	; 64
    25fe:	91 05       	cpc	r25, r1
    2600:	9c f3       	brlt	.-26     	; 0x25e8 <GLCD_ClearAll+0x44>
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    {
        for (i = 0; i < TotalPage; i++)
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	88 30       	cpi	r24, 0x08	; 8
    2612:	91 05       	cpc	r25, r1
    2614:	14 f3       	brlt	.-60     	; 0x25da <GLCD_ClearAll+0x36>
            for (j = 0; j < 64; j++)
            {
                GLCD_Data(0); /* Write zeros to all 64 column */
            }
        }
        Command_Port |= (1 << CS1);
    2616:	a5 e3       	ldi	r26, 0x35	; 53
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e5 e3       	ldi	r30, 0x35	; 53
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	88 60       	ori	r24, 0x08	; 8
    2622:	8c 93       	st	X, r24
        Command_Port &= ~(1 << CS2);
    2624:	a5 e3       	ldi	r26, 0x35	; 53
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e5 e3       	ldi	r30, 0x35	; 53
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	8f 7e       	andi	r24, 0xEF	; 239
    2630:	8c 93       	st	X, r24
    int i, j;
    /* Select both left & right half of display */
    // Command_Port |= (1 << CS1) | (1 << CS2);
    Command_Port |= (1 << CS2);
    Command_Port &= ~(1 << CS1);
    for (int q = 0; q < 2; q++)
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	82 30       	cpi	r24, 0x02	; 2
    2642:	91 05       	cpc	r25, r1
    2644:	3c f2       	brlt	.-114    	; 0x25d4 <GLCD_ClearAll+0x30>
            }
        }
        Command_Port |= (1 << CS1);
        Command_Port &= ~(1 << CS2);
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    2646:	80 e4       	ldi	r24, 0x40	; 64
    2648:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    GLCD_Command(0xB8); /* Set x address (page=0) */
    264c:	88 eb       	ldi	r24, 0xB8	; 184
    264e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
}
    2652:	26 96       	adiw	r28, 0x06	; 6
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <direction>:

void direction(dir d)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
	if(d == left)
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 23       	and	r24, r24
    2674:	79 f4       	brne	.+30     	; 0x2694 <direction+0x30>
	{
		Command_Port |= (1 << CS2);
    2676:	a5 e3       	ldi	r26, 0x35	; 53
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e5 e3       	ldi	r30, 0x35	; 53
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 61       	ori	r24, 0x10	; 16
    2682:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS1);
    2684:	a5 e3       	ldi	r26, 0x35	; 53
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e5 e3       	ldi	r30, 0x35	; 53
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	87 7f       	andi	r24, 0xF7	; 247
    2690:	8c 93       	st	X, r24
    2692:	0e c0       	rjmp	.+28     	; 0x26b0 <direction+0x4c>
	}
	else
	{
		Command_Port |= (1 << CS1);
    2694:	a5 e3       	ldi	r26, 0x35	; 53
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e3       	ldi	r30, 0x35	; 53
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 60       	ori	r24, 0x08	; 8
    26a0:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS2);
    26a2:	a5 e3       	ldi	r26, 0x35	; 53
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e5 e3       	ldi	r30, 0x35	; 53
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	8f 7e       	andi	r24, 0xEF	; 239
    26ae:	8c 93       	st	X, r24
	}
}
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <clearline>:
void clearline(axis a, int x, int y, int n, dir d)
{
    26b8:	0f 93       	push	r16
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	2c 97       	sbiw	r28, 0x0c	; 12
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	7d 83       	std	Y+5, r23	; 0x05
    26d2:	6c 83       	std	Y+4, r22	; 0x04
    26d4:	5f 83       	std	Y+7, r21	; 0x07
    26d6:	4e 83       	std	Y+6, r20	; 0x06
    26d8:	39 87       	std	Y+9, r19	; 0x09
    26da:	28 87       	std	Y+8, r18	; 0x08
    26dc:	0a 87       	std	Y+10, r16	; 0x0a
	direction(d);
    26de:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e0:	0e 94 32 13 	call	0x2664	; 0x2664 <direction>
		switch(a)
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3c 87       	std	Y+12, r19	; 0x0c
    26ec:	2b 87       	std	Y+11, r18	; 0x0b
    26ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    26f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	91 05       	cpc	r25, r1
    26f6:	71 f0       	breq	.+28     	; 0x2714 <clearline+0x5c>
    26f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    26fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    26fc:	22 30       	cpi	r18, 0x02	; 2
    26fe:	31 05       	cpc	r19, r1
    2700:	89 f4       	brne	.+34     	; 0x2724 <clearline+0x6c>
		{
		case h:
			break;
		case vdown:
			GLCD_Command((0xB8) + y);
    2702:	8e 81       	ldd	r24, Y+6	; 0x06
    2704:	88 54       	subi	r24, 0x48	; 72
    2706:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
			GLCD_Command((0x40) + x);
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	80 5c       	subi	r24, 0xC0	; 192
    270e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    2712:	08 c0       	rjmp	.+16     	; 0x2724 <clearline+0x6c>
			break;
		case vup:
			GLCD_Command((0xB8) + y + 1);
    2714:	8e 81       	ldd	r24, Y+6	; 0x06
    2716:	87 54       	subi	r24, 0x47	; 71
    2718:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
			GLCD_Command((0x40) + x);
    271c:	8c 81       	ldd	r24, Y+4	; 0x04
    271e:	80 5c       	subi	r24, 0xC0	; 192
    2720:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
			break;
		}
	for (int j = 0; j < n; j++)
    2724:	1a 82       	std	Y+2, r1	; 0x02
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	08 c0       	rjmp	.+16     	; 0x273a <clearline+0x82>
	{
		GLCD_Data(0);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
		case vup:
			GLCD_Command((0xB8) + y + 1);
			GLCD_Command((0x40) + x);
			break;
		}
	for (int j = 0; j < n; j++)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	29 81       	ldd	r18, Y+1	; 0x01
    273c:	3a 81       	ldd	r19, Y+2	; 0x02
    273e:	88 85       	ldd	r24, Y+8	; 0x08
    2740:	99 85       	ldd	r25, Y+9	; 0x09
    2742:	28 17       	cp	r18, r24
    2744:	39 07       	cpc	r19, r25
    2746:	8c f3       	brlt	.-30     	; 0x272a <clearline+0x72>
	{
		GLCD_Data(0);
	}
	GLCD_Command(0x40);
    2748:	80 e4       	ldi	r24, 0x40	; 64
    274a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
}
    274e:	2c 96       	adiw	r28, 0x0c	; 12
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	0f 91       	pop	r16
    2760:	08 95       	ret

00002762 <cursor_place>:

void cursor_place(int x, int y, dir d)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <cursor_place+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <cursor_place+0x8>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	7c 83       	std	Y+4, r23	; 0x04
    2776:	6b 83       	std	Y+3, r22	; 0x03
    2778:	4d 83       	std	Y+5, r20	; 0x05
	direction(d);
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	0e 94 32 13 	call	0x2664	; 0x2664 <direction>
	GLCD_Command((0x40) + x);
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	80 5c       	subi	r24, 0xC0	; 192
    2784:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
	GLCD_Command((0xB8) + y);
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	88 54       	subi	r24, 0x48	; 72
    278c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <GLCD_String>:


void GLCD_String(char page_no, char *str) /* GLCD string write function */
{
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	2f 97       	sbiw	r28, 0x0f	; 15
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	8d 87       	std	Y+13, r24	; 0x0d
    27ba:	7f 87       	std	Y+15, r23	; 0x0f
    27bc:	6e 87       	std	Y+14, r22	; 0x0e
    unsigned int i, column;
    unsigned int Page = ((0xB8) + page_no);
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	88 54       	subi	r24, 0x48	; 72
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	98 87       	std	Y+8, r25	; 0x08
    27ca:	8f 83       	std	Y+7, r24	; 0x07
    unsigned int Y_address = 0;
    27cc:	1e 82       	std	Y+6, r1	; 0x06
    27ce:	1d 82       	std	Y+5, r1	; 0x05
    float Page_inc = 0.5;
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	bf e3       	ldi	r27, 0x3F	; 63
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	ab 83       	std	Y+3, r26	; 0x03
    27de:	bc 83       	std	Y+4, r27	; 0x04

    direction(left); /* Select first Left half of display */
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 32 13 	call	0x2664	; 0x2664 <direction>

    GLCD_Command(Page);
    27e6:	8f 81       	ldd	r24, Y+7	; 0x07
    27e8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    27ec:	1c 86       	std	Y+12, r1	; 0x0c
    27ee:	1b 86       	std	Y+11, r1	; 0x0b
    27f0:	16 c2       	rjmp	.+1068   	; 0x2c1e <GLCD_String+0x47e>
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	96 95       	lsr	r25
    27fa:	98 2f       	mov	r25, r24
    27fc:	88 27       	eor	r24, r24
    27fe:	97 95       	ror	r25
    2800:	87 95       	ror	r24
    2802:	90 95       	com	r25
    2804:	81 95       	neg	r24
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	85 50       	subi	r24, 0x05	; 5
    280a:	9c 4f       	sbci	r25, 0xFC	; 252
    280c:	9c 01       	movw	r18, r24
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	28 17       	cp	r18, r24
    2814:	39 07       	cpc	r19, r25
    2816:	08 f4       	brcc	.+2      	; 0x281a <GLCD_String+0x7a>
    2818:	0d c2       	rjmp	.+1050   	; 0x2c34 <GLCD_String+0x494>
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
    281a:	2e 85       	ldd	r18, Y+14	; 0x0e
    281c:	3f 85       	ldd	r19, Y+15	; 0x0f
    281e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2820:	9c 85       	ldd	r25, Y+12	; 0x0c
    2822:	f9 01       	movw	r30, r18
    2824:	e8 0f       	add	r30, r24
    2826:	f9 1f       	adc	r31, r25
    2828:	80 81       	ld	r24, Z
    282a:	80 32       	cpi	r24, 0x20	; 32
    282c:	09 f4       	brne	.+2      	; 0x2830 <GLCD_String+0x90>
    282e:	80 c0       	rjmp	.+256    	; 0x2930 <GLCD_String+0x190>
        {
            for (column = 1; column <= FontWidth; column++)
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9a 87       	std	Y+10, r25	; 0x0a
    2836:	89 87       	std	Y+9, r24	; 0x09
    2838:	75 c0       	rjmp	.+234    	; 0x2924 <GLCD_String+0x184>
            {
                if ((Y_address + column) == (128 * ((int)(Page_inc + 0.5)))) /* If yes then check whether it overflow from right side of display */
    283a:	2d 81       	ldd	r18, Y+5	; 0x05
    283c:	3e 81       	ldd	r19, Y+6	; 0x06
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	89 01       	movw	r16, r18
    2844:	08 0f       	add	r16, r24
    2846:	19 1f       	adc	r17, r25
    2848:	69 81       	ldd	r22, Y+1	; 0x01
    284a:	7a 81       	ldd	r23, Y+2	; 0x02
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	96 95       	lsr	r25
    286e:	98 2f       	mov	r25, r24
    2870:	88 27       	eor	r24, r24
    2872:	97 95       	ror	r25
    2874:	87 95       	ror	r24
    2876:	08 17       	cp	r16, r24
    2878:	19 07       	cpc	r17, r25
    287a:	09 f0       	breq	.+2      	; 0x287e <GLCD_String+0xde>
    287c:	4e c0       	rjmp	.+156    	; 0x291a <GLCD_String+0x17a>
                {
                    if (column == FontWidth) /* Also check and break if it overflow after 5th column */
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	85 30       	cpi	r24, 0x05	; 5
    2884:	91 05       	cpc	r25, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <GLCD_String+0xea>
    2888:	53 c0       	rjmp	.+166    	; 0x2930 <GLCD_String+0x190>
                        break;
                    GLCD_Command(0x40);             /* If not 5th and get overflowed then change Y address to START column */
    288a:	80 e4       	ldi	r24, 0x40	; 64
    288c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
                    Y_address = Y_address + column; /* Increment Y address count by column no. */
    2890:	2d 81       	ldd	r18, Y+5	; 0x05
    2892:	3e 81       	ldd	r19, Y+6	; 0x06
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	82 0f       	add	r24, r18
    289a:	93 1f       	adc	r25, r19
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
                    Command_Port ^= (1 << CS1);     /* If yes then change segment controller to display on other half of display */
    28a0:	a5 e3       	ldi	r26, 0x35	; 53
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e5 e3       	ldi	r30, 0x35	; 53
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	90 81       	ld	r25, Z
    28aa:	88 e0       	ldi	r24, 0x08	; 8
    28ac:	89 27       	eor	r24, r25
    28ae:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    28b0:	a5 e3       	ldi	r26, 0x35	; 53
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e5 e3       	ldi	r30, 0x35	; 53
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	90 81       	ld	r25, Z
    28ba:	80 e1       	ldi	r24, 0x10	; 16
    28bc:	89 27       	eor	r24, r25
    28be:	8c 93       	st	X, r24
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
    28c0:	8f 81       	ldd	r24, Y+7	; 0x07
    28c2:	98 85       	ldd	r25, Y+8	; 0x08
    28c4:	cc 01       	movw	r24, r24
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	29 81       	ldd	r18, Y+1	; 0x01
    28dc:	3a 81       	ldd	r19, Y+2	; 0x02
    28de:	4b 81       	ldd	r20, Y+3	; 0x03
    28e0:	5c 81       	ldd	r21, Y+4	; 0x04
    28e2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
    28fa:	69 81       	ldd	r22, Y+1	; 0x01
    28fc:	7a 81       	ldd	r23, Y+2	; 0x02
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	ab 83       	std	Y+3, r26	; 0x03
    2918:	bc 83       	std	Y+4, r27	; 0x04
    {
        if (Y_address > (1024 - (((page_no)*128) + FontWidth))) /* Check Whether Total Display get overflowed */
            break;                                              /* If yes then break writing */
        if (str[i] != 32)                                       /* Check whether character is not a SPACE */
        {
            for (column = 1; column <= FontWidth; column++)
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	9a 85       	ldd	r25, Y+10	; 0x0a
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	9a 87       	std	Y+10, r25	; 0x0a
    2922:	89 87       	std	Y+9, r24	; 0x09
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	9a 85       	ldd	r25, Y+10	; 0x0a
    2928:	86 30       	cpi	r24, 0x06	; 6
    292a:	91 05       	cpc	r25, r1
    292c:	08 f4       	brcc	.+2      	; 0x2930 <GLCD_String+0x190>
    292e:	85 cf       	rjmp	.-246    	; 0x283a <GLCD_String+0x9a>
                    GLCD_Command(Page + Page_inc); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;     /* Increment Page No. by half */
                }
            }
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	96 95       	lsr	r25
    2938:	98 2f       	mov	r25, r24
    293a:	88 27       	eor	r24, r24
    293c:	97 95       	ror	r25
    293e:	87 95       	ror	r24
    2940:	90 95       	com	r25
    2942:	81 95       	neg	r24
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	85 50       	subi	r24, 0x05	; 5
    2948:	9c 4f       	sbci	r25, 0xFC	; 252
    294a:	9c 01       	movw	r18, r24
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	28 17       	cp	r18, r24
    2952:	39 07       	cpc	r19, r25
    2954:	08 f4       	brcc	.+2      	; 0x2958 <GLCD_String+0x1b8>
    2956:	6e c1       	rjmp	.+732    	; 0x2c34 <GLCD_String+0x494>
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
    2958:	2e 85       	ldd	r18, Y+14	; 0x0e
    295a:	3f 85       	ldd	r19, Y+15	; 0x0f
    295c:	8b 85       	ldd	r24, Y+11	; 0x0b
    295e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2960:	f9 01       	movw	r30, r18
    2962:	e8 0f       	add	r30, r24
    2964:	f9 1f       	adc	r31, r25
    2966:	80 81       	ld	r24, Z
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	c9 01       	movw	r24, r18
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	82 0f       	add	r24, r18
    2974:	93 1f       	adc	r25, r19
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	82 0f       	add	r24, r18
    2984:	93 1f       	adc	r25, r19
    2986:	8c 50       	subi	r24, 0x0C	; 12
    2988:	93 40       	sbci	r25, 0x03	; 3
    298a:	82 53       	subi	r24, 0x32	; 50
    298c:	9e 4f       	sbci	r25, 0xFE	; 254
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	59 f0       	breq	.+22     	; 0x29a8 <GLCD_String+0x208>
    2992:	2e 85       	ldd	r18, Y+14	; 0x0e
    2994:	3f 85       	ldd	r19, Y+15	; 0x0f
    2996:	8b 85       	ldd	r24, Y+11	; 0x0b
    2998:	9c 85       	ldd	r25, Y+12	; 0x0c
    299a:	f9 01       	movw	r30, r18
    299c:	e8 0f       	add	r30, r24
    299e:	f9 1f       	adc	r31, r25
    29a0:	80 81       	ld	r24, Z
    29a2:	80 32       	cpi	r24, 0x20	; 32
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <GLCD_String+0x208>
    29a6:	76 c0       	rjmp	.+236    	; 0x2a94 <GLCD_String+0x2f4>
        {
            for (column = 0; column < FontWidth; column++)
    29a8:	1a 86       	std	Y+10, r1	; 0x0a
    29aa:	19 86       	std	Y+9, r1	; 0x09
    29ac:	6c c0       	rjmp	.+216    	; 0x2a86 <GLCD_String+0x2e6>
            {
                GLCD_Data(font[str[i] - 32][column]); /* If yes then then print character */
    29ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    29b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    29b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    29b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b6:	f9 01       	movw	r30, r18
    29b8:	e8 0f       	add	r30, r24
    29ba:	f9 1f       	adc	r31, r25
    29bc:	80 81       	ld	r24, Z
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9c 01       	movw	r18, r24
    29c4:	20 52       	subi	r18, 0x20	; 32
    29c6:	30 40       	sbci	r19, 0x00	; 0
    29c8:	49 85       	ldd	r20, Y+9	; 0x09
    29ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    29cc:	c9 01       	movw	r24, r18
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	84 0f       	add	r24, r20
    29dc:	95 1f       	adc	r25, r21
    29de:	fc 01       	movw	r30, r24
    29e0:	e2 53       	subi	r30, 0x32	; 50
    29e2:	fe 4f       	sbci	r31, 0xFE	; 254
    29e4:	80 81       	ld	r24, Z
    29e6:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	8f 73       	andi	r24, 0x3F	; 63
    29f2:	90 70       	andi	r25, 0x00	; 0
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	e9 f5       	brne	.+122    	; 0x2a72 <GLCD_String+0x2d2>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    29f8:	a5 e3       	ldi	r26, 0x35	; 53
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e5 e3       	ldi	r30, 0x35	; 53
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	90 81       	ld	r25, Z
    2a02:	88 e0       	ldi	r24, 0x08	; 8
    2a04:	89 27       	eor	r24, r25
    2a06:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    2a08:	a5 e3       	ldi	r26, 0x35	; 53
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e5 e3       	ldi	r30, 0x35	; 53
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	90 81       	ld	r25, Z
    2a12:	80 e1       	ldi	r24, 0x10	; 16
    2a14:	89 27       	eor	r24, r25
    2a16:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2a18:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1a:	98 85       	ldd	r25, Y+8	; 0x08
    2a1c:	cc 01       	movw	r24, r24
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	29 81       	ldd	r18, Y+1	; 0x01
    2a34:	3a 81       	ldd	r19, Y+2	; 0x02
    2a36:	4b 81       	ldd	r20, Y+3	; 0x03
    2a38:	5c 81       	ldd	r21, Y+4	; 0x04
    2a3a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2a52:	69 81       	ldd	r22, Y+1	; 0x01
    2a54:	7a 81       	ldd	r23, Y+2	; 0x02
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	5f e3       	ldi	r21, 0x3F	; 63
    2a62:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	ab 83       	std	Y+3, r26	; 0x03
    2a70:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
        }
        if (Y_address > (1024 - (((page_no)*128) + FontWidth)))           /* Check Whether Total Display get overflowed */
            break;                                                        /* If yes then break writing */
        if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) /* Check whether character is SPACE or character last column is zero */
        {
            for (column = 0; column < FontWidth; column++)
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	9a 87       	std	Y+10, r25	; 0x0a
    2a84:	89 87       	std	Y+9, r24	; 0x09
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	85 30       	cpi	r24, 0x05	; 5
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	08 f4       	brcc	.+2      	; 0x2a92 <GLCD_String+0x2f2>
    2a90:	8e cf       	rjmp	.-228    	; 0x29ae <GLCD_String+0x20e>
    2a92:	c0 c0       	rjmp	.+384    	; 0x2c14 <GLCD_String+0x474>
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    2a94:	1a 86       	std	Y+10, r1	; 0x0a
    2a96:	19 86       	std	Y+9, r1	; 0x09
    2a98:	6c c0       	rjmp	.+216    	; 0x2b72 <GLCD_String+0x3d2>
            {
                GLCD_Data(font[str[i] - 32][column]); /* Then continue to print hat char */
    2a9a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a9c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	e8 0f       	add	r30, r24
    2aa6:	f9 1f       	adc	r31, r25
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9c 01       	movw	r18, r24
    2ab0:	20 52       	subi	r18, 0x20	; 32
    2ab2:	30 40       	sbci	r19, 0x00	; 0
    2ab4:	49 85       	ldd	r20, Y+9	; 0x09
    2ab6:	5a 85       	ldd	r21, Y+10	; 0x0a
    2ab8:	c9 01       	movw	r24, r18
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	84 0f       	add	r24, r20
    2ac8:	95 1f       	adc	r25, r21
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 53       	subi	r30, 0x32	; 50
    2ace:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad0:	80 81       	ld	r24, Z
    2ad2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
                if ((Y_address + 1) % 64 == 0)        /* check whether it gets overflowed  from either half of side */
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	8f 73       	andi	r24, 0x3F	; 63
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	e9 f5       	brne	.+122    	; 0x2b5e <GLCD_String+0x3be>
                {
                    Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2ae4:	a5 e3       	ldi	r26, 0x35	; 53
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e5 e3       	ldi	r30, 0x35	; 53
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	90 81       	ld	r25, Z
    2aee:	88 e0       	ldi	r24, 0x08	; 8
    2af0:	89 27       	eor	r24, r25
    2af2:	8c 93       	st	X, r24
                    Command_Port ^= (1 << CS2);
    2af4:	a5 e3       	ldi	r26, 0x35	; 53
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e5 e3       	ldi	r30, 0x35	; 53
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	90 81       	ld	r25, Z
    2afe:	80 e1       	ldi	r24, 0x10	; 16
    2b00:	89 27       	eor	r24, r25
    2b02:	8c 93       	st	X, r24
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2b04:	8f 81       	ldd	r24, Y+7	; 0x07
    2b06:	98 85       	ldd	r25, Y+8	; 0x08
    2b08:	cc 01       	movw	r24, r24
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	29 81       	ldd	r18, Y+1	; 0x01
    2b20:	3a 81       	ldd	r19, Y+2	; 0x02
    2b22:	4b 81       	ldd	r20, Y+3	; 0x03
    2b24:	5c 81       	ldd	r21, Y+4	; 0x04
    2b26:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2b3e:	69 81       	ldd	r22, Y+1	; 0x01
    2b40:	7a 81       	ldd	r23, Y+2	; 0x02
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	ab 83       	std	Y+3, r26	; 0x03
    2b5c:	bc 83       	std	Y+4, r27	; 0x04
                }
                Y_address++; /* Increment Y_address count per column */
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
                Y_address++; /* Increment Y_address count per column */
            }
        }
        else /* If character is not SPACE or character last column is not zero */
        {
            for (column = 0; column < FontWidth; column++)
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	9a 87       	std	Y+10, r25	; 0x0a
    2b70:	89 87       	std	Y+9, r24	; 0x09
    2b72:	89 85       	ldd	r24, Y+9	; 0x09
    2b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b76:	85 30       	cpi	r24, 0x05	; 5
    2b78:	91 05       	cpc	r25, r1
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <GLCD_String+0x3de>
    2b7c:	8e cf       	rjmp	.-228    	; 0x2a9a <GLCD_String+0x2fa>
                    GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                    Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
                }
                Y_address++; /* Increment Y_address count per column */
            }
            GLCD_Data(0);              /* Add one column of zero to print next character next of zero */
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
            Y_address++;               /* Increment Y_address count for last added zero */
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
            if ((Y_address) % 64 == 0) /* check whether it gets overflowed  from either half of side */
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	8f 73       	andi	r24, 0x3F	; 63
    2b94:	90 70       	andi	r25, 0x00	; 0
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	e9 f5       	brne	.+122    	; 0x2c14 <GLCD_String+0x474>
            {
                Command_Port ^= (1 << CS1); /* If yes then change segment controller to display on other half of display */
    2b9a:	a5 e3       	ldi	r26, 0x35	; 53
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	90 81       	ld	r25, Z
    2ba4:	88 e0       	ldi	r24, 0x08	; 8
    2ba6:	89 27       	eor	r24, r25
    2ba8:	8c 93       	st	X, r24
                Command_Port ^= (1 << CS2);
    2baa:	a5 e3       	ldi	r26, 0x35	; 53
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e5 e3       	ldi	r30, 0x35	; 53
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	90 81       	ld	r25, Z
    2bb4:	80 e1       	ldi	r24, 0x10	; 16
    2bb6:	89 27       	eor	r24, r25
    2bb8:	8c 93       	st	X, r24
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	98 85       	ldd	r25, Y+8	; 0x08
    2bbe:	cc 01       	movw	r24, r24
    2bc0:	a0 e0       	ldi	r26, 0x00	; 0
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	29 81       	ldd	r18, Y+1	; 0x01
    2bd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd8:	4b 81       	ldd	r20, Y+3	; 0x03
    2bda:	5c 81       	ldd	r21, Y+4	; 0x04
    2bdc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
    2bf4:	69 81       	ldd	r22, Y+1	; 0x01
    2bf6:	7a 81       	ldd	r23, Y+2	; 0x02
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	5f e3       	ldi	r21, 0x3F	; 63
    2c04:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	ab 83       	std	Y+3, r26	; 0x03
    2c12:	bc 83       	std	Y+4, r27	; 0x04
    float Page_inc = 0.5;

    direction(left); /* Select first Left half of display */

    GLCD_Command(Page);
    for (i = 0; str[i] != 0; i++) /* Print each char in string till null */
    2c14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c18:	01 96       	adiw	r24, 0x01	; 1
    2c1a:	9c 87       	std	Y+12, r25	; 0x0c
    2c1c:	8b 87       	std	Y+11, r24	; 0x0b
    2c1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c20:	3f 85       	ldd	r19, Y+15	; 0x0f
    2c22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c24:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c26:	f9 01       	movw	r30, r18
    2c28:	e8 0f       	add	r30, r24
    2c2a:	f9 1f       	adc	r31, r25
    2c2c:	80 81       	ld	r24, Z
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <GLCD_String+0x494>
    2c32:	df cd       	rjmp	.-1090   	; 0x27f2 <GLCD_String+0x52>
                GLCD_Command((Page + Page_inc)); /* Execute command for page change */
                Page_inc = Page_inc + 0.5;       /* Increment Page No. by half */
            }
        }
    }
    GLCD_Command(0x40); /* Set Y address (column=0) */
    2c34:	80 e4       	ldi	r24, 0x40	; 64
    2c36:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
}
    2c3a:	2f 96       	adiw	r28, 0x0f	; 15
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	08 95       	ret

00002c50 <line>:


int line(axis a, int x, int y, int n, dir d)
{
    2c50:	0f 93       	push	r16
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	7f 83       	std	Y+7, r23	; 0x07
    2c6a:	6e 83       	std	Y+6, r22	; 0x06
    2c6c:	59 87       	std	Y+9, r21	; 0x09
    2c6e:	48 87       	std	Y+8, r20	; 0x08
    2c70:	3b 87       	std	Y+11, r19	; 0x0b
    2c72:	2a 87       	std	Y+10, r18	; 0x0a
    2c74:	0c 87       	std	Y+12, r16	; 0x0c
	int moves = 0;
    2c76:	1c 82       	std	Y+4, r1	; 0x04
    2c78:	1b 82       	std	Y+3, r1	; 0x03
	direction(d);
    2c7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c7c:	0e 94 32 13 	call	0x2664	; 0x2664 <direction>
	GLCD_Command((0xB8) + y);
    2c80:	88 85       	ldd	r24, Y+8	; 0x08
    2c82:	88 54       	subi	r24, 0x48	; 72
    2c84:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
	GLCD_Command((0x40) + x);
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	80 5c       	subi	r24, 0xC0	; 192
    2c8c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
	for(int i = 0; i < n; i++)
    2c90:	1a 82       	std	Y+2, r1	; 0x02
    2c92:	19 82       	std	Y+1, r1	; 0x01
    2c94:	32 c0       	rjmp	.+100    	; 0x2cfa <line+0xaa>
	switch(a)
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	3e 87       	std	Y+14, r19	; 0x0e
    2c9e:	2d 87       	std	Y+13, r18	; 0x0d
    2ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca4:	81 30       	cpi	r24, 0x01	; 1
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	d9 f0       	breq	.+54     	; 0x2ce0 <line+0x90>
    2caa:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cac:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cae:	22 30       	cpi	r18, 0x02	; 2
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	69 f0       	breq	.+26     	; 0x2cce <line+0x7e>
    2cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	d1 f4       	brne	.+52     	; 0x2cf0 <line+0xa0>
	{
	case h:
		GLCD_Data(0xff);
    2cbc:	8f ef       	ldi	r24, 0xFF	; 255
    2cbe:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
		moves++;
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
    2ccc:	11 c0       	rjmp	.+34     	; 0x2cf0 <line+0xa0>
		break;
	case vdown:
		moves++;
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
		GLCD_Data(0x80);
    2cd8:	80 e8       	ldi	r24, 0x80	; 128
    2cda:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
    2cde:	08 c0       	rjmp	.+16     	; 0x2cf0 <line+0xa0>
		break;
	case vup:
		moves++;
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
		GLCD_Data(0x01);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GLCD_Data>
{
	int moves = 0;
	direction(d);
	GLCD_Command((0xB8) + y);
	GLCD_Command((0x40) + x);
	for(int i = 0; i < n; i++)
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	29 81       	ldd	r18, Y+1	; 0x01
    2cfc:	3a 81       	ldd	r19, Y+2	; 0x02
    2cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d02:	28 17       	cp	r18, r24
    2d04:	39 07       	cpc	r19, r25
    2d06:	3c f2       	brlt	.-114    	; 0x2c96 <line+0x46>
	case vup:
		moves++;
		GLCD_Data(0x01);
		break;
	}
	GLCD_Command(0x40);
    2d08:	80 e4       	ldi	r24, 0x40	; 64
    2d0a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <GLCD_Command>
	return moves;
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2d12:	2e 96       	adiw	r28, 0x0e	; 14
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	0f 91       	pop	r16
    2d24:	08 95       	ret

00002d26 <get_firstline>:

char* get_firstline(int f, int cycle, char* space)
{
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	ce 58       	subi	r28, 0x8E	; 142
    2d34:	d0 40       	sbci	r29, 0x00	; 0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	fe 01       	movw	r30, r28
    2d42:	e7 57       	subi	r30, 0x77	; 119
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 57       	subi	r30, 0x75	; 117
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	71 83       	std	Z+1, r23	; 0x01
    2d52:	60 83       	st	Z, r22
    2d54:	fe 01       	movw	r30, r28
    2d56:	e3 57       	subi	r30, 0x73	; 115
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	51 83       	std	Z+1, r21	; 0x01
    2d5c:	40 83       	st	Z, r20
	char fstr[4];
	sprintf(fstr, "%d", f);
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <get_firstline+0x3a>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <get_firstline+0x3c>
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <get_firstline+0x3e>
    2d64:	ad b7       	in	r26, 0x3d	; 61
    2d66:	be b7       	in	r27, 0x3e	; 62
    2d68:	11 96       	adiw	r26, 0x01	; 1
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	11 96       	adiw	r26, 0x01	; 1
    2d70:	9c 93       	st	X, r25
    2d72:	8e 93       	st	-X, r24
    2d74:	80 e6       	ldi	r24, 0x60	; 96
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	13 96       	adiw	r26, 0x03	; 3
    2d7a:	9c 93       	st	X, r25
    2d7c:	8e 93       	st	-X, r24
    2d7e:	12 97       	sbiw	r26, 0x02	; 2
    2d80:	fe 01       	movw	r30, r28
    2d82:	e7 57       	subi	r30, 0x77	; 119
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	15 96       	adiw	r26, 0x05	; 5
    2d8c:	9c 93       	st	X, r25
    2d8e:	8e 93       	st	-X, r24
    2d90:	14 97       	sbiw	r26, 0x04	; 4
    2d92:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sprintf>
    2d96:	8d b7       	in	r24, 0x3d	; 61
    2d98:	9e b7       	in	r25, 0x3e	; 62
    2d9a:	06 96       	adiw	r24, 0x06	; 6
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	9e bf       	out	0x3e, r25	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	8d bf       	out	0x3d, r24	; 61
	char cyclestr[4];
    sprintf(cyclestr, "%d", cycle);
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <get_firstline+0x82>
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <get_firstline+0x84>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <get_firstline+0x86>
    2dac:	ad b7       	in	r26, 0x3d	; 61
    2dae:	be b7       	in	r27, 0x3e	; 62
    2db0:	11 96       	adiw	r26, 0x01	; 1
    2db2:	ce 01       	movw	r24, r28
    2db4:	05 96       	adiw	r24, 0x05	; 5
    2db6:	11 96       	adiw	r26, 0x01	; 1
    2db8:	9c 93       	st	X, r25
    2dba:	8e 93       	st	-X, r24
    2dbc:	80 e6       	ldi	r24, 0x60	; 96
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	13 96       	adiw	r26, 0x03	; 3
    2dc2:	9c 93       	st	X, r25
    2dc4:	8e 93       	st	-X, r24
    2dc6:	12 97       	sbiw	r26, 0x02	; 2
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e5 57       	subi	r30, 0x75	; 117
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	15 96       	adiw	r26, 0x05	; 5
    2dd4:	9c 93       	st	X, r25
    2dd6:	8e 93       	st	-X, r24
    2dd8:	14 97       	sbiw	r26, 0x04	; 4
    2dda:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sprintf>
    2dde:	ad b7       	in	r26, 0x3d	; 61
    2de0:	be b7       	in	r27, 0x3e	; 62
    2de2:	16 96       	adiw	r26, 0x06	; 6
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	be bf       	out	0x3e, r27	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	ad bf       	out	0x3d, r26	; 61
	char firstLine[128] = "";
    2dee:	19 86       	std	Y+9, r1	; 0x09
    2df0:	1a 86       	std	Y+10, r1	; 0x0a
    2df2:	1b 86       	std	Y+11, r1	; 0x0b
    2df4:	1c 86       	std	Y+12, r1	; 0x0c
    2df6:	8c e7       	ldi	r24, 0x7C	; 124
    2df8:	fe 01       	movw	r30, r28
    2dfa:	3d 96       	adiw	r30, 0x0d	; 13
    2dfc:	df 01       	movw	r26, r30
    2dfe:	98 2f       	mov	r25, r24
    2e00:	1d 92       	st	X+, r1
    2e02:	9a 95       	dec	r25
    2e04:	e9 f7       	brne	.-6      	; 0x2e00 <get_firstline+0xda>
    strcat(firstLine, "F:");
    2e06:	8e 01       	movw	r16, r28
    2e08:	07 5f       	subi	r16, 0xF7	; 247
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	09 96       	adiw	r24, 0x09	; 9
    2e10:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <strlen>
    2e14:	80 0f       	add	r24, r16
    2e16:	91 1f       	adc	r25, r17
    2e18:	23 e6       	ldi	r18, 0x63	; 99
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	b9 01       	movw	r22, r18
    2e1e:	43 e0       	ldi	r20, 0x03	; 3
    2e20:	50 e0       	ldi	r21, 0x00	; 0
    2e22:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <memcpy>
    strcat(firstLine, fstr);
    2e26:	ce 01       	movw	r24, r28
    2e28:	09 96       	adiw	r24, 0x09	; 9
    2e2a:	9e 01       	movw	r18, r28
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	b9 01       	movw	r22, r18
    2e32:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    strcat(firstLine, "KHz");
    2e36:	ce 01       	movw	r24, r28
    2e38:	09 96       	adiw	r24, 0x09	; 9
    2e3a:	26 e6       	ldi	r18, 0x66	; 102
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	b9 01       	movw	r22, r18
    2e40:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    strcat(firstLine, space);
    2e44:	ce 01       	movw	r24, r28
    2e46:	09 96       	adiw	r24, 0x09	; 9
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 57       	subi	r30, 0x73	; 115
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	20 81       	ld	r18, Z
    2e50:	31 81       	ldd	r19, Z+1	; 0x01
    2e52:	b9 01       	movw	r22, r18
    2e54:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    strcat(firstLine, "Duty:");
    2e58:	ce 01       	movw	r24, r28
    2e5a:	09 96       	adiw	r24, 0x09	; 9
    2e5c:	2a e6       	ldi	r18, 0x6A	; 106
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	b9 01       	movw	r22, r18
    2e62:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    strcat(firstLine, cyclestr);
    2e66:	ce 01       	movw	r24, r28
    2e68:	09 96       	adiw	r24, 0x09	; 9
    2e6a:	9e 01       	movw	r18, r28
    2e6c:	2b 5f       	subi	r18, 0xFB	; 251
    2e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e70:	b9 01       	movw	r22, r18
    2e72:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    strcat(firstLine, "%");
    2e76:	ce 01       	movw	r24, r28
    2e78:	09 96       	adiw	r24, 0x09	; 9
    2e7a:	20 e7       	ldi	r18, 0x70	; 112
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	b9 01       	movw	r22, r18
    2e80:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    return firstLine;
    2e84:	ce 01       	movw	r24, r28
    2e86:	09 96       	adiw	r24, 0x09	; 9
}
    2e88:	c2 57       	subi	r28, 0x72	; 114
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <draw_line>:
void draw_line(int f, int cycle)
{
    2ea0:	0f 93       	push	r16
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	67 97       	sbiw	r28, 0x17	; 23
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	9a 8b       	std	Y+18, r25	; 0x12
    2eb8:	89 8b       	std	Y+17, r24	; 0x11
    2eba:	7c 8b       	std	Y+20, r23	; 0x14
    2ebc:	6b 8b       	std	Y+19, r22	; 0x13
	float part = 0.30;
    2ebe:	8a e9       	ldi	r24, 0x9A	; 154
    2ec0:	99 e9       	ldi	r25, 0x99	; 153
    2ec2:	a9 e9       	ldi	r26, 0x99	; 153
    2ec4:	be e3       	ldi	r27, 0x3E	; 62
    2ec6:	8d 87       	std	Y+13, r24	; 0x0d
    2ec8:	9e 87       	std	Y+14, r25	; 0x0e
    2eca:	af 87       	std	Y+15, r26	; 0x0f
    2ecc:	b8 8b       	std	Y+16, r27	; 0x10
	int uppixels = ceil(part * cycle);
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	aa 27       	eor	r26, r26
    2ed4:	97 fd       	sbrc	r25, 7
    2ed6:	a0 95       	com	r26
    2ed8:	ba 2f       	mov	r27, r26
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eec:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eee:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ef0:	58 89       	ldd	r21, Y+16	; 0x10
    2ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <ceil>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9c 87       	std	Y+12, r25	; 0x0c
    2f14:	8b 87       	std	Y+11, r24	; 0x0b
	int downpixels = floor(part * (100 - cycle));
    2f16:	24 e6       	ldi	r18, 0x64	; 100
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1e:	a9 01       	movw	r20, r18
    2f20:	48 1b       	sub	r20, r24
    2f22:	59 0b       	sbc	r21, r25
    2f24:	ca 01       	movw	r24, r20
    2f26:	aa 27       	eor	r26, r26
    2f28:	97 fd       	sbrc	r25, 7
    2f2a:	a0 95       	com	r26
    2f2c:	ba 2f       	mov	r27, r26
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f40:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f42:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f44:	58 89       	ldd	r21, Y+16	; 0x10
    2f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <floor>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9a 87       	std	Y+10, r25	; 0x0a
    2f68:	89 87       	std	Y+9, r24	; 0x09
	if(cycle == 50)
    2f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6e:	82 33       	cpi	r24, 0x32	; 50
    2f70:	91 05       	cpc	r25, r1
    2f72:	29 f4       	brne	.+10     	; 0x2f7e <draw_line+0xde>
		downpixels --;
    2f74:	89 85       	ldd	r24, Y+9	; 0x09
    2f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	9a 87       	std	Y+10, r25	; 0x0a
    2f7c:	89 87       	std	Y+9, r24	; 0x09
	int n_of_cycles = 4;
    2f7e:	84 e0       	ldi	r24, 0x04	; 4
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	98 87       	std	Y+8, r25	; 0x08
    2f84:	8f 83       	std	Y+7, r24	; 0x07
	char l = 120;
    2f86:	88 e7       	ldi	r24, 0x78	; 120
    2f88:	8e 83       	std	Y+6, r24	; 0x06
	char moves = 0;
    2f8a:	1d 82       	std	Y+5, r1	; 0x05
	dir d = left;
    2f8c:	1c 82       	std	Y+4, r1	; 0x04
	char r = 128;
    2f8e:	80 e8       	ldi	r24, 0x80	; 128
    2f90:	8b 83       	std	Y+3, r24	; 0x03
	if(cycle == 100)
    2f92:	8b 89       	ldd	r24, Y+19	; 0x13
    2f94:	9c 89       	ldd	r25, Y+20	; 0x14
    2f96:	84 36       	cpi	r24, 0x64	; 100
    2f98:	91 05       	cpc	r25, r1
    2f9a:	e9 f4       	brne	.+58     	; 0x2fd6 <draw_line+0x136>
	{
		line(vup, 0, 3, 64, d);
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	43 e0       	ldi	r20, 0x03	; 3
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	20 e4       	ldi	r18, 0x40	; 64
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	0c 81       	ldd	r16, Y+4	; 0x04
    2fac:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
		d = !d;
    2fb0:	1d 8a       	std	Y+21, r1	; 0x15
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	88 23       	and	r24, r24
    2fb6:	11 f4       	brne	.+4      	; 0x2fbc <draw_line+0x11c>
    2fb8:	51 e0       	ldi	r21, 0x01	; 1
    2fba:	5d 8b       	std	Y+21, r21	; 0x15
    2fbc:	8d 89       	ldd	r24, Y+21	; 0x15
    2fbe:	8c 83       	std	Y+4, r24	; 0x04
		line(vup, 0, 3, 64, d);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	43 e0       	ldi	r20, 0x03	; 3
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	20 e4       	ldi	r18, 0x40	; 64
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    2fd4:	c2 c0       	rjmp	.+388    	; 0x315a <draw_line+0x2ba>
	}
	else if(cycle == 0)
    2fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	e9 f4       	brne	.+58     	; 0x3018 <draw_line+0x178>
	{
		line(vdown, 0, 5, 64, d);
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	45 e0       	ldi	r20, 0x05	; 5
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	20 e4       	ldi	r18, 0x40	; 64
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	0c 81       	ldd	r16, Y+4	; 0x04
    2fee:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
		d = !d;
    2ff2:	1e 8a       	std	Y+22, r1	; 0x16
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	88 23       	and	r24, r24
    2ff8:	11 f4       	brne	.+4      	; 0x2ffe <draw_line+0x15e>
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	4e 8b       	std	Y+22, r20	; 0x16
    2ffe:	5e 89       	ldd	r21, Y+22	; 0x16
    3000:	5c 83       	std	Y+4, r21	; 0x04
		line(vdown, 0, 5, 64, d);
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	70 e0       	ldi	r23, 0x00	; 0
    3008:	45 e0       	ldi	r20, 0x05	; 5
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	20 e4       	ldi	r18, 0x40	; 64
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	0c 81       	ldd	r16, Y+4	; 0x04
    3012:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3016:	a1 c0       	rjmp	.+322    	; 0x315a <draw_line+0x2ba>
	}
	else
	{
		r = r - moves;
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9d 81       	ldd	r25, Y+5	; 0x05
    301c:	89 1b       	sub	r24, r25
    301e:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < n_of_cycles; i++)
    3020:	1a 82       	std	Y+2, r1	; 0x02
    3022:	19 82       	std	Y+1, r1	; 0x01
    3024:	92 c0       	rjmp	.+292    	; 0x314a <draw_line+0x2aa>
		{
			moves = 0;
    3026:	1d 82       	std	Y+5, r1	; 0x05
			moves += line(h, moves, 4, 1, d);
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	b9 01       	movw	r22, r18
    3032:	44 e0       	ldi	r20, 0x04	; 4
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	21 e0       	ldi	r18, 0x01	; 1
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	0c 81       	ldd	r16, Y+4	; 0x04
    303c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3040:	98 2f       	mov	r25, r24
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	89 0f       	add	r24, r25
    3046:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vup, moves, 4, uppixels, d);
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3050:	fc 85       	ldd	r31, Y+12	; 0x0c
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	b9 01       	movw	r22, r18
    3056:	44 e0       	ldi	r20, 0x04	; 4
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	9f 01       	movw	r18, r30
    305c:	0c 81       	ldd	r16, Y+4	; 0x04
    305e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3062:	98 2f       	mov	r25, r24
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	89 0f       	add	r24, r25
    3068:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	b9 01       	movw	r22, r18
    3074:	44 e0       	ldi	r20, 0x04	; 4
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	21 e0       	ldi	r18, 0x01	; 1
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	0c 81       	ldd	r16, Y+4	; 0x04
    307e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3082:	98 2f       	mov	r25, r24
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	89 0f       	add	r24, r25
    3088:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vdown, moves, 4, downpixels, d);
    308a:	8d 81       	ldd	r24, Y+5	; 0x05
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	e9 85       	ldd	r30, Y+9	; 0x09
    3092:	fa 85       	ldd	r31, Y+10	; 0x0a
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	b9 01       	movw	r22, r18
    3098:	44 e0       	ldi	r20, 0x04	; 4
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	9f 01       	movw	r18, r30
    309e:	0c 81       	ldd	r16, Y+4	; 0x04
    30a0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    30a4:	98 2f       	mov	r25, r24
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	89 0f       	add	r24, r25
    30aa:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	b9 01       	movw	r22, r18
    30b6:	44 e0       	ldi	r20, 0x04	; 4
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	0c 81       	ldd	r16, Y+4	; 0x04
    30c0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    30c4:	98 2f       	mov	r25, r24
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	89 0f       	add	r24, r25
    30ca:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vup, moves, 4, uppixels, d);
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    30d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	b9 01       	movw	r22, r18
    30da:	44 e0       	ldi	r20, 0x04	; 4
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	9f 01       	movw	r18, r30
    30e0:	0c 81       	ldd	r16, Y+4	; 0x04
    30e2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    30e6:	98 2f       	mov	r25, r24
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	89 0f       	add	r24, r25
    30ec:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(h, moves, 4, 1, d);
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	b9 01       	movw	r22, r18
    30f8:	44 e0       	ldi	r20, 0x04	; 4
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	21 e0       	ldi	r18, 0x01	; 1
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	0c 81       	ldd	r16, Y+4	; 0x04
    3102:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3106:	98 2f       	mov	r25, r24
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	89 0f       	add	r24, r25
    310c:	8d 83       	std	Y+5, r24	; 0x05
			moves += line(vdown, moves, 4, downpixels, d);
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	e9 85       	ldd	r30, Y+9	; 0x09
    3116:	fa 85       	ldd	r31, Y+10	; 0x0a
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	b9 01       	movw	r22, r18
    311c:	44 e0       	ldi	r20, 0x04	; 4
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	9f 01       	movw	r18, r30
    3122:	0c 81       	ldd	r16, Y+4	; 0x04
    3124:	0e 94 28 16 	call	0x2c50	; 0x2c50 <line>
    3128:	98 2f       	mov	r25, r24
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	89 0f       	add	r24, r25
    312e:	8d 83       	std	Y+5, r24	; 0x05
			d = !d;
    3130:	1f 8a       	std	Y+23, r1	; 0x17
    3132:	8c 81       	ldd	r24, Y+4	; 0x04
    3134:	88 23       	and	r24, r24
    3136:	11 f4       	brne	.+4      	; 0x313c <draw_line+0x29c>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	8f 8b       	std	Y+23, r24	; 0x17
    313c:	4f 89       	ldd	r20, Y+23	; 0x17
    313e:	4c 83       	std	Y+4, r20	; 0x04
		line(vdown, 0, 5, 64, d);
	}
	else
	{
		r = r - moves;
		for(int i = 0; i < n_of_cycles; i++)
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	29 81       	ldd	r18, Y+1	; 0x01
    314c:	3a 81       	ldd	r19, Y+2	; 0x02
    314e:	8f 81       	ldd	r24, Y+7	; 0x07
    3150:	98 85       	ldd	r25, Y+8	; 0x08
    3152:	28 17       	cp	r18, r24
    3154:	39 07       	cpc	r19, r25
    3156:	0c f4       	brge	.+2      	; 0x315a <draw_line+0x2ba>
    3158:	66 cf       	rjmp	.-308    	; 0x3026 <draw_line+0x186>
		{
			line(vup, moves, 4, l, d);
		}
*/
	}
}
    315a:	67 96       	adiw	r28, 0x17	; 23
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	0f 91       	pop	r16
    316c:	08 95       	ret

0000316e <main>:

int main(void)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	c3 5a       	subi	r28, 0xA3	; 163
    3178:	d0 40       	sbci	r29, 0x00	; 0
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
	char breaks = 2;
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	8a 87       	std	Y+10, r24	; 0x0a
	char cap = 128 - breaks;
    3188:	90 e8       	ldi	r25, 0x80	; 128
    318a:	8a 85       	ldd	r24, Y+10	; 0x0a
    318c:	29 2f       	mov	r18, r25
    318e:	28 1b       	sub	r18, r24
    3190:	82 2f       	mov	r24, r18
    3192:	89 87       	std	Y+9, r24	; 0x09
    int f = 16;
    3194:	80 e1       	ldi	r24, 0x10	; 16
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	98 87       	std	Y+8, r25	; 0x08
    319a:	8f 83       	std	Y+7, r24	; 0x07
    int cycle = 50;
    319c:	82 e3       	ldi	r24, 0x32	; 50
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    int x = 90;
    31a4:	8a e5       	ldi	r24, 0x5A	; 90
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    int move = 0;
    31ac:	1a 82       	std	Y+2, r1	; 0x02
    31ae:	19 82       	std	Y+1, r1	; 0x01
    char space[20] = "    ";
    31b0:	ce 01       	movw	r24, r28
    31b2:	0b 96       	adiw	r24, 0x0b	; 11
    31b4:	c1 56       	subi	r28, 0x61	; 97
    31b6:	df 4f       	sbci	r29, 0xFF	; 255
    31b8:	99 83       	std	Y+1, r25	; 0x01
    31ba:	88 83       	st	Y, r24
    31bc:	cf 59       	subi	r28, 0x9F	; 159
    31be:	d0 40       	sbci	r29, 0x00	; 0
    31c0:	a2 e7       	ldi	r26, 0x72	; 114
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	cf 55       	subi	r28, 0x5F	; 95
    31c6:	df 4f       	sbci	r29, 0xFF	; 255
    31c8:	b9 83       	std	Y+1, r27	; 0x01
    31ca:	a8 83       	st	Y, r26
    31cc:	c1 5a       	subi	r28, 0xA1	; 161
    31ce:	d0 40       	sbci	r29, 0x00	; 0
    31d0:	b5 e0       	ldi	r27, 0x05	; 5
    31d2:	cd 55       	subi	r28, 0x5D	; 93
    31d4:	df 4f       	sbci	r29, 0xFF	; 255
    31d6:	b8 83       	st	Y, r27
    31d8:	c3 5a       	subi	r28, 0xA3	; 163
    31da:	d0 40       	sbci	r29, 0x00	; 0
    31dc:	cf 55       	subi	r28, 0x5F	; 95
    31de:	df 4f       	sbci	r29, 0xFF	; 255
    31e0:	e8 81       	ld	r30, Y
    31e2:	f9 81       	ldd	r31, Y+1	; 0x01
    31e4:	c1 5a       	subi	r28, 0xA1	; 161
    31e6:	d0 40       	sbci	r29, 0x00	; 0
    31e8:	00 80       	ld	r0, Z
    31ea:	cf 55       	subi	r28, 0x5F	; 95
    31ec:	df 4f       	sbci	r29, 0xFF	; 255
    31ee:	88 81       	ld	r24, Y
    31f0:	99 81       	ldd	r25, Y+1	; 0x01
    31f2:	c1 5a       	subi	r28, 0xA1	; 161
    31f4:	d0 40       	sbci	r29, 0x00	; 0
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	cf 55       	subi	r28, 0x5F	; 95
    31fa:	df 4f       	sbci	r29, 0xFF	; 255
    31fc:	99 83       	std	Y+1, r25	; 0x01
    31fe:	88 83       	st	Y, r24
    3200:	c1 5a       	subi	r28, 0xA1	; 161
    3202:	d0 40       	sbci	r29, 0x00	; 0
    3204:	c1 56       	subi	r28, 0x61	; 97
    3206:	df 4f       	sbci	r29, 0xFF	; 255
    3208:	a8 81       	ld	r26, Y
    320a:	b9 81       	ldd	r27, Y+1	; 0x01
    320c:	cf 59       	subi	r28, 0x9F	; 159
    320e:	d0 40       	sbci	r29, 0x00	; 0
    3210:	0c 92       	st	X, r0
    3212:	c1 56       	subi	r28, 0x61	; 97
    3214:	df 4f       	sbci	r29, 0xFF	; 255
    3216:	e8 81       	ld	r30, Y
    3218:	f9 81       	ldd	r31, Y+1	; 0x01
    321a:	cf 59       	subi	r28, 0x9F	; 159
    321c:	d0 40       	sbci	r29, 0x00	; 0
    321e:	31 96       	adiw	r30, 0x01	; 1
    3220:	c1 56       	subi	r28, 0x61	; 97
    3222:	df 4f       	sbci	r29, 0xFF	; 255
    3224:	f9 83       	std	Y+1, r31	; 0x01
    3226:	e8 83       	st	Y, r30
    3228:	cf 59       	subi	r28, 0x9F	; 159
    322a:	d0 40       	sbci	r29, 0x00	; 0
    322c:	cd 55       	subi	r28, 0x5D	; 93
    322e:	df 4f       	sbci	r29, 0xFF	; 255
    3230:	f8 81       	ld	r31, Y
    3232:	c3 5a       	subi	r28, 0xA3	; 163
    3234:	d0 40       	sbci	r29, 0x00	; 0
    3236:	f1 50       	subi	r31, 0x01	; 1
    3238:	cd 55       	subi	r28, 0x5D	; 93
    323a:	df 4f       	sbci	r29, 0xFF	; 255
    323c:	f8 83       	st	Y, r31
    323e:	c3 5a       	subi	r28, 0xA3	; 163
    3240:	d0 40       	sbci	r29, 0x00	; 0
    3242:	cd 55       	subi	r28, 0x5D	; 93
    3244:	df 4f       	sbci	r29, 0xFF	; 255
    3246:	28 81       	ld	r18, Y
    3248:	c3 5a       	subi	r28, 0xA3	; 163
    324a:	d0 40       	sbci	r29, 0x00	; 0
    324c:	22 23       	and	r18, r18
    324e:	31 f6       	brne	.-116    	; 0x31dc <main+0x6e>
    3250:	8f e0       	ldi	r24, 0x0F	; 15
    3252:	fe 01       	movw	r30, r28
    3254:	70 96       	adiw	r30, 0x10	; 16
    3256:	df 01       	movw	r26, r30
    3258:	28 2f       	mov	r18, r24
    325a:	1d 92       	st	X+, r1
    325c:	2a 95       	dec	r18
    325e:	e9 f7       	brne	.-6      	; 0x325a <main+0xec>
    char firstLine[128];

    GLCD_Init();         /* Initialize GLCD */
    3260:	0e 94 2f 12 	call	0x245e	; 0x245e <GLCD_Init>
    GLCD_ClearAll();     /* Clear all GLCD display */
    3264:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <GLCD_ClearAll>
    while (1)
    {
        strcat(' ', ' ');
    3268:	80 e2       	ldi	r24, 0x20	; 32
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	60 e2       	ldi	r22, 0x20	; 32
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <strcat>
    	strcpy(firstLine, get_firstline(f, cycle, space));
    3274:	8f 81       	ldd	r24, Y+7	; 0x07
    3276:	98 85       	ldd	r25, Y+8	; 0x08
    3278:	2d 81       	ldd	r18, Y+5	; 0x05
    327a:	3e 81       	ldd	r19, Y+6	; 0x06
    327c:	ae 01       	movw	r20, r28
    327e:	45 5f       	subi	r20, 0xF5	; 245
    3280:	5f 4f       	sbci	r21, 0xFF	; 255
    3282:	b9 01       	movw	r22, r18
    3284:	0e 94 93 16 	call	0x2d26	; 0x2d26 <get_firstline>
    3288:	9c 01       	movw	r18, r24
    328a:	ce 01       	movw	r24, r28
    328c:	4f 96       	adiw	r24, 0x1f	; 31
    328e:	b9 01       	movw	r22, r18
    3290:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <strcpy>
    	GLCD_String(0, firstLine); /* Print String on 0th page of display */
    3294:	9e 01       	movw	r18, r28
    3296:	21 5e       	subi	r18, 0xE1	; 225
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	b9 01       	movw	r22, r18
    329e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <GLCD_String>

    	draw_line(f, cycle);
    32a2:	8f 81       	ldd	r24, Y+7	; 0x07
    32a4:	98 85       	ldd	r25, Y+8	; 0x08
    32a6:	2d 81       	ldd	r18, Y+5	; 0x05
    32a8:	3e 81       	ldd	r19, Y+6	; 0x06
    32aa:	b9 01       	movw	r22, r18
    32ac:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <draw_line>
    32b0:	db cf       	rjmp	.-74     	; 0x3268 <main+0xfa>

000032b2 <Dio_ConfigChannel>:
 *  Created on: Feb 12, 2022
 *      Author: 20100
 */
#include "Dio.h"
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <Dio_ConfigChannel+0x6>
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <Dio_ConfigChannel+0x8>
    32ba:	0f 92       	push	r0
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	6a 83       	std	Y+2, r22	; 0x02
    32c4:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	3d 83       	std	Y+5, r19	; 0x05
    32ce:	2c 83       	std	Y+4, r18	; 0x04
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	9d 81       	ldd	r25, Y+5	; 0x05
    32d4:	81 30       	cpi	r24, 0x01	; 1
    32d6:	91 05       	cpc	r25, r1
    32d8:	09 f4       	brne	.+2      	; 0x32dc <Dio_ConfigChannel+0x2a>
    32da:	43 c0       	rjmp	.+134    	; 0x3362 <Dio_ConfigChannel+0xb0>
    32dc:	2c 81       	ldd	r18, Y+4	; 0x04
    32de:	3d 81       	ldd	r19, Y+5	; 0x05
    32e0:	22 30       	cpi	r18, 0x02	; 2
    32e2:	31 05       	cpc	r19, r1
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <Dio_ConfigChannel+0x3e>
    32e6:	8c 81       	ldd	r24, Y+4	; 0x04
    32e8:	9d 81       	ldd	r25, Y+5	; 0x05
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	71 f0       	breq	.+28     	; 0x330a <Dio_ConfigChannel+0x58>
    32ee:	bc c0       	rjmp	.+376    	; 0x3468 <Dio_ConfigChannel+0x1b6>
    32f0:	2c 81       	ldd	r18, Y+4	; 0x04
    32f2:	3d 81       	ldd	r19, Y+5	; 0x05
    32f4:	22 30       	cpi	r18, 0x02	; 2
    32f6:	31 05       	cpc	r19, r1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <Dio_ConfigChannel+0x4a>
    32fa:	5f c0       	rjmp	.+190    	; 0x33ba <Dio_ConfigChannel+0x108>
    32fc:	8c 81       	ldd	r24, Y+4	; 0x04
    32fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3300:	83 30       	cpi	r24, 0x03	; 3
    3302:	91 05       	cpc	r25, r1
    3304:	09 f4       	brne	.+2      	; 0x3308 <Dio_ConfigChannel+0x56>
    3306:	85 c0       	rjmp	.+266    	; 0x3412 <Dio_ConfigChannel+0x160>
    3308:	af c0       	rjmp	.+350    	; 0x3468 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction == INPUT)
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	88 23       	and	r24, r24
    330e:	a9 f4       	brne	.+42     	; 0x333a <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    3310:	aa e3       	ldi	r26, 0x3A	; 58
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	ea e3       	ldi	r30, 0x3A	; 58
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	48 2f       	mov	r20, r24
    331c:	8a 81       	ldd	r24, Y+2	; 0x02
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	02 2e       	mov	r0, r18
    3328:	02 c0       	rjmp	.+4      	; 0x332e <Dio_ConfigChannel+0x7c>
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	0a 94       	dec	r0
    3330:	e2 f7       	brpl	.-8      	; 0x332a <Dio_ConfigChannel+0x78>
    3332:	80 95       	com	r24
    3334:	84 23       	and	r24, r20
    3336:	8c 93       	st	X, r24
    3338:	97 c0       	rjmp	.+302    	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    333a:	aa e3       	ldi	r26, 0x3A	; 58
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	ea e3       	ldi	r30, 0x3A	; 58
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	48 2f       	mov	r20, r24
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	02 2e       	mov	r0, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <Dio_ConfigChannel+0xa6>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	0a 94       	dec	r0
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <Dio_ConfigChannel+0xa2>
    335c:	84 2b       	or	r24, r20
    335e:	8c 93       	st	X, r24
    3360:	83 c0       	rjmp	.+262    	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction == INPUT)
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	88 23       	and	r24, r24
    3366:	a9 f4       	brne	.+42     	; 0x3392 <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    3368:	a7 e3       	ldi	r26, 0x37	; 55
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e7 e3       	ldi	r30, 0x37	; 55
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	48 2f       	mov	r20, r24
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	28 2f       	mov	r18, r24
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	02 2e       	mov	r0, r18
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <Dio_ConfigChannel+0xd4>
    3382:	88 0f       	add	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	0a 94       	dec	r0
    3388:	e2 f7       	brpl	.-8      	; 0x3382 <Dio_ConfigChannel+0xd0>
    338a:	80 95       	com	r24
    338c:	84 23       	and	r24, r20
    338e:	8c 93       	st	X, r24
    3390:	6b c0       	rjmp	.+214    	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    3392:	a7 e3       	ldi	r26, 0x37	; 55
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e7 e3       	ldi	r30, 0x37	; 55
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	48 2f       	mov	r20, r24
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <Dio_ConfigChannel+0xfe>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <Dio_ConfigChannel+0xfa>
    33b4:	84 2b       	or	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	57 c0       	rjmp	.+174    	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(direction == INPUT)
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	88 23       	and	r24, r24
    33be:	a9 f4       	brne	.+42     	; 0x33ea <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    33c0:	a4 e3       	ldi	r26, 0x34	; 52
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e4 e3       	ldi	r30, 0x34	; 52
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	48 2f       	mov	r20, r24
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 2e       	mov	r0, r18
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <Dio_ConfigChannel+0x12c>
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	0a 94       	dec	r0
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <Dio_ConfigChannel+0x128>
    33e2:	80 95       	com	r24
    33e4:	84 23       	and	r24, r20
    33e6:	8c 93       	st	X, r24
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    33ea:	a4 e3       	ldi	r26, 0x34	; 52
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e4 e3       	ldi	r30, 0x34	; 52
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	48 2f       	mov	r20, r24
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	02 2e       	mov	r0, r18
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <Dio_ConfigChannel+0x156>
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	0a 94       	dec	r0
    340a:	e2 f7       	brpl	.-8      	; 0x3404 <Dio_ConfigChannel+0x152>
    340c:	84 2b       	or	r24, r20
    340e:	8c 93       	st	X, r24
    3410:	2b c0       	rjmp	.+86     	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(direction == INPUT)
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	88 23       	and	r24, r24
    3416:	a9 f4       	brne	.+42     	; 0x3442 <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    3418:	a1 e3       	ldi	r26, 0x31	; 49
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	e1 e3       	ldi	r30, 0x31	; 49
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	48 2f       	mov	r20, r24
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	02 2e       	mov	r0, r18
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <Dio_ConfigChannel+0x184>
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	0a 94       	dec	r0
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <Dio_ConfigChannel+0x180>
    343a:	80 95       	com	r24
    343c:	84 23       	and	r24, r20
    343e:	8c 93       	st	X, r24
    3440:	13 c0       	rjmp	.+38     	; 0x3468 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    3442:	a1 e3       	ldi	r26, 0x31	; 49
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e1 e3       	ldi	r30, 0x31	; 49
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	48 2f       	mov	r20, r24
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	02 2e       	mov	r0, r18
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <Dio_ConfigChannel+0x1ae>
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	0a 94       	dec	r0
    3462:	e2 f7       	brpl	.-8      	; 0x345c <Dio_ConfigChannel+0x1aa>
    3464:	84 2b       	or	r24, r20
    3466:	8c 93       	st	X, r24
		}
		break;
	}

}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <Dio_WriteChannel+0x6>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <Dio_WriteChannel+0x8>
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	6a 83       	std	Y+2, r22	; 0x02
    348a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	3d 83       	std	Y+5, r19	; 0x05
    3494:	2c 83       	std	Y+4, r18	; 0x04
    3496:	8c 81       	ldd	r24, Y+4	; 0x04
    3498:	9d 81       	ldd	r25, Y+5	; 0x05
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	91 05       	cpc	r25, r1
    349e:	09 f4       	brne	.+2      	; 0x34a2 <Dio_WriteChannel+0x2a>
    34a0:	43 c0       	rjmp	.+134    	; 0x3528 <Dio_WriteChannel+0xb0>
    34a2:	2c 81       	ldd	r18, Y+4	; 0x04
    34a4:	3d 81       	ldd	r19, Y+5	; 0x05
    34a6:	22 30       	cpi	r18, 0x02	; 2
    34a8:	31 05       	cpc	r19, r1
    34aa:	2c f4       	brge	.+10     	; 0x34b6 <Dio_WriteChannel+0x3e>
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	71 f0       	breq	.+28     	; 0x34d0 <Dio_WriteChannel+0x58>
    34b4:	bc c0       	rjmp	.+376    	; 0x362e <Dio_WriteChannel+0x1b6>
    34b6:	2c 81       	ldd	r18, Y+4	; 0x04
    34b8:	3d 81       	ldd	r19, Y+5	; 0x05
    34ba:	22 30       	cpi	r18, 0x02	; 2
    34bc:	31 05       	cpc	r19, r1
    34be:	09 f4       	brne	.+2      	; 0x34c2 <Dio_WriteChannel+0x4a>
    34c0:	5f c0       	rjmp	.+190    	; 0x3580 <Dio_WriteChannel+0x108>
    34c2:	8c 81       	ldd	r24, Y+4	; 0x04
    34c4:	9d 81       	ldd	r25, Y+5	; 0x05
    34c6:	83 30       	cpi	r24, 0x03	; 3
    34c8:	91 05       	cpc	r25, r1
    34ca:	09 f4       	brne	.+2      	; 0x34ce <Dio_WriteChannel+0x56>
    34cc:	85 c0       	rjmp	.+266    	; 0x35d8 <Dio_WriteChannel+0x160>
    34ce:	af c0       	rjmp	.+350    	; 0x362e <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level == STD_HIGH)
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	81 30       	cpi	r24, 0x01	; 1
    34d4:	a1 f4       	brne	.+40     	; 0x34fe <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    34d6:	ab e3       	ldi	r26, 0x3B	; 59
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	eb e3       	ldi	r30, 0x3B	; 59
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	48 2f       	mov	r20, r24
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	02 2e       	mov	r0, r18
    34ee:	02 c0       	rjmp	.+4      	; 0x34f4 <Dio_WriteChannel+0x7c>
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	0a 94       	dec	r0
    34f6:	e2 f7       	brpl	.-8      	; 0x34f0 <Dio_WriteChannel+0x78>
    34f8:	84 2b       	or	r24, r20
    34fa:	8c 93       	st	X, r24
    34fc:	98 c0       	rjmp	.+304    	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    34fe:	ab e3       	ldi	r26, 0x3B	; 59
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	eb e3       	ldi	r30, 0x3B	; 59
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	48 2f       	mov	r20, r24
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	28 2f       	mov	r18, r24
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	02 2e       	mov	r0, r18
    3516:	02 c0       	rjmp	.+4      	; 0x351c <Dio_WriteChannel+0xa4>
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	0a 94       	dec	r0
    351e:	e2 f7       	brpl	.-8      	; 0x3518 <Dio_WriteChannel+0xa0>
    3520:	80 95       	com	r24
    3522:	84 23       	and	r24, r20
    3524:	8c 93       	st	X, r24
    3526:	83 c0       	rjmp	.+262    	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(level == STD_HIGH)
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	a1 f4       	brne	.+40     	; 0x3556 <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    352e:	a8 e3       	ldi	r26, 0x38	; 56
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e8 e3       	ldi	r30, 0x38	; 56
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	48 2f       	mov	r20, r24
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	02 2e       	mov	r0, r18
    3546:	02 c0       	rjmp	.+4      	; 0x354c <Dio_WriteChannel+0xd4>
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	0a 94       	dec	r0
    354e:	e2 f7       	brpl	.-8      	; 0x3548 <Dio_WriteChannel+0xd0>
    3550:	84 2b       	or	r24, r20
    3552:	8c 93       	st	X, r24
    3554:	6c c0       	rjmp	.+216    	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    3556:	a8 e3       	ldi	r26, 0x38	; 56
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	e8 e3       	ldi	r30, 0x38	; 56
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	48 2f       	mov	r20, r24
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	28 2f       	mov	r18, r24
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	02 2e       	mov	r0, r18
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <Dio_WriteChannel+0xfc>
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	0a 94       	dec	r0
    3576:	e2 f7       	brpl	.-8      	; 0x3570 <Dio_WriteChannel+0xf8>
    3578:	80 95       	com	r24
    357a:	84 23       	and	r24, r20
    357c:	8c 93       	st	X, r24
    357e:	57 c0       	rjmp	.+174    	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(level == STD_HIGH)
    3580:	8b 81       	ldd	r24, Y+3	; 0x03
    3582:	81 30       	cpi	r24, 0x01	; 1
    3584:	a1 f4       	brne	.+40     	; 0x35ae <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    3586:	a5 e3       	ldi	r26, 0x35	; 53
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e5 e3       	ldi	r30, 0x35	; 53
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	48 2f       	mov	r20, r24
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	02 2e       	mov	r0, r18
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <Dio_WriteChannel+0x12c>
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	0a 94       	dec	r0
    35a6:	e2 f7       	brpl	.-8      	; 0x35a0 <Dio_WriteChannel+0x128>
    35a8:	84 2b       	or	r24, r20
    35aa:	8c 93       	st	X, r24
    35ac:	40 c0       	rjmp	.+128    	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    35ae:	a5 e3       	ldi	r26, 0x35	; 53
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	e5 e3       	ldi	r30, 0x35	; 53
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	48 2f       	mov	r20, r24
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	02 2e       	mov	r0, r18
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <Dio_WriteChannel+0x154>
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	0a 94       	dec	r0
    35ce:	e2 f7       	brpl	.-8      	; 0x35c8 <Dio_WriteChannel+0x150>
    35d0:	80 95       	com	r24
    35d2:	84 23       	and	r24, r20
    35d4:	8c 93       	st	X, r24
    35d6:	2b c0       	rjmp	.+86     	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(level == STD_HIGH)
    35d8:	8b 81       	ldd	r24, Y+3	; 0x03
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	a1 f4       	brne	.+40     	; 0x3606 <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    35de:	a2 e3       	ldi	r26, 0x32	; 50
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e2 e3       	ldi	r30, 0x32	; 50
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	48 2f       	mov	r20, r24
    35ea:	8a 81       	ldd	r24, Y+2	; 0x02
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	02 2e       	mov	r0, r18
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <Dio_WriteChannel+0x184>
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	0a 94       	dec	r0
    35fe:	e2 f7       	brpl	.-8      	; 0x35f8 <Dio_WriteChannel+0x180>
    3600:	84 2b       	or	r24, r20
    3602:	8c 93       	st	X, r24
    3604:	14 c0       	rjmp	.+40     	; 0x362e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    3606:	a2 e3       	ldi	r26, 0x32	; 50
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e2 e3       	ldi	r30, 0x32	; 50
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	48 2f       	mov	r20, r24
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	28 2f       	mov	r18, r24
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	02 2e       	mov	r0, r18
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <Dio_WriteChannel+0x1ac>
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	0a 94       	dec	r0
    3626:	e2 f7       	brpl	.-8      	; 0x3620 <Dio_WriteChannel+0x1a8>
    3628:	80 95       	com	r24
    362a:	84 23       	and	r24, r20
    362c:	8c 93       	st	X, r24
		}
		break;
	}
}
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	00 d0       	rcall	.+0      	; 0x3644 <Dio_WriteGroup+0x6>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <Dio_WriteGroup+0x8>
    3646:	0f 92       	push	r0
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	6a 83       	std	Y+2, r22	; 0x02
    3650:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	3d 83       	std	Y+5, r19	; 0x05
    365a:	2c 83       	std	Y+4, r18	; 0x04
    365c:	8c 81       	ldd	r24, Y+4	; 0x04
    365e:	9d 81       	ldd	r25, Y+5	; 0x05
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	91 05       	cpc	r25, r1
    3664:	59 f1       	breq	.+86     	; 0x36bc <Dio_WriteGroup+0x7e>
    3666:	2c 81       	ldd	r18, Y+4	; 0x04
    3668:	3d 81       	ldd	r19, Y+5	; 0x05
    366a:	22 30       	cpi	r18, 0x02	; 2
    366c:	31 05       	cpc	r19, r1
    366e:	2c f4       	brge	.+10     	; 0x367a <Dio_WriteGroup+0x3c>
    3670:	8c 81       	ldd	r24, Y+4	; 0x04
    3672:	9d 81       	ldd	r25, Y+5	; 0x05
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	69 f0       	breq	.+26     	; 0x3692 <Dio_WriteGroup+0x54>
    3678:	5f c0       	rjmp	.+190    	; 0x3738 <Dio_WriteGroup+0xfa>
    367a:	2c 81       	ldd	r18, Y+4	; 0x04
    367c:	3d 81       	ldd	r19, Y+5	; 0x05
    367e:	22 30       	cpi	r18, 0x02	; 2
    3680:	31 05       	cpc	r19, r1
    3682:	89 f1       	breq	.+98     	; 0x36e6 <Dio_WriteGroup+0xa8>
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	9d 81       	ldd	r25, Y+5	; 0x05
    3688:	83 30       	cpi	r24, 0x03	; 3
    368a:	91 05       	cpc	r25, r1
    368c:	09 f4       	brne	.+2      	; 0x3690 <Dio_WriteGroup+0x52>
    368e:	40 c0       	rjmp	.+128    	; 0x3710 <Dio_WriteGroup+0xd2>
    3690:	53 c0       	rjmp	.+166    	; 0x3738 <Dio_WriteGroup+0xfa>
	{
	case DIO_PORTA:

		DIO_PORTA_REG &= ~mask;
    3692:	ab e3       	ldi	r26, 0x3B	; 59
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	eb e3       	ldi	r30, 0x3B	; 59
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	98 2f       	mov	r25, r24
    369e:	8a 81       	ldd	r24, Y+2	; 0x02
    36a0:	80 95       	com	r24
    36a2:	89 23       	and	r24, r25
    36a4:	8c 93       	st	X, r24
		DIO_PORTA_REG |= (data & mask);
    36a6:	ab e3       	ldi	r26, 0x3B	; 59
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	eb e3       	ldi	r30, 0x3B	; 59
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	20 81       	ld	r18, Z
    36b0:	9b 81       	ldd	r25, Y+3	; 0x03
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	89 23       	and	r24, r25
    36b6:	82 2b       	or	r24, r18
    36b8:	8c 93       	st	X, r24
    36ba:	3e c0       	rjmp	.+124    	; 0x3738 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG &= ~mask;
    36bc:	a8 e3       	ldi	r26, 0x38	; 56
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e8 e3       	ldi	r30, 0x38	; 56
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	98 2f       	mov	r25, r24
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	80 95       	com	r24
    36cc:	89 23       	and	r24, r25
    36ce:	8c 93       	st	X, r24
		DIO_PORTB_REG |= (data & mask);
    36d0:	a8 e3       	ldi	r26, 0x38	; 56
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	e8 e3       	ldi	r30, 0x38	; 56
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	20 81       	ld	r18, Z
    36da:	9b 81       	ldd	r25, Y+3	; 0x03
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	89 23       	and	r24, r25
    36e0:	82 2b       	or	r24, r18
    36e2:	8c 93       	st	X, r24
    36e4:	29 c0       	rjmp	.+82     	; 0x3738 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG &= ~mask;
    36e6:	a5 e3       	ldi	r26, 0x35	; 53
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e5 e3       	ldi	r30, 0x35	; 53
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	98 2f       	mov	r25, r24
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	80 95       	com	r24
    36f6:	89 23       	and	r24, r25
    36f8:	8c 93       	st	X, r24
		DIO_PORTC_REG |= (data & mask);
    36fa:	a5 e3       	ldi	r26, 0x35	; 53
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e5 e3       	ldi	r30, 0x35	; 53
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	20 81       	ld	r18, Z
    3704:	9b 81       	ldd	r25, Y+3	; 0x03
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	89 23       	and	r24, r25
    370a:	82 2b       	or	r24, r18
    370c:	8c 93       	st	X, r24
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG &= ~mask;
    3710:	a2 e3       	ldi	r26, 0x32	; 50
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e2 e3       	ldi	r30, 0x32	; 50
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	98 2f       	mov	r25, r24
    371c:	8a 81       	ldd	r24, Y+2	; 0x02
    371e:	80 95       	com	r24
    3720:	89 23       	and	r24, r25
    3722:	8c 93       	st	X, r24
		DIO_PORTD_REG |= (data & mask);
    3724:	a2 e3       	ldi	r26, 0x32	; 50
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	e2 e3       	ldi	r30, 0x32	; 50
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	20 81       	ld	r18, Z
    372e:	9b 81       	ldd	r25, Y+3	; 0x03
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	89 23       	and	r24, r25
    3734:	82 2b       	or	r24, r18
    3736:	8c 93       	st	X, r24
		break;
	}
}
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	cf 91       	pop	r28
    3744:	df 91       	pop	r29
    3746:	08 95       	ret

00003748 <Dio_ToggleChannel>:
void Dio_ToggleChannel(port_type port, pin_type pin)
{
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	00 d0       	rcall	.+0      	; 0x374e <Dio_ToggleChannel+0x6>
    374e:	00 d0       	rcall	.+0      	; 0x3750 <Dio_ToggleChannel+0x8>
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	89 83       	std	Y+1, r24	; 0x01
    3756:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	3c 83       	std	Y+4, r19	; 0x04
    3760:	2b 83       	std	Y+3, r18	; 0x03
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	9c 81       	ldd	r25, Y+4	; 0x04
    3766:	81 30       	cpi	r24, 0x01	; 1
    3768:	91 05       	cpc	r25, r1
    376a:	49 f1       	breq	.+82     	; 0x37be <Dio_ToggleChannel+0x76>
    376c:	2b 81       	ldd	r18, Y+3	; 0x03
    376e:	3c 81       	ldd	r19, Y+4	; 0x04
    3770:	22 30       	cpi	r18, 0x02	; 2
    3772:	31 05       	cpc	r19, r1
    3774:	2c f4       	brge	.+10     	; 0x3780 <Dio_ToggleChannel+0x38>
    3776:	8b 81       	ldd	r24, Y+3	; 0x03
    3778:	9c 81       	ldd	r25, Y+4	; 0x04
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	61 f0       	breq	.+24     	; 0x3796 <Dio_ToggleChannel+0x4e>
    377e:	5a c0       	rjmp	.+180    	; 0x3834 <Dio_ToggleChannel+0xec>
    3780:	2b 81       	ldd	r18, Y+3	; 0x03
    3782:	3c 81       	ldd	r19, Y+4	; 0x04
    3784:	22 30       	cpi	r18, 0x02	; 2
    3786:	31 05       	cpc	r19, r1
    3788:	71 f1       	breq	.+92     	; 0x37e6 <Dio_ToggleChannel+0x9e>
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	9c 81       	ldd	r25, Y+4	; 0x04
    378e:	83 30       	cpi	r24, 0x03	; 3
    3790:	91 05       	cpc	r25, r1
    3792:	e9 f1       	breq	.+122    	; 0x380e <Dio_ToggleChannel+0xc6>
    3794:	4f c0       	rjmp	.+158    	; 0x3834 <Dio_ToggleChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    3796:	ab e3       	ldi	r26, 0x3B	; 59
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	eb e3       	ldi	r30, 0x3B	; 59
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 81       	ld	r24, Z
    37a0:	48 2f       	mov	r20, r24
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	28 2f       	mov	r18, r24
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	02 2e       	mov	r0, r18
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <Dio_ToggleChannel+0x6c>
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	0a 94       	dec	r0
    37b6:	e2 f7       	brpl	.-8      	; 0x37b0 <Dio_ToggleChannel+0x68>
    37b8:	84 27       	eor	r24, r20
    37ba:	8c 93       	st	X, r24
    37bc:	3b c0       	rjmp	.+118    	; 0x3834 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    37be:	a8 e3       	ldi	r26, 0x38	; 56
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	e8 e3       	ldi	r30, 0x38	; 56
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	48 2f       	mov	r20, r24
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	28 2f       	mov	r18, r24
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	02 2e       	mov	r0, r18
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <Dio_ToggleChannel+0x94>
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	0a 94       	dec	r0
    37de:	e2 f7       	brpl	.-8      	; 0x37d8 <Dio_ToggleChannel+0x90>
    37e0:	84 27       	eor	r24, r20
    37e2:	8c 93       	st	X, r24
    37e4:	27 c0       	rjmp	.+78     	; 0x3834 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    37e6:	a5 e3       	ldi	r26, 0x35	; 53
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e5 e3       	ldi	r30, 0x35	; 53
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	48 2f       	mov	r20, r24
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	02 2e       	mov	r0, r18
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <Dio_ToggleChannel+0xbc>
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	0a 94       	dec	r0
    3806:	e2 f7       	brpl	.-8      	; 0x3800 <Dio_ToggleChannel+0xb8>
    3808:	84 27       	eor	r24, r20
    380a:	8c 93       	st	X, r24
    380c:	13 c0       	rjmp	.+38     	; 0x3834 <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    380e:	a2 e3       	ldi	r26, 0x32	; 50
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	e2 e3       	ldi	r30, 0x32	; 50
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	80 81       	ld	r24, Z
    3818:	48 2f       	mov	r20, r24
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	28 2f       	mov	r18, r24
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	02 2e       	mov	r0, r18
    3826:	02 c0       	rjmp	.+4      	; 0x382c <Dio_ToggleChannel+0xe4>
    3828:	88 0f       	add	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	0a 94       	dec	r0
    382e:	e2 f7       	brpl	.-8      	; 0x3828 <Dio_ToggleChannel+0xe0>
    3830:	84 27       	eor	r24, r20
    3832:	8c 93       	st	X, r24
		break;
	}
}
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	00 d0       	rcall	.+0      	; 0x3848 <Dio_ReadChannel+0x6>
    3848:	00 d0       	rcall	.+0      	; 0x384a <Dio_ReadChannel+0x8>
    384a:	0f 92       	push	r0
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	8a 83       	std	Y+2, r24	; 0x02
    3852:	6b 83       	std	Y+3, r22	; 0x03
	level_type res = STD_LOW;
    3854:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	28 2f       	mov	r18, r24
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	3d 83       	std	Y+5, r19	; 0x05
    385e:	2c 83       	std	Y+4, r18	; 0x04
    3860:	4c 81       	ldd	r20, Y+4	; 0x04
    3862:	5d 81       	ldd	r21, Y+5	; 0x05
    3864:	41 30       	cpi	r20, 0x01	; 1
    3866:	51 05       	cpc	r21, r1
    3868:	79 f1       	breq	.+94     	; 0x38c8 <Dio_ReadChannel+0x86>
    386a:	8c 81       	ldd	r24, Y+4	; 0x04
    386c:	9d 81       	ldd	r25, Y+5	; 0x05
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	91 05       	cpc	r25, r1
    3872:	34 f4       	brge	.+12     	; 0x3880 <Dio_ReadChannel+0x3e>
    3874:	2c 81       	ldd	r18, Y+4	; 0x04
    3876:	3d 81       	ldd	r19, Y+5	; 0x05
    3878:	21 15       	cp	r18, r1
    387a:	31 05       	cpc	r19, r1
    387c:	69 f0       	breq	.+26     	; 0x3898 <Dio_ReadChannel+0x56>
    387e:	6b c0       	rjmp	.+214    	; 0x3956 <Dio_ReadChannel+0x114>
    3880:	4c 81       	ldd	r20, Y+4	; 0x04
    3882:	5d 81       	ldd	r21, Y+5	; 0x05
    3884:	42 30       	cpi	r20, 0x02	; 2
    3886:	51 05       	cpc	r21, r1
    3888:	b9 f1       	breq	.+110    	; 0x38f8 <Dio_ReadChannel+0xb6>
    388a:	8c 81       	ldd	r24, Y+4	; 0x04
    388c:	9d 81       	ldd	r25, Y+5	; 0x05
    388e:	83 30       	cpi	r24, 0x03	; 3
    3890:	91 05       	cpc	r25, r1
    3892:	09 f4       	brne	.+2      	; 0x3896 <Dio_ReadChannel+0x54>
    3894:	49 c0       	rjmp	.+146    	; 0x3928 <Dio_ReadChannel+0xe6>
    3896:	5f c0       	rjmp	.+190    	; 0x3956 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if (GET_BIT(DIO_PINA_REG,pin))
    3898:	e9 e3       	ldi	r30, 0x39	; 57
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	8b 81       	ldd	r24, Y+3	; 0x03
    38a4:	88 2f       	mov	r24, r24
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	a9 01       	movw	r20, r18
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <Dio_ReadChannel+0x6e>
    38ac:	55 95       	asr	r21
    38ae:	47 95       	ror	r20
    38b0:	8a 95       	dec	r24
    38b2:	e2 f7       	brpl	.-8      	; 0x38ac <Dio_ReadChannel+0x6a>
    38b4:	ca 01       	movw	r24, r20
    38b6:	81 70       	andi	r24, 0x01	; 1
    38b8:	90 70       	andi	r25, 0x00	; 0
    38ba:	88 23       	and	r24, r24
    38bc:	19 f0       	breq	.+6      	; 0x38c4 <Dio_ReadChannel+0x82>
			res = STD_HIGH;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	49 c0       	rjmp	.+146    	; 0x3956 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    38c4:	19 82       	std	Y+1, r1	; 0x01
    38c6:	47 c0       	rjmp	.+142    	; 0x3956 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTB:
		if (GET_BIT(DIO_PINB_REG,pin))
    38c8:	e6 e3       	ldi	r30, 0x36	; 54
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	28 2f       	mov	r18, r24
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	88 2f       	mov	r24, r24
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a9 01       	movw	r20, r18
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <Dio_ReadChannel+0x9e>
    38dc:	55 95       	asr	r21
    38de:	47 95       	ror	r20
    38e0:	8a 95       	dec	r24
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <Dio_ReadChannel+0x9a>
    38e4:	ca 01       	movw	r24, r20
    38e6:	81 70       	andi	r24, 0x01	; 1
    38e8:	90 70       	andi	r25, 0x00	; 0
    38ea:	88 23       	and	r24, r24
    38ec:	19 f0       	breq	.+6      	; 0x38f4 <Dio_ReadChannel+0xb2>
			res = STD_HIGH;
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	31 c0       	rjmp	.+98     	; 0x3956 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    38f4:	19 82       	std	Y+1, r1	; 0x01
    38f6:	2f c0       	rjmp	.+94     	; 0x3956 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTC:
		if (GET_BIT(DIO_PINC_REG,pin))
    38f8:	e3 e3       	ldi	r30, 0x33	; 51
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	88 2f       	mov	r24, r24
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	a9 01       	movw	r20, r18
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <Dio_ReadChannel+0xce>
    390c:	55 95       	asr	r21
    390e:	47 95       	ror	r20
    3910:	8a 95       	dec	r24
    3912:	e2 f7       	brpl	.-8      	; 0x390c <Dio_ReadChannel+0xca>
    3914:	ca 01       	movw	r24, r20
    3916:	81 70       	andi	r24, 0x01	; 1
    3918:	90 70       	andi	r25, 0x00	; 0
    391a:	88 23       	and	r24, r24
    391c:	19 f0       	breq	.+6      	; 0x3924 <Dio_ReadChannel+0xe2>
			res = STD_HIGH;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	19 c0       	rjmp	.+50     	; 0x3956 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3924:	19 82       	std	Y+1, r1	; 0x01
    3926:	17 c0       	rjmp	.+46     	; 0x3956 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTD:
		if (GET_BIT(DIO_PIND_REG,pin))
    3928:	e0 e3       	ldi	r30, 0x30	; 48
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	8b 81       	ldd	r24, Y+3	; 0x03
    3934:	88 2f       	mov	r24, r24
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a9 01       	movw	r20, r18
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <Dio_ReadChannel+0xfe>
    393c:	55 95       	asr	r21
    393e:	47 95       	ror	r20
    3940:	8a 95       	dec	r24
    3942:	e2 f7       	brpl	.-8      	; 0x393c <Dio_ReadChannel+0xfa>
    3944:	ca 01       	movw	r24, r20
    3946:	81 70       	andi	r24, 0x01	; 1
    3948:	90 70       	andi	r25, 0x00	; 0
    394a:	88 23       	and	r24, r24
    394c:	19 f0       	breq	.+6      	; 0x3954 <Dio_ReadChannel+0x112>
			res = STD_HIGH;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    3954:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return res;
    3956:	89 81       	ldd	r24, Y+1	; 0x01
}
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	08 95       	ret

00003968 <BUZZER_Init>:
 *      Author: 20100
 */
#include "Buzzer.h"

void BUZZER_Init(void)
{
    3968:	df 93       	push	r29
    396a:	cf 93       	push	r28
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	63 e0       	ldi	r22, 0x03	; 3
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
}
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <BUZZER_ON>:
void BUZZER_ON(void)
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_HIGH);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	63 e0       	ldi	r22, 0x03	; 3
    398c:	41 e0       	ldi	r20, 0x01	; 1
    398e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
}
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_LOW);
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	63 e0       	ldi	r22, 0x03	; 3
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Dio_WriteChannel>
}
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <BUZZER_TOGGLE>:
void BUZZER_TOGGLE(void)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
	Dio_ToggleChannel(BUZZER_PORT, BUZZER_PIN);
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	63 e0       	ldi	r22, 0x03	; 3
    39bc:	0e 94 a4 1b 	call	0x3748	; 0x3748 <Dio_ToggleChannel>
}
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <Buzzer_GetStatus>:
buzzer_type Buzzer_GetStatus(void)
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	0f 92       	push	r0
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
	buzzer_type status = OFF;
    39d0:	19 82       	std	Y+1, r1	; 0x01
	if(Dio_ReadChannel(BUZZER_PORT, BUZZER_PIN) == STD_HIGH)
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	63 e0       	ldi	r22, 0x03	; 3
    39d6:	0e 94 21 1c 	call	0x3842	; 0x3842 <Dio_ReadChannel>
    39da:	81 30       	cpi	r24, 0x01	; 1
    39dc:	19 f4       	brne	.+6      	; 0x39e4 <Buzzer_GetStatus+0x1e>
	{
		status = ON;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	89 83       	std	Y+1, r24	; 0x01
    39e2:	01 c0       	rjmp	.+2      	; 0x39e6 <Buzzer_GetStatus+0x20>
	}
	else
	{
		status = OFF;
    39e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e8:	0f 90       	pop	r0
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <Button_Init>:
 */

#include "Button.h"

void Button_Init(void)
{
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT, BUTTON0_PIN, INPUT);//BUTTON 0
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRB_REG,0);
	Dio_ConfigChannel(BUTTON1_PORT, BUTTON1_PIN, INPUT);//BUTTON 1
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	66 e0       	ldi	r22, 0x06	; 6
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,6);
	Dio_ConfigChannel(BUTTON2_PORT, BUTTON2_PIN, INPUT);//BUTTON 2
    3a0c:	83 e0       	ldi	r24, 0x03	; 3
    3a0e:	62 e0       	ldi	r22, 0x02	; 2
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,2);
}
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <Button_GetStatus+0x6>
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <Button_GetStatus+0x8>
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    3a2a:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	28 2f       	mov	r18, r24
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	3c 83       	std	Y+4, r19	; 0x04
    3a34:	2b 83       	std	Y+3, r18	; 0x03
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3a:	81 30       	cpi	r24, 0x01	; 1
    3a3c:	91 05       	cpc	r25, r1
    3a3e:	a1 f0       	breq	.+40     	; 0x3a68 <Button_GetStatus+0x4c>
    3a40:	2b 81       	ldd	r18, Y+3	; 0x03
    3a42:	3c 81       	ldd	r19, Y+4	; 0x04
    3a44:	22 30       	cpi	r18, 0x02	; 2
    3a46:	31 05       	cpc	r19, r1
    3a48:	d1 f0       	breq	.+52     	; 0x3a7e <Button_GetStatus+0x62>
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	01 f5       	brne	.+64     	; 0x3a92 <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if(Dio_ReadChannel(BUTTON0_PORT, BUTTON0_PIN) == STD_HIGH)
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	0e 94 21 1c 	call	0x3842	; 0x3842 <Dio_ReadChannel>
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	19 f4       	brne	.+6      	; 0x3a64 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	17 c0       	rjmp	.+46     	; 0x3a92 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    3a64:	19 82       	std	Y+1, r1	; 0x01
    3a66:	15 c0       	rjmp	.+42     	; 0x3a92 <Button_GetStatus+0x76>
		}
		break;
	case BUTTON1:
		if(Dio_ReadChannel(BUTTON1_PORT, BUTTON1_PIN) == STD_HIGH)
    3a68:	83 e0       	ldi	r24, 0x03	; 3
    3a6a:	66 e0       	ldi	r22, 0x06	; 6
    3a6c:	0e 94 21 1c 	call	0x3842	; 0x3842 <Dio_ReadChannel>
    3a70:	81 30       	cpi	r24, 0x01	; 1
    3a72:	19 f4       	brne	.+6      	; 0x3a7a <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	0c c0       	rjmp	.+24     	; 0x3a92 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    3a7a:	19 82       	std	Y+1, r1	; 0x01
    3a7c:	0a c0       	rjmp	.+20     	; 0x3a92 <Button_GetStatus+0x76>
		}
		break;
	case BUTTON2:
		if(Dio_ReadChannel(BUTTON2_PORT, BUTTON2_PIN) == STD_HIGH)
    3a7e:	83 e0       	ldi	r24, 0x03	; 3
    3a80:	62 e0       	ldi	r22, 0x02	; 2
    3a82:	0e 94 21 1c 	call	0x3842	; 0x3842 <Dio_ReadChannel>
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	19 f4       	brne	.+6      	; 0x3a90 <Button_GetStatus+0x74>
		{
			status = PRESSED;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	01 c0       	rjmp	.+2      	; 0x3a92 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    3a90:	19 82       	std	Y+1, r1	; 0x01
		}
		break;


	}
	return status;
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <TIMER0_Init>:
 * Target	:  ATMEGA32
 * Author	:  Eng_Fawzi
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
    3aaa:	e3 e5       	ldi	r30, 0x53	; 83
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	a3 e5       	ldi	r26, 0x53	; 83
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	8c 91       	ld	r24, X
    3ab4:	80 83       	st	Z, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    3ab6:	cf 91       	pop	r28
    3ab8:	df 91       	pop	r29
    3aba:	08 95       	ret

00003abc <TIMER0_Start>:
#if ((TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL) || (TIMER_OPERATION_MODE == TIMER0_MODE_CTC))
void TIMER0_Start(u8 prescaler)
{
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	0f 92       	push	r0
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCCR0_REG |=prescaler;
    3ac8:	a3 e5       	ldi	r26, 0x53	; 83
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	e3 e5       	ldi	r30, 0x53	; 83
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	90 81       	ld	r25, Z
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	89 2b       	or	r24, r25
    3ad6:	8c 93       	st	X, r24
}
    3ad8:	0f 90       	pop	r0
    3ada:	cf 91       	pop	r28
    3adc:	df 91       	pop	r29
    3ade:	08 95       	ret

00003ae0 <TIMER0_Stop>:

void TIMER0_Stop(void)
{
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0_REG &=0xFC;
    3ae8:	a3 e5       	ldi	r26, 0x53	; 83
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e3 e5       	ldi	r30, 0x53	; 83
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	8c 7f       	andi	r24, 0xFC	; 252
    3af4:	8c 93       	st	X, r24
}
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 preLoadValue)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	0f 92       	push	r0
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = preLoadValue;
    3b08:	e2 e5       	ldi	r30, 0x52	; 82
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	80 83       	st	Z, r24
}
    3b10:	0f 90       	pop	r0
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <TIMER0_GetPreload>:
u8 TIMER0_GetPreload()
{
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	return TIMER0_TCNT0_REG;
    3b20:	e2 e5       	ldi	r30, 0x52	; 82
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
}
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <TIMER0_EnableInterrupt>:
void TIMER0_EnableInterrupt(void)
{
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    3b34:	a9 e5       	ldi	r26, 0x59	; 89
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	e9 e5       	ldi	r30, 0x59	; 89
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	80 81       	ld	r24, Z
    3b3e:	81 60       	ori	r24, 0x01	; 1
    3b40:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	08 95       	ret

00003b48 <TIMER0_DisableInterrupt>:
void TIMER0_DisableInterrupt(void)
{
    3b48:	df 93       	push	r29
    3b4a:	cf 93       	push	r28
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    3b50:	a9 e5       	ldi	r26, 0x59	; 89
    3b52:	b0 e0       	ldi	r27, 0x00	; 0
    3b54:	e9 e5       	ldi	r30, 0x59	; 89
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	8e 7f       	andi	r24, 0xFE	; 254
    3b5c:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <TIMER0_SetCompareValue>:
void TIMER0_SetCompareValue(u8 compareValue)
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	0f 92       	push	r0
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = compareValue;
    3b70:	ec e5       	ldi	r30, 0x5C	; 92
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	80 83       	st	Z, r24
}
    3b78:	0f 90       	pop	r0
    3b7a:	cf 91       	pop	r28
    3b7c:	df 91       	pop	r29
    3b7e:	08 95       	ret

00003b80 <__udivmodqi4>:
    3b80:	99 1b       	sub	r25, r25
    3b82:	79 e0       	ldi	r23, 0x09	; 9
    3b84:	04 c0       	rjmp	.+8      	; 0x3b8e <__udivmodqi4_ep>

00003b86 <__udivmodqi4_loop>:
    3b86:	99 1f       	adc	r25, r25
    3b88:	96 17       	cp	r25, r22
    3b8a:	08 f0       	brcs	.+2      	; 0x3b8e <__udivmodqi4_ep>
    3b8c:	96 1b       	sub	r25, r22

00003b8e <__udivmodqi4_ep>:
    3b8e:	88 1f       	adc	r24, r24
    3b90:	7a 95       	dec	r23
    3b92:	c9 f7       	brne	.-14     	; 0x3b86 <__udivmodqi4_loop>
    3b94:	80 95       	com	r24
    3b96:	08 95       	ret

00003b98 <__udivmodhi4>:
    3b98:	aa 1b       	sub	r26, r26
    3b9a:	bb 1b       	sub	r27, r27
    3b9c:	51 e1       	ldi	r21, 0x11	; 17
    3b9e:	07 c0       	rjmp	.+14     	; 0x3bae <__udivmodhi4_ep>

00003ba0 <__udivmodhi4_loop>:
    3ba0:	aa 1f       	adc	r26, r26
    3ba2:	bb 1f       	adc	r27, r27
    3ba4:	a6 17       	cp	r26, r22
    3ba6:	b7 07       	cpc	r27, r23
    3ba8:	10 f0       	brcs	.+4      	; 0x3bae <__udivmodhi4_ep>
    3baa:	a6 1b       	sub	r26, r22
    3bac:	b7 0b       	sbc	r27, r23

00003bae <__udivmodhi4_ep>:
    3bae:	88 1f       	adc	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	5a 95       	dec	r21
    3bb4:	a9 f7       	brne	.-22     	; 0x3ba0 <__udivmodhi4_loop>
    3bb6:	80 95       	com	r24
    3bb8:	90 95       	com	r25
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	08 95       	ret

00003bc0 <__divmodhi4>:
    3bc0:	97 fb       	bst	r25, 7
    3bc2:	09 2e       	mov	r0, r25
    3bc4:	07 26       	eor	r0, r23
    3bc6:	0a d0       	rcall	.+20     	; 0x3bdc <__divmodhi4_neg1>
    3bc8:	77 fd       	sbrc	r23, 7
    3bca:	04 d0       	rcall	.+8      	; 0x3bd4 <__divmodhi4_neg2>
    3bcc:	e5 df       	rcall	.-54     	; 0x3b98 <__udivmodhi4>
    3bce:	06 d0       	rcall	.+12     	; 0x3bdc <__divmodhi4_neg1>
    3bd0:	00 20       	and	r0, r0
    3bd2:	1a f4       	brpl	.+6      	; 0x3bda <__divmodhi4_exit>

00003bd4 <__divmodhi4_neg2>:
    3bd4:	70 95       	com	r23
    3bd6:	61 95       	neg	r22
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00003bda <__divmodhi4_exit>:
    3bda:	08 95       	ret

00003bdc <__divmodhi4_neg1>:
    3bdc:	f6 f7       	brtc	.-4      	; 0x3bda <__divmodhi4_exit>
    3bde:	90 95       	com	r25
    3be0:	81 95       	neg	r24
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	08 95       	ret

00003be6 <__prologue_saves__>:
    3be6:	2f 92       	push	r2
    3be8:	3f 92       	push	r3
    3bea:	4f 92       	push	r4
    3bec:	5f 92       	push	r5
    3bee:	6f 92       	push	r6
    3bf0:	7f 92       	push	r7
    3bf2:	8f 92       	push	r8
    3bf4:	9f 92       	push	r9
    3bf6:	af 92       	push	r10
    3bf8:	bf 92       	push	r11
    3bfa:	cf 92       	push	r12
    3bfc:	df 92       	push	r13
    3bfe:	ef 92       	push	r14
    3c00:	ff 92       	push	r15
    3c02:	0f 93       	push	r16
    3c04:	1f 93       	push	r17
    3c06:	cf 93       	push	r28
    3c08:	df 93       	push	r29
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	ca 1b       	sub	r28, r26
    3c10:	db 0b       	sbc	r29, r27
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	09 94       	ijmp

00003c1e <__epilogue_restores__>:
    3c1e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c20:	39 88       	ldd	r3, Y+17	; 0x11
    3c22:	48 88       	ldd	r4, Y+16	; 0x10
    3c24:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c26:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c28:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c30:	b9 84       	ldd	r11, Y+9	; 0x09
    3c32:	c8 84       	ldd	r12, Y+8	; 0x08
    3c34:	df 80       	ldd	r13, Y+7	; 0x07
    3c36:	ee 80       	ldd	r14, Y+6	; 0x06
    3c38:	fd 80       	ldd	r15, Y+5	; 0x05
    3c3a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c3c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c3e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c40:	b9 81       	ldd	r27, Y+1	; 0x01
    3c42:	ce 0f       	add	r28, r30
    3c44:	d1 1d       	adc	r29, r1
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	ed 01       	movw	r28, r26
    3c52:	08 95       	ret

00003c54 <memcpy>:
    3c54:	fb 01       	movw	r30, r22
    3c56:	dc 01       	movw	r26, r24
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <memcpy+0xa>
    3c5a:	01 90       	ld	r0, Z+
    3c5c:	0d 92       	st	X+, r0
    3c5e:	41 50       	subi	r20, 0x01	; 1
    3c60:	50 40       	sbci	r21, 0x00	; 0
    3c62:	d8 f7       	brcc	.-10     	; 0x3c5a <memcpy+0x6>
    3c64:	08 95       	ret

00003c66 <strcat>:
    3c66:	fb 01       	movw	r30, r22
    3c68:	dc 01       	movw	r26, r24
    3c6a:	0d 90       	ld	r0, X+
    3c6c:	00 20       	and	r0, r0
    3c6e:	e9 f7       	brne	.-6      	; 0x3c6a <strcat+0x4>
    3c70:	11 97       	sbiw	r26, 0x01	; 1
    3c72:	01 90       	ld	r0, Z+
    3c74:	0d 92       	st	X+, r0
    3c76:	00 20       	and	r0, r0
    3c78:	e1 f7       	brne	.-8      	; 0x3c72 <strcat+0xc>
    3c7a:	08 95       	ret

00003c7c <strcpy>:
    3c7c:	fb 01       	movw	r30, r22
    3c7e:	dc 01       	movw	r26, r24
    3c80:	01 90       	ld	r0, Z+
    3c82:	0d 92       	st	X+, r0
    3c84:	00 20       	and	r0, r0
    3c86:	e1 f7       	brne	.-8      	; 0x3c80 <strcpy+0x4>
    3c88:	08 95       	ret

00003c8a <strlen>:
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	01 90       	ld	r0, Z+
    3c8e:	00 20       	and	r0, r0
    3c90:	e9 f7       	brne	.-6      	; 0x3c8c <strlen+0x2>
    3c92:	80 95       	com	r24
    3c94:	90 95       	com	r25
    3c96:	8e 0f       	add	r24, r30
    3c98:	9f 1f       	adc	r25, r31
    3c9a:	08 95       	ret

00003c9c <sprintf>:
    3c9c:	ae e0       	ldi	r26, 0x0E	; 14
    3c9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ca0:	e4 e5       	ldi	r30, 0x54	; 84
    3ca2:	fe e1       	ldi	r31, 0x1E	; 30
    3ca4:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__prologue_saves__+0x1c>
    3ca8:	0d 89       	ldd	r16, Y+21	; 0x15
    3caa:	1e 89       	ldd	r17, Y+22	; 0x16
    3cac:	86 e0       	ldi	r24, 0x06	; 6
    3cae:	8c 83       	std	Y+4, r24	; 0x04
    3cb0:	1a 83       	std	Y+2, r17	; 0x02
    3cb2:	09 83       	std	Y+1, r16	; 0x01
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	9f e7       	ldi	r25, 0x7F	; 127
    3cb8:	9e 83       	std	Y+6, r25	; 0x06
    3cba:	8d 83       	std	Y+5, r24	; 0x05
    3cbc:	9e 01       	movw	r18, r28
    3cbe:	27 5e       	subi	r18, 0xE7	; 231
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	ce 01       	movw	r24, r28
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	6f 89       	ldd	r22, Y+23	; 0x17
    3cc8:	78 8d       	ldd	r23, Y+24	; 0x18
    3cca:	a9 01       	movw	r20, r18
    3ccc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <vfprintf>
    3cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    3cd2:	38 85       	ldd	r19, Y+8	; 0x08
    3cd4:	02 0f       	add	r16, r18
    3cd6:	13 1f       	adc	r17, r19
    3cd8:	f8 01       	movw	r30, r16
    3cda:	10 82       	st	Z, r1
    3cdc:	2e 96       	adiw	r28, 0x0e	; 14
    3cde:	e4 e0       	ldi	r30, 0x04	; 4
    3ce0:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__epilogue_restores__+0x1c>

00003ce4 <ceil>:
    3ce4:	4e d0       	rcall	.+156    	; 0x3d82 <__fp_trunc>
    3ce6:	80 f0       	brcs	.+32     	; 0x3d08 <ceil+0x24>
    3ce8:	9f 37       	cpi	r25, 0x7F	; 127
    3cea:	40 f4       	brcc	.+16     	; 0x3cfc <ceil+0x18>
    3cec:	91 11       	cpse	r25, r1
    3cee:	0e f4       	brtc	.+2      	; 0x3cf2 <ceil+0xe>
    3cf0:	60 c0       	rjmp	.+192    	; 0x3db2 <__fp_szero>
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	80 e8       	ldi	r24, 0x80	; 128
    3cf8:	9f e3       	ldi	r25, 0x3F	; 63
    3cfa:	08 95       	ret
    3cfc:	26 f0       	brts	.+8      	; 0x3d06 <ceil+0x22>
    3cfe:	1b 16       	cp	r1, r27
    3d00:	61 1d       	adc	r22, r1
    3d02:	71 1d       	adc	r23, r1
    3d04:	81 1d       	adc	r24, r1
    3d06:	14 c0       	rjmp	.+40     	; 0x3d30 <__fp_mintl>
    3d08:	2e c0       	rjmp	.+92     	; 0x3d66 <__fp_mpack>

00003d0a <floor>:
    3d0a:	3b d0       	rcall	.+118    	; 0x3d82 <__fp_trunc>
    3d0c:	80 f0       	brcs	.+32     	; 0x3d2e <floor+0x24>
    3d0e:	9f 37       	cpi	r25, 0x7F	; 127
    3d10:	40 f4       	brcc	.+16     	; 0x3d22 <floor+0x18>
    3d12:	91 11       	cpse	r25, r1
    3d14:	0e f0       	brts	.+2      	; 0x3d18 <floor+0xe>
    3d16:	4d c0       	rjmp	.+154    	; 0x3db2 <__fp_szero>
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	80 e8       	ldi	r24, 0x80	; 128
    3d1e:	9f eb       	ldi	r25, 0xBF	; 191
    3d20:	08 95       	ret
    3d22:	26 f4       	brtc	.+8      	; 0x3d2c <floor+0x22>
    3d24:	1b 16       	cp	r1, r27
    3d26:	61 1d       	adc	r22, r1
    3d28:	71 1d       	adc	r23, r1
    3d2a:	81 1d       	adc	r24, r1
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <__fp_mintl>
    3d2e:	1b c0       	rjmp	.+54     	; 0x3d66 <__fp_mpack>

00003d30 <__fp_mintl>:
    3d30:	88 23       	and	r24, r24
    3d32:	71 f4       	brne	.+28     	; 0x3d50 <__fp_mintl+0x20>
    3d34:	77 23       	and	r23, r23
    3d36:	21 f0       	breq	.+8      	; 0x3d40 <__fp_mintl+0x10>
    3d38:	98 50       	subi	r25, 0x08	; 8
    3d3a:	87 2b       	or	r24, r23
    3d3c:	76 2f       	mov	r23, r22
    3d3e:	07 c0       	rjmp	.+14     	; 0x3d4e <__fp_mintl+0x1e>
    3d40:	66 23       	and	r22, r22
    3d42:	11 f4       	brne	.+4      	; 0x3d48 <__fp_mintl+0x18>
    3d44:	99 27       	eor	r25, r25
    3d46:	0d c0       	rjmp	.+26     	; 0x3d62 <__fp_mintl+0x32>
    3d48:	90 51       	subi	r25, 0x10	; 16
    3d4a:	86 2b       	or	r24, r22
    3d4c:	70 e0       	ldi	r23, 0x00	; 0
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	2a f0       	brmi	.+10     	; 0x3d5c <__fp_mintl+0x2c>
    3d52:	9a 95       	dec	r25
    3d54:	66 0f       	add	r22, r22
    3d56:	77 1f       	adc	r23, r23
    3d58:	88 1f       	adc	r24, r24
    3d5a:	da f7       	brpl	.-10     	; 0x3d52 <__fp_mintl+0x22>
    3d5c:	88 0f       	add	r24, r24
    3d5e:	96 95       	lsr	r25
    3d60:	87 95       	ror	r24
    3d62:	97 f9       	bld	r25, 7
    3d64:	08 95       	ret

00003d66 <__fp_mpack>:
    3d66:	9f 3f       	cpi	r25, 0xFF	; 255
    3d68:	31 f0       	breq	.+12     	; 0x3d76 <__fp_mpack_finite+0xc>

00003d6a <__fp_mpack_finite>:
    3d6a:	91 50       	subi	r25, 0x01	; 1
    3d6c:	20 f4       	brcc	.+8      	; 0x3d76 <__fp_mpack_finite+0xc>
    3d6e:	87 95       	ror	r24
    3d70:	77 95       	ror	r23
    3d72:	67 95       	ror	r22
    3d74:	b7 95       	ror	r27
    3d76:	88 0f       	add	r24, r24
    3d78:	91 1d       	adc	r25, r1
    3d7a:	96 95       	lsr	r25
    3d7c:	87 95       	ror	r24
    3d7e:	97 f9       	bld	r25, 7
    3d80:	08 95       	ret

00003d82 <__fp_trunc>:
    3d82:	a2 d2       	rcall	.+1348   	; 0x42c8 <__fp_splitA>
    3d84:	a0 f0       	brcs	.+40     	; 0x3dae <__fp_trunc+0x2c>
    3d86:	be e7       	ldi	r27, 0x7E	; 126
    3d88:	b9 17       	cp	r27, r25
    3d8a:	88 f4       	brcc	.+34     	; 0x3dae <__fp_trunc+0x2c>
    3d8c:	bb 27       	eor	r27, r27
    3d8e:	9f 38       	cpi	r25, 0x8F	; 143
    3d90:	60 f4       	brcc	.+24     	; 0x3daa <__fp_trunc+0x28>
    3d92:	16 16       	cp	r1, r22
    3d94:	b1 1d       	adc	r27, r1
    3d96:	67 2f       	mov	r22, r23
    3d98:	78 2f       	mov	r23, r24
    3d9a:	88 27       	eor	r24, r24
    3d9c:	98 5f       	subi	r25, 0xF8	; 248
    3d9e:	f7 cf       	rjmp	.-18     	; 0x3d8e <__fp_trunc+0xc>
    3da0:	86 95       	lsr	r24
    3da2:	77 95       	ror	r23
    3da4:	67 95       	ror	r22
    3da6:	b1 1d       	adc	r27, r1
    3da8:	93 95       	inc	r25
    3daa:	96 39       	cpi	r25, 0x96	; 150
    3dac:	c8 f3       	brcs	.-14     	; 0x3da0 <__fp_trunc+0x1e>
    3dae:	08 95       	ret

00003db0 <__fp_zero>:
    3db0:	e8 94       	clt

00003db2 <__fp_szero>:
    3db2:	bb 27       	eor	r27, r27
    3db4:	66 27       	eor	r22, r22
    3db6:	77 27       	eor	r23, r23
    3db8:	cb 01       	movw	r24, r22
    3dba:	97 f9       	bld	r25, 7
    3dbc:	08 95       	ret

00003dbe <vfprintf>:
    3dbe:	ab e0       	ldi	r26, 0x0B	; 11
    3dc0:	b0 e0       	ldi	r27, 0x00	; 0
    3dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    3dc4:	fe e1       	ldi	r31, 0x1E	; 30
    3dc6:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__prologue_saves__>
    3dca:	3c 01       	movw	r6, r24
    3dcc:	2b 01       	movw	r4, r22
    3dce:	5a 01       	movw	r10, r20
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	17 82       	std	Z+7, r1	; 0x07
    3dd4:	16 82       	std	Z+6, r1	; 0x06
    3dd6:	83 81       	ldd	r24, Z+3	; 0x03
    3dd8:	81 fd       	sbrc	r24, 1
    3dda:	03 c0       	rjmp	.+6      	; 0x3de2 <vfprintf+0x24>
    3ddc:	6f ef       	ldi	r22, 0xFF	; 255
    3dde:	7f ef       	ldi	r23, 0xFF	; 255
    3de0:	c6 c1       	rjmp	.+908    	; 0x416e <vfprintf+0x3b0>
    3de2:	9a e0       	ldi	r25, 0x0A	; 10
    3de4:	89 2e       	mov	r8, r25
    3de6:	1e 01       	movw	r2, r28
    3de8:	08 94       	sec
    3dea:	21 1c       	adc	r2, r1
    3dec:	31 1c       	adc	r3, r1
    3dee:	f3 01       	movw	r30, r6
    3df0:	23 81       	ldd	r18, Z+3	; 0x03
    3df2:	f2 01       	movw	r30, r4
    3df4:	23 fd       	sbrc	r18, 3
    3df6:	85 91       	lpm	r24, Z+
    3df8:	23 ff       	sbrs	r18, 3
    3dfa:	81 91       	ld	r24, Z+
    3dfc:	2f 01       	movw	r4, r30
    3dfe:	88 23       	and	r24, r24
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <vfprintf+0x46>
    3e02:	b2 c1       	rjmp	.+868    	; 0x4168 <vfprintf+0x3aa>
    3e04:	85 32       	cpi	r24, 0x25	; 37
    3e06:	39 f4       	brne	.+14     	; 0x3e16 <vfprintf+0x58>
    3e08:	23 fd       	sbrc	r18, 3
    3e0a:	85 91       	lpm	r24, Z+
    3e0c:	23 ff       	sbrs	r18, 3
    3e0e:	81 91       	ld	r24, Z+
    3e10:	2f 01       	movw	r4, r30
    3e12:	85 32       	cpi	r24, 0x25	; 37
    3e14:	29 f4       	brne	.+10     	; 0x3e20 <vfprintf+0x62>
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	b3 01       	movw	r22, r6
    3e1a:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    3e1e:	e7 cf       	rjmp	.-50     	; 0x3dee <vfprintf+0x30>
    3e20:	98 2f       	mov	r25, r24
    3e22:	ff 24       	eor	r15, r15
    3e24:	ee 24       	eor	r14, r14
    3e26:	99 24       	eor	r9, r9
    3e28:	ff e1       	ldi	r31, 0x1F	; 31
    3e2a:	ff 15       	cp	r31, r15
    3e2c:	d0 f0       	brcs	.+52     	; 0x3e62 <vfprintf+0xa4>
    3e2e:	9b 32       	cpi	r25, 0x2B	; 43
    3e30:	69 f0       	breq	.+26     	; 0x3e4c <vfprintf+0x8e>
    3e32:	9c 32       	cpi	r25, 0x2C	; 44
    3e34:	28 f4       	brcc	.+10     	; 0x3e40 <vfprintf+0x82>
    3e36:	90 32       	cpi	r25, 0x20	; 32
    3e38:	59 f0       	breq	.+22     	; 0x3e50 <vfprintf+0x92>
    3e3a:	93 32       	cpi	r25, 0x23	; 35
    3e3c:	91 f4       	brne	.+36     	; 0x3e62 <vfprintf+0xa4>
    3e3e:	0e c0       	rjmp	.+28     	; 0x3e5c <vfprintf+0x9e>
    3e40:	9d 32       	cpi	r25, 0x2D	; 45
    3e42:	49 f0       	breq	.+18     	; 0x3e56 <vfprintf+0x98>
    3e44:	90 33       	cpi	r25, 0x30	; 48
    3e46:	69 f4       	brne	.+26     	; 0x3e62 <vfprintf+0xa4>
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	24 c0       	rjmp	.+72     	; 0x3e94 <vfprintf+0xd6>
    3e4c:	52 e0       	ldi	r21, 0x02	; 2
    3e4e:	f5 2a       	or	r15, r21
    3e50:	84 e0       	ldi	r24, 0x04	; 4
    3e52:	f8 2a       	or	r15, r24
    3e54:	28 c0       	rjmp	.+80     	; 0x3ea6 <vfprintf+0xe8>
    3e56:	98 e0       	ldi	r25, 0x08	; 8
    3e58:	f9 2a       	or	r15, r25
    3e5a:	25 c0       	rjmp	.+74     	; 0x3ea6 <vfprintf+0xe8>
    3e5c:	e0 e1       	ldi	r30, 0x10	; 16
    3e5e:	fe 2a       	or	r15, r30
    3e60:	22 c0       	rjmp	.+68     	; 0x3ea6 <vfprintf+0xe8>
    3e62:	f7 fc       	sbrc	r15, 7
    3e64:	29 c0       	rjmp	.+82     	; 0x3eb8 <vfprintf+0xfa>
    3e66:	89 2f       	mov	r24, r25
    3e68:	80 53       	subi	r24, 0x30	; 48
    3e6a:	8a 30       	cpi	r24, 0x0A	; 10
    3e6c:	70 f4       	brcc	.+28     	; 0x3e8a <vfprintf+0xcc>
    3e6e:	f6 fe       	sbrs	r15, 6
    3e70:	05 c0       	rjmp	.+10     	; 0x3e7c <vfprintf+0xbe>
    3e72:	98 9c       	mul	r9, r8
    3e74:	90 2c       	mov	r9, r0
    3e76:	11 24       	eor	r1, r1
    3e78:	98 0e       	add	r9, r24
    3e7a:	15 c0       	rjmp	.+42     	; 0x3ea6 <vfprintf+0xe8>
    3e7c:	e8 9c       	mul	r14, r8
    3e7e:	e0 2c       	mov	r14, r0
    3e80:	11 24       	eor	r1, r1
    3e82:	e8 0e       	add	r14, r24
    3e84:	f0 e2       	ldi	r31, 0x20	; 32
    3e86:	ff 2a       	or	r15, r31
    3e88:	0e c0       	rjmp	.+28     	; 0x3ea6 <vfprintf+0xe8>
    3e8a:	9e 32       	cpi	r25, 0x2E	; 46
    3e8c:	29 f4       	brne	.+10     	; 0x3e98 <vfprintf+0xda>
    3e8e:	f6 fc       	sbrc	r15, 6
    3e90:	6b c1       	rjmp	.+726    	; 0x4168 <vfprintf+0x3aa>
    3e92:	40 e4       	ldi	r20, 0x40	; 64
    3e94:	f4 2a       	or	r15, r20
    3e96:	07 c0       	rjmp	.+14     	; 0x3ea6 <vfprintf+0xe8>
    3e98:	9c 36       	cpi	r25, 0x6C	; 108
    3e9a:	19 f4       	brne	.+6      	; 0x3ea2 <vfprintf+0xe4>
    3e9c:	50 e8       	ldi	r21, 0x80	; 128
    3e9e:	f5 2a       	or	r15, r21
    3ea0:	02 c0       	rjmp	.+4      	; 0x3ea6 <vfprintf+0xe8>
    3ea2:	98 36       	cpi	r25, 0x68	; 104
    3ea4:	49 f4       	brne	.+18     	; 0x3eb8 <vfprintf+0xfa>
    3ea6:	f2 01       	movw	r30, r4
    3ea8:	23 fd       	sbrc	r18, 3
    3eaa:	95 91       	lpm	r25, Z+
    3eac:	23 ff       	sbrs	r18, 3
    3eae:	91 91       	ld	r25, Z+
    3eb0:	2f 01       	movw	r4, r30
    3eb2:	99 23       	and	r25, r25
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <vfprintf+0xfa>
    3eb6:	b8 cf       	rjmp	.-144    	; 0x3e28 <vfprintf+0x6a>
    3eb8:	89 2f       	mov	r24, r25
    3eba:	85 54       	subi	r24, 0x45	; 69
    3ebc:	83 30       	cpi	r24, 0x03	; 3
    3ebe:	18 f0       	brcs	.+6      	; 0x3ec6 <vfprintf+0x108>
    3ec0:	80 52       	subi	r24, 0x20	; 32
    3ec2:	83 30       	cpi	r24, 0x03	; 3
    3ec4:	38 f4       	brcc	.+14     	; 0x3ed4 <vfprintf+0x116>
    3ec6:	44 e0       	ldi	r20, 0x04	; 4
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	a4 0e       	add	r10, r20
    3ecc:	b5 1e       	adc	r11, r21
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	59 83       	std	Y+1, r21	; 0x01
    3ed2:	0f c0       	rjmp	.+30     	; 0x3ef2 <vfprintf+0x134>
    3ed4:	93 36       	cpi	r25, 0x63	; 99
    3ed6:	31 f0       	breq	.+12     	; 0x3ee4 <vfprintf+0x126>
    3ed8:	93 37       	cpi	r25, 0x73	; 115
    3eda:	79 f0       	breq	.+30     	; 0x3efa <vfprintf+0x13c>
    3edc:	93 35       	cpi	r25, 0x53	; 83
    3ede:	09 f0       	breq	.+2      	; 0x3ee2 <vfprintf+0x124>
    3ee0:	56 c0       	rjmp	.+172    	; 0x3f8e <vfprintf+0x1d0>
    3ee2:	20 c0       	rjmp	.+64     	; 0x3f24 <vfprintf+0x166>
    3ee4:	f5 01       	movw	r30, r10
    3ee6:	80 81       	ld	r24, Z
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    3eea:	42 e0       	ldi	r20, 0x02	; 2
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	a4 0e       	add	r10, r20
    3ef0:	b5 1e       	adc	r11, r21
    3ef2:	61 01       	movw	r12, r2
    3ef4:	01 e0       	ldi	r16, 0x01	; 1
    3ef6:	10 e0       	ldi	r17, 0x00	; 0
    3ef8:	12 c0       	rjmp	.+36     	; 0x3f1e <vfprintf+0x160>
    3efa:	f5 01       	movw	r30, r10
    3efc:	c0 80       	ld	r12, Z
    3efe:	d1 80       	ldd	r13, Z+1	; 0x01
    3f00:	f6 fc       	sbrc	r15, 6
    3f02:	03 c0       	rjmp	.+6      	; 0x3f0a <vfprintf+0x14c>
    3f04:	6f ef       	ldi	r22, 0xFF	; 255
    3f06:	7f ef       	ldi	r23, 0xFF	; 255
    3f08:	02 c0       	rjmp	.+4      	; 0x3f0e <vfprintf+0x150>
    3f0a:	69 2d       	mov	r22, r9
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	42 e0       	ldi	r20, 0x02	; 2
    3f10:	50 e0       	ldi	r21, 0x00	; 0
    3f12:	a4 0e       	add	r10, r20
    3f14:	b5 1e       	adc	r11, r21
    3f16:	c6 01       	movw	r24, r12
    3f18:	0e 94 c7 20 	call	0x418e	; 0x418e <strnlen>
    3f1c:	8c 01       	movw	r16, r24
    3f1e:	5f e7       	ldi	r21, 0x7F	; 127
    3f20:	f5 22       	and	r15, r21
    3f22:	14 c0       	rjmp	.+40     	; 0x3f4c <vfprintf+0x18e>
    3f24:	f5 01       	movw	r30, r10
    3f26:	c0 80       	ld	r12, Z
    3f28:	d1 80       	ldd	r13, Z+1	; 0x01
    3f2a:	f6 fc       	sbrc	r15, 6
    3f2c:	03 c0       	rjmp	.+6      	; 0x3f34 <vfprintf+0x176>
    3f2e:	6f ef       	ldi	r22, 0xFF	; 255
    3f30:	7f ef       	ldi	r23, 0xFF	; 255
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <vfprintf+0x17a>
    3f34:	69 2d       	mov	r22, r9
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	42 e0       	ldi	r20, 0x02	; 2
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	a4 0e       	add	r10, r20
    3f3e:	b5 1e       	adc	r11, r21
    3f40:	c6 01       	movw	r24, r12
    3f42:	0e 94 bc 20 	call	0x4178	; 0x4178 <strnlen_P>
    3f46:	8c 01       	movw	r16, r24
    3f48:	50 e8       	ldi	r21, 0x80	; 128
    3f4a:	f5 2a       	or	r15, r21
    3f4c:	f3 fe       	sbrs	r15, 3
    3f4e:	07 c0       	rjmp	.+14     	; 0x3f5e <vfprintf+0x1a0>
    3f50:	1a c0       	rjmp	.+52     	; 0x3f86 <vfprintf+0x1c8>
    3f52:	80 e2       	ldi	r24, 0x20	; 32
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	b3 01       	movw	r22, r6
    3f58:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    3f5c:	ea 94       	dec	r14
    3f5e:	8e 2d       	mov	r24, r14
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	08 17       	cp	r16, r24
    3f64:	19 07       	cpc	r17, r25
    3f66:	a8 f3       	brcs	.-22     	; 0x3f52 <vfprintf+0x194>
    3f68:	0e c0       	rjmp	.+28     	; 0x3f86 <vfprintf+0x1c8>
    3f6a:	f6 01       	movw	r30, r12
    3f6c:	f7 fc       	sbrc	r15, 7
    3f6e:	85 91       	lpm	r24, Z+
    3f70:	f7 fe       	sbrs	r15, 7
    3f72:	81 91       	ld	r24, Z+
    3f74:	6f 01       	movw	r12, r30
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	b3 01       	movw	r22, r6
    3f7a:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    3f7e:	e1 10       	cpse	r14, r1
    3f80:	ea 94       	dec	r14
    3f82:	01 50       	subi	r16, 0x01	; 1
    3f84:	10 40       	sbci	r17, 0x00	; 0
    3f86:	01 15       	cp	r16, r1
    3f88:	11 05       	cpc	r17, r1
    3f8a:	79 f7       	brne	.-34     	; 0x3f6a <vfprintf+0x1ac>
    3f8c:	ea c0       	rjmp	.+468    	; 0x4162 <vfprintf+0x3a4>
    3f8e:	94 36       	cpi	r25, 0x64	; 100
    3f90:	11 f0       	breq	.+4      	; 0x3f96 <vfprintf+0x1d8>
    3f92:	99 36       	cpi	r25, 0x69	; 105
    3f94:	69 f5       	brne	.+90     	; 0x3ff0 <vfprintf+0x232>
    3f96:	f7 fe       	sbrs	r15, 7
    3f98:	08 c0       	rjmp	.+16     	; 0x3faa <vfprintf+0x1ec>
    3f9a:	f5 01       	movw	r30, r10
    3f9c:	20 81       	ld	r18, Z
    3f9e:	31 81       	ldd	r19, Z+1	; 0x01
    3fa0:	42 81       	ldd	r20, Z+2	; 0x02
    3fa2:	53 81       	ldd	r21, Z+3	; 0x03
    3fa4:	84 e0       	ldi	r24, 0x04	; 4
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0a c0       	rjmp	.+20     	; 0x3fbe <vfprintf+0x200>
    3faa:	f5 01       	movw	r30, r10
    3fac:	80 81       	ld	r24, Z
    3fae:	91 81       	ldd	r25, Z+1	; 0x01
    3fb0:	9c 01       	movw	r18, r24
    3fb2:	44 27       	eor	r20, r20
    3fb4:	37 fd       	sbrc	r19, 7
    3fb6:	40 95       	com	r20
    3fb8:	54 2f       	mov	r21, r20
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	a8 0e       	add	r10, r24
    3fc0:	b9 1e       	adc	r11, r25
    3fc2:	9f e6       	ldi	r25, 0x6F	; 111
    3fc4:	f9 22       	and	r15, r25
    3fc6:	57 ff       	sbrs	r21, 7
    3fc8:	09 c0       	rjmp	.+18     	; 0x3fdc <vfprintf+0x21e>
    3fca:	50 95       	com	r21
    3fcc:	40 95       	com	r20
    3fce:	30 95       	com	r19
    3fd0:	21 95       	neg	r18
    3fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd4:	4f 4f       	sbci	r20, 0xFF	; 255
    3fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fd8:	e0 e8       	ldi	r30, 0x80	; 128
    3fda:	fe 2a       	or	r15, r30
    3fdc:	ca 01       	movw	r24, r20
    3fde:	b9 01       	movw	r22, r18
    3fe0:	a1 01       	movw	r20, r2
    3fe2:	2a e0       	ldi	r18, 0x0A	; 10
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__ultoa_invert>
    3fea:	d8 2e       	mov	r13, r24
    3fec:	d2 18       	sub	r13, r2
    3fee:	40 c0       	rjmp	.+128    	; 0x4070 <vfprintf+0x2b2>
    3ff0:	95 37       	cpi	r25, 0x75	; 117
    3ff2:	29 f4       	brne	.+10     	; 0x3ffe <vfprintf+0x240>
    3ff4:	1f 2d       	mov	r17, r15
    3ff6:	1f 7e       	andi	r17, 0xEF	; 239
    3ff8:	2a e0       	ldi	r18, 0x0A	; 10
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	1d c0       	rjmp	.+58     	; 0x4038 <vfprintf+0x27a>
    3ffe:	1f 2d       	mov	r17, r15
    4000:	19 7f       	andi	r17, 0xF9	; 249
    4002:	9f 36       	cpi	r25, 0x6F	; 111
    4004:	61 f0       	breq	.+24     	; 0x401e <vfprintf+0x260>
    4006:	90 37       	cpi	r25, 0x70	; 112
    4008:	20 f4       	brcc	.+8      	; 0x4012 <vfprintf+0x254>
    400a:	98 35       	cpi	r25, 0x58	; 88
    400c:	09 f0       	breq	.+2      	; 0x4010 <vfprintf+0x252>
    400e:	ac c0       	rjmp	.+344    	; 0x4168 <vfprintf+0x3aa>
    4010:	0f c0       	rjmp	.+30     	; 0x4030 <vfprintf+0x272>
    4012:	90 37       	cpi	r25, 0x70	; 112
    4014:	39 f0       	breq	.+14     	; 0x4024 <vfprintf+0x266>
    4016:	98 37       	cpi	r25, 0x78	; 120
    4018:	09 f0       	breq	.+2      	; 0x401c <vfprintf+0x25e>
    401a:	a6 c0       	rjmp	.+332    	; 0x4168 <vfprintf+0x3aa>
    401c:	04 c0       	rjmp	.+8      	; 0x4026 <vfprintf+0x268>
    401e:	28 e0       	ldi	r18, 0x08	; 8
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	0a c0       	rjmp	.+20     	; 0x4038 <vfprintf+0x27a>
    4024:	10 61       	ori	r17, 0x10	; 16
    4026:	14 fd       	sbrc	r17, 4
    4028:	14 60       	ori	r17, 0x04	; 4
    402a:	20 e1       	ldi	r18, 0x10	; 16
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	04 c0       	rjmp	.+8      	; 0x4038 <vfprintf+0x27a>
    4030:	14 fd       	sbrc	r17, 4
    4032:	16 60       	ori	r17, 0x06	; 6
    4034:	20 e1       	ldi	r18, 0x10	; 16
    4036:	32 e0       	ldi	r19, 0x02	; 2
    4038:	17 ff       	sbrs	r17, 7
    403a:	08 c0       	rjmp	.+16     	; 0x404c <vfprintf+0x28e>
    403c:	f5 01       	movw	r30, r10
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	44 e0       	ldi	r20, 0x04	; 4
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	08 c0       	rjmp	.+16     	; 0x405c <vfprintf+0x29e>
    404c:	f5 01       	movw	r30, r10
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	bc 01       	movw	r22, r24
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	42 e0       	ldi	r20, 0x02	; 2
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	a4 0e       	add	r10, r20
    405e:	b5 1e       	adc	r11, r21
    4060:	a1 01       	movw	r20, r2
    4062:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__ultoa_invert>
    4066:	d8 2e       	mov	r13, r24
    4068:	d2 18       	sub	r13, r2
    406a:	8f e7       	ldi	r24, 0x7F	; 127
    406c:	f8 2e       	mov	r15, r24
    406e:	f1 22       	and	r15, r17
    4070:	f6 fe       	sbrs	r15, 6
    4072:	0b c0       	rjmp	.+22     	; 0x408a <vfprintf+0x2cc>
    4074:	5e ef       	ldi	r21, 0xFE	; 254
    4076:	f5 22       	and	r15, r21
    4078:	d9 14       	cp	r13, r9
    407a:	38 f4       	brcc	.+14     	; 0x408a <vfprintf+0x2cc>
    407c:	f4 fe       	sbrs	r15, 4
    407e:	07 c0       	rjmp	.+14     	; 0x408e <vfprintf+0x2d0>
    4080:	f2 fc       	sbrc	r15, 2
    4082:	05 c0       	rjmp	.+10     	; 0x408e <vfprintf+0x2d0>
    4084:	8f ee       	ldi	r24, 0xEF	; 239
    4086:	f8 22       	and	r15, r24
    4088:	02 c0       	rjmp	.+4      	; 0x408e <vfprintf+0x2d0>
    408a:	1d 2d       	mov	r17, r13
    408c:	01 c0       	rjmp	.+2      	; 0x4090 <vfprintf+0x2d2>
    408e:	19 2d       	mov	r17, r9
    4090:	f4 fe       	sbrs	r15, 4
    4092:	0d c0       	rjmp	.+26     	; 0x40ae <vfprintf+0x2f0>
    4094:	fe 01       	movw	r30, r28
    4096:	ed 0d       	add	r30, r13
    4098:	f1 1d       	adc	r31, r1
    409a:	80 81       	ld	r24, Z
    409c:	80 33       	cpi	r24, 0x30	; 48
    409e:	19 f4       	brne	.+6      	; 0x40a6 <vfprintf+0x2e8>
    40a0:	99 ee       	ldi	r25, 0xE9	; 233
    40a2:	f9 22       	and	r15, r25
    40a4:	08 c0       	rjmp	.+16     	; 0x40b6 <vfprintf+0x2f8>
    40a6:	1f 5f       	subi	r17, 0xFF	; 255
    40a8:	f2 fe       	sbrs	r15, 2
    40aa:	05 c0       	rjmp	.+10     	; 0x40b6 <vfprintf+0x2f8>
    40ac:	03 c0       	rjmp	.+6      	; 0x40b4 <vfprintf+0x2f6>
    40ae:	8f 2d       	mov	r24, r15
    40b0:	86 78       	andi	r24, 0x86	; 134
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <vfprintf+0x2f8>
    40b4:	1f 5f       	subi	r17, 0xFF	; 255
    40b6:	0f 2d       	mov	r16, r15
    40b8:	f3 fc       	sbrc	r15, 3
    40ba:	14 c0       	rjmp	.+40     	; 0x40e4 <vfprintf+0x326>
    40bc:	f0 fe       	sbrs	r15, 0
    40be:	0f c0       	rjmp	.+30     	; 0x40de <vfprintf+0x320>
    40c0:	1e 15       	cp	r17, r14
    40c2:	10 f0       	brcs	.+4      	; 0x40c8 <vfprintf+0x30a>
    40c4:	9d 2c       	mov	r9, r13
    40c6:	0b c0       	rjmp	.+22     	; 0x40de <vfprintf+0x320>
    40c8:	9d 2c       	mov	r9, r13
    40ca:	9e 0c       	add	r9, r14
    40cc:	91 1a       	sub	r9, r17
    40ce:	1e 2d       	mov	r17, r14
    40d0:	06 c0       	rjmp	.+12     	; 0x40de <vfprintf+0x320>
    40d2:	80 e2       	ldi	r24, 0x20	; 32
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	b3 01       	movw	r22, r6
    40d8:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    40dc:	1f 5f       	subi	r17, 0xFF	; 255
    40de:	1e 15       	cp	r17, r14
    40e0:	c0 f3       	brcs	.-16     	; 0x40d2 <vfprintf+0x314>
    40e2:	04 c0       	rjmp	.+8      	; 0x40ec <vfprintf+0x32e>
    40e4:	1e 15       	cp	r17, r14
    40e6:	10 f4       	brcc	.+4      	; 0x40ec <vfprintf+0x32e>
    40e8:	e1 1a       	sub	r14, r17
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <vfprintf+0x330>
    40ec:	ee 24       	eor	r14, r14
    40ee:	04 ff       	sbrs	r16, 4
    40f0:	0f c0       	rjmp	.+30     	; 0x4110 <vfprintf+0x352>
    40f2:	80 e3       	ldi	r24, 0x30	; 48
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	b3 01       	movw	r22, r6
    40f8:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    40fc:	02 ff       	sbrs	r16, 2
    40fe:	1d c0       	rjmp	.+58     	; 0x413a <vfprintf+0x37c>
    4100:	01 fd       	sbrc	r16, 1
    4102:	03 c0       	rjmp	.+6      	; 0x410a <vfprintf+0x34c>
    4104:	88 e7       	ldi	r24, 0x78	; 120
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e c0       	rjmp	.+28     	; 0x4126 <vfprintf+0x368>
    410a:	88 e5       	ldi	r24, 0x58	; 88
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0b c0       	rjmp	.+22     	; 0x4126 <vfprintf+0x368>
    4110:	80 2f       	mov	r24, r16
    4112:	86 78       	andi	r24, 0x86	; 134
    4114:	91 f0       	breq	.+36     	; 0x413a <vfprintf+0x37c>
    4116:	01 ff       	sbrs	r16, 1
    4118:	02 c0       	rjmp	.+4      	; 0x411e <vfprintf+0x360>
    411a:	8b e2       	ldi	r24, 0x2B	; 43
    411c:	01 c0       	rjmp	.+2      	; 0x4120 <vfprintf+0x362>
    411e:	80 e2       	ldi	r24, 0x20	; 32
    4120:	f7 fc       	sbrc	r15, 7
    4122:	8d e2       	ldi	r24, 0x2D	; 45
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	b3 01       	movw	r22, r6
    4128:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    412c:	06 c0       	rjmp	.+12     	; 0x413a <vfprintf+0x37c>
    412e:	80 e3       	ldi	r24, 0x30	; 48
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	b3 01       	movw	r22, r6
    4134:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    4138:	9a 94       	dec	r9
    413a:	d9 14       	cp	r13, r9
    413c:	c0 f3       	brcs	.-16     	; 0x412e <vfprintf+0x370>
    413e:	da 94       	dec	r13
    4140:	f1 01       	movw	r30, r2
    4142:	ed 0d       	add	r30, r13
    4144:	f1 1d       	adc	r31, r1
    4146:	80 81       	ld	r24, Z
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	b3 01       	movw	r22, r6
    414c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    4150:	dd 20       	and	r13, r13
    4152:	a9 f7       	brne	.-22     	; 0x413e <vfprintf+0x380>
    4154:	06 c0       	rjmp	.+12     	; 0x4162 <vfprintf+0x3a4>
    4156:	80 e2       	ldi	r24, 0x20	; 32
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	b3 01       	movw	r22, r6
    415c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <fputc>
    4160:	ea 94       	dec	r14
    4162:	ee 20       	and	r14, r14
    4164:	c1 f7       	brne	.-16     	; 0x4156 <vfprintf+0x398>
    4166:	43 ce       	rjmp	.-890    	; 0x3dee <vfprintf+0x30>
    4168:	f3 01       	movw	r30, r6
    416a:	66 81       	ldd	r22, Z+6	; 0x06
    416c:	77 81       	ldd	r23, Z+7	; 0x07
    416e:	cb 01       	movw	r24, r22
    4170:	2b 96       	adiw	r28, 0x0b	; 11
    4172:	e2 e1       	ldi	r30, 0x12	; 18
    4174:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__epilogue_restores__>

00004178 <strnlen_P>:
    4178:	fc 01       	movw	r30, r24
    417a:	05 90       	lpm	r0, Z+
    417c:	61 50       	subi	r22, 0x01	; 1
    417e:	70 40       	sbci	r23, 0x00	; 0
    4180:	01 10       	cpse	r0, r1
    4182:	d8 f7       	brcc	.-10     	; 0x417a <strnlen_P+0x2>
    4184:	80 95       	com	r24
    4186:	90 95       	com	r25
    4188:	8e 0f       	add	r24, r30
    418a:	9f 1f       	adc	r25, r31
    418c:	08 95       	ret

0000418e <strnlen>:
    418e:	fc 01       	movw	r30, r24
    4190:	61 50       	subi	r22, 0x01	; 1
    4192:	70 40       	sbci	r23, 0x00	; 0
    4194:	01 90       	ld	r0, Z+
    4196:	01 10       	cpse	r0, r1
    4198:	d8 f7       	brcc	.-10     	; 0x4190 <strnlen+0x2>
    419a:	80 95       	com	r24
    419c:	90 95       	com	r25
    419e:	8e 0f       	add	r24, r30
    41a0:	9f 1f       	adc	r25, r31
    41a2:	08 95       	ret

000041a4 <fputc>:
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	8c 01       	movw	r16, r24
    41ae:	eb 01       	movw	r28, r22
    41b0:	8b 81       	ldd	r24, Y+3	; 0x03
    41b2:	81 ff       	sbrs	r24, 1
    41b4:	1b c0       	rjmp	.+54     	; 0x41ec <fputc+0x48>
    41b6:	82 ff       	sbrs	r24, 2
    41b8:	0d c0       	rjmp	.+26     	; 0x41d4 <fputc+0x30>
    41ba:	2e 81       	ldd	r18, Y+6	; 0x06
    41bc:	3f 81       	ldd	r19, Y+7	; 0x07
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	9d 81       	ldd	r25, Y+5	; 0x05
    41c2:	28 17       	cp	r18, r24
    41c4:	39 07       	cpc	r19, r25
    41c6:	64 f4       	brge	.+24     	; 0x41e0 <fputc+0x3c>
    41c8:	e8 81       	ld	r30, Y
    41ca:	f9 81       	ldd	r31, Y+1	; 0x01
    41cc:	01 93       	st	Z+, r16
    41ce:	f9 83       	std	Y+1, r31	; 0x01
    41d0:	e8 83       	st	Y, r30
    41d2:	06 c0       	rjmp	.+12     	; 0x41e0 <fputc+0x3c>
    41d4:	e8 85       	ldd	r30, Y+8	; 0x08
    41d6:	f9 85       	ldd	r31, Y+9	; 0x09
    41d8:	80 2f       	mov	r24, r16
    41da:	09 95       	icall
    41dc:	89 2b       	or	r24, r25
    41de:	31 f4       	brne	.+12     	; 0x41ec <fputc+0x48>
    41e0:	8e 81       	ldd	r24, Y+6	; 0x06
    41e2:	9f 81       	ldd	r25, Y+7	; 0x07
    41e4:	01 96       	adiw	r24, 0x01	; 1
    41e6:	9f 83       	std	Y+7, r25	; 0x07
    41e8:	8e 83       	std	Y+6, r24	; 0x06
    41ea:	02 c0       	rjmp	.+4      	; 0x41f0 <fputc+0x4c>
    41ec:	0f ef       	ldi	r16, 0xFF	; 255
    41ee:	1f ef       	ldi	r17, 0xFF	; 255
    41f0:	c8 01       	movw	r24, r16
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	08 95       	ret

000041fc <__ultoa_invert>:
    41fc:	fa 01       	movw	r30, r20
    41fe:	aa 27       	eor	r26, r26
    4200:	28 30       	cpi	r18, 0x08	; 8
    4202:	51 f1       	breq	.+84     	; 0x4258 <__ultoa_invert+0x5c>
    4204:	20 31       	cpi	r18, 0x10	; 16
    4206:	81 f1       	breq	.+96     	; 0x4268 <__ultoa_invert+0x6c>
    4208:	e8 94       	clt
    420a:	6f 93       	push	r22
    420c:	6e 7f       	andi	r22, 0xFE	; 254
    420e:	6e 5f       	subi	r22, 0xFE	; 254
    4210:	7f 4f       	sbci	r23, 0xFF	; 255
    4212:	8f 4f       	sbci	r24, 0xFF	; 255
    4214:	9f 4f       	sbci	r25, 0xFF	; 255
    4216:	af 4f       	sbci	r26, 0xFF	; 255
    4218:	b1 e0       	ldi	r27, 0x01	; 1
    421a:	3e d0       	rcall	.+124    	; 0x4298 <__ultoa_invert+0x9c>
    421c:	b4 e0       	ldi	r27, 0x04	; 4
    421e:	3c d0       	rcall	.+120    	; 0x4298 <__ultoa_invert+0x9c>
    4220:	67 0f       	add	r22, r23
    4222:	78 1f       	adc	r23, r24
    4224:	89 1f       	adc	r24, r25
    4226:	9a 1f       	adc	r25, r26
    4228:	a1 1d       	adc	r26, r1
    422a:	68 0f       	add	r22, r24
    422c:	79 1f       	adc	r23, r25
    422e:	8a 1f       	adc	r24, r26
    4230:	91 1d       	adc	r25, r1
    4232:	a1 1d       	adc	r26, r1
    4234:	6a 0f       	add	r22, r26
    4236:	71 1d       	adc	r23, r1
    4238:	81 1d       	adc	r24, r1
    423a:	91 1d       	adc	r25, r1
    423c:	a1 1d       	adc	r26, r1
    423e:	20 d0       	rcall	.+64     	; 0x4280 <__ultoa_invert+0x84>
    4240:	09 f4       	brne	.+2      	; 0x4244 <__ultoa_invert+0x48>
    4242:	68 94       	set
    4244:	3f 91       	pop	r19
    4246:	2a e0       	ldi	r18, 0x0A	; 10
    4248:	26 9f       	mul	r18, r22
    424a:	11 24       	eor	r1, r1
    424c:	30 19       	sub	r19, r0
    424e:	30 5d       	subi	r19, 0xD0	; 208
    4250:	31 93       	st	Z+, r19
    4252:	de f6       	brtc	.-74     	; 0x420a <__ultoa_invert+0xe>
    4254:	cf 01       	movw	r24, r30
    4256:	08 95       	ret
    4258:	46 2f       	mov	r20, r22
    425a:	47 70       	andi	r20, 0x07	; 7
    425c:	40 5d       	subi	r20, 0xD0	; 208
    425e:	41 93       	st	Z+, r20
    4260:	b3 e0       	ldi	r27, 0x03	; 3
    4262:	0f d0       	rcall	.+30     	; 0x4282 <__ultoa_invert+0x86>
    4264:	c9 f7       	brne	.-14     	; 0x4258 <__ultoa_invert+0x5c>
    4266:	f6 cf       	rjmp	.-20     	; 0x4254 <__ultoa_invert+0x58>
    4268:	46 2f       	mov	r20, r22
    426a:	4f 70       	andi	r20, 0x0F	; 15
    426c:	40 5d       	subi	r20, 0xD0	; 208
    426e:	4a 33       	cpi	r20, 0x3A	; 58
    4270:	18 f0       	brcs	.+6      	; 0x4278 <__ultoa_invert+0x7c>
    4272:	49 5d       	subi	r20, 0xD9	; 217
    4274:	31 fd       	sbrc	r19, 1
    4276:	40 52       	subi	r20, 0x20	; 32
    4278:	41 93       	st	Z+, r20
    427a:	02 d0       	rcall	.+4      	; 0x4280 <__ultoa_invert+0x84>
    427c:	a9 f7       	brne	.-22     	; 0x4268 <__ultoa_invert+0x6c>
    427e:	ea cf       	rjmp	.-44     	; 0x4254 <__ultoa_invert+0x58>
    4280:	b4 e0       	ldi	r27, 0x04	; 4
    4282:	a6 95       	lsr	r26
    4284:	97 95       	ror	r25
    4286:	87 95       	ror	r24
    4288:	77 95       	ror	r23
    428a:	67 95       	ror	r22
    428c:	ba 95       	dec	r27
    428e:	c9 f7       	brne	.-14     	; 0x4282 <__ultoa_invert+0x86>
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	61 05       	cpc	r22, r1
    4294:	71 05       	cpc	r23, r1
    4296:	08 95       	ret
    4298:	9b 01       	movw	r18, r22
    429a:	ac 01       	movw	r20, r24
    429c:	0a 2e       	mov	r0, r26
    429e:	06 94       	lsr	r0
    42a0:	57 95       	ror	r21
    42a2:	47 95       	ror	r20
    42a4:	37 95       	ror	r19
    42a6:	27 95       	ror	r18
    42a8:	ba 95       	dec	r27
    42aa:	c9 f7       	brne	.-14     	; 0x429e <__ultoa_invert+0xa2>
    42ac:	62 0f       	add	r22, r18
    42ae:	73 1f       	adc	r23, r19
    42b0:	84 1f       	adc	r24, r20
    42b2:	95 1f       	adc	r25, r21
    42b4:	a0 1d       	adc	r26, r0
    42b6:	08 95       	ret

000042b8 <__fp_split3>:
    42b8:	57 fd       	sbrc	r21, 7
    42ba:	90 58       	subi	r25, 0x80	; 128
    42bc:	44 0f       	add	r20, r20
    42be:	55 1f       	adc	r21, r21
    42c0:	59 f0       	breq	.+22     	; 0x42d8 <__fp_splitA+0x10>
    42c2:	5f 3f       	cpi	r21, 0xFF	; 255
    42c4:	71 f0       	breq	.+28     	; 0x42e2 <__fp_splitA+0x1a>
    42c6:	47 95       	ror	r20

000042c8 <__fp_splitA>:
    42c8:	88 0f       	add	r24, r24
    42ca:	97 fb       	bst	r25, 7
    42cc:	99 1f       	adc	r25, r25
    42ce:	61 f0       	breq	.+24     	; 0x42e8 <__fp_splitA+0x20>
    42d0:	9f 3f       	cpi	r25, 0xFF	; 255
    42d2:	79 f0       	breq	.+30     	; 0x42f2 <__fp_splitA+0x2a>
    42d4:	87 95       	ror	r24
    42d6:	08 95       	ret
    42d8:	12 16       	cp	r1, r18
    42da:	13 06       	cpc	r1, r19
    42dc:	14 06       	cpc	r1, r20
    42de:	55 1f       	adc	r21, r21
    42e0:	f2 cf       	rjmp	.-28     	; 0x42c6 <__fp_split3+0xe>
    42e2:	46 95       	lsr	r20
    42e4:	f1 df       	rcall	.-30     	; 0x42c8 <__fp_splitA>
    42e6:	08 c0       	rjmp	.+16     	; 0x42f8 <__fp_splitA+0x30>
    42e8:	16 16       	cp	r1, r22
    42ea:	17 06       	cpc	r1, r23
    42ec:	18 06       	cpc	r1, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	f1 cf       	rjmp	.-30     	; 0x42d4 <__fp_splitA+0xc>
    42f2:	86 95       	lsr	r24
    42f4:	71 05       	cpc	r23, r1
    42f6:	61 05       	cpc	r22, r1
    42f8:	08 94       	sec
    42fa:	08 95       	ret

000042fc <_exit>:
    42fc:	f8 94       	cli

000042fe <__stop_program>:
    42fe:	ff cf       	rjmp	.-2      	; 0x42fe <__stop_program>
