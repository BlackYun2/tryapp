
tryapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000044e0  00004554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004134  00000000  00000000  0000469c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001555  00000000  00000000  000087d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00009d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00009ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000d848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ea20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000eed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7f 20 	call	0x40fe	; 0x40fe <main>
      7a:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 47 22 	jmp	0x448e	; 0x448e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 5b 22 	jmp	0x44b6	; 0x44b6 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <SSD_Init>:
 *      Author: 20100
 */
#include"SSD.h"

void SSD_Init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	// CONFIGURE DATA LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN4, OUTPUT);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	64 e0       	ldi	r22, 0x04	; 4
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN5, OUTPUT);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN6, OUTPUT);
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	66 e0       	ldi	r22, 0x06	; 6
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN7, OUTPUT);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	67 e0       	ldi	r22, 0x07	; 7
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>


	// CONFIGURE CONTROL LINES AS OUTPUT
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN1, OUTPUT);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN2, OUTPUT);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>

}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <SSD_DisplayNumber>:
because the second one is at the end so it
will stay on untill the function work again
but the first one will be off at
that time so your eye will notice*/
SSD_DisplayNumber(u8 num)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	af 97       	sbiw	r28, 0x2f	; 47
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	8d a7       	std	Y+45, r24	; 0x2d
	u8 loc_FirstDigit = (num/10)<<4;
     e7e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	69 2f       	mov	r22, r25
     e84:	0e 94 04 22 	call	0x4408	; 0x4408 <__udivmodqi4>
     e88:	82 95       	swap	r24
     e8a:	80 7f       	andi	r24, 0xF0	; 240
     e8c:	8c a7       	std	Y+44, r24	; 0x2c
	u8 loc_SecondtDigit = (num%10)<<4;
     e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e90:	9a e0       	ldi	r25, 0x0A	; 10
     e92:	69 2f       	mov	r22, r25
     e94:	0e 94 04 22 	call	0x4408	; 0x4408 <__udivmodqi4>
     e98:	89 2f       	mov	r24, r25
     e9a:	82 95       	swap	r24
     e9c:	80 7f       	andi	r24, 0xF0	; 240
     e9e:	8b a7       	std	Y+43, r24	; 0x2b
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	60 ef       	ldi	r22, 0xF0	; 240
     ea4:	4c a5       	ldd	r20, Y+44	; 0x2c
     ea6:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a0 e8       	ldi	r26, 0x80	; 128
     eb0:	bf e3       	ldi	r27, 0x3F	; 63
     eb2:	8f a3       	std	Y+39, r24	; 0x27
     eb4:	98 a7       	std	Y+40, r25	; 0x28
     eb6:	a9 a7       	std	Y+41, r26	; 0x29
     eb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eba:	6f a1       	ldd	r22, Y+39	; 0x27
     ebc:	78 a5       	ldd	r23, Y+40	; 0x28
     ebe:	89 a5       	ldd	r24, Y+41	; 0x29
     ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4a ef       	ldi	r20, 0xFA	; 250
     ec8:	54 e4       	ldi	r21, 0x44	; 68
     eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	8b a3       	std	Y+35, r24	; 0x23
     ed4:	9c a3       	std	Y+36, r25	; 0x24
     ed6:	ad a3       	std	Y+37, r26	; 0x25
     ed8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eda:	6b a1       	ldd	r22, Y+35	; 0x23
     edc:	7c a1       	ldd	r23, Y+36	; 0x24
     ede:	8d a1       	ldd	r24, Y+37	; 0x25
     ee0:	9e a1       	ldd	r25, Y+38	; 0x26
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eee:	88 23       	and	r24, r24
     ef0:	2c f4       	brge	.+10     	; 0xefc <SSD_DisplayNumber+0x94>
		__ticks = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9a a3       	std	Y+34, r25	; 0x22
     ef8:	89 a3       	std	Y+33, r24	; 0x21
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <SSD_DisplayNumber+0x112>
	else if (__tmp > 65535)
     efc:	6b a1       	ldd	r22, Y+35	; 0x23
     efe:	7c a1       	ldd	r23, Y+36	; 0x24
     f00:	8d a1       	ldd	r24, Y+37	; 0x25
     f02:	9e a1       	ldd	r25, Y+38	; 0x26
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	3f ef       	ldi	r19, 0xFF	; 255
     f08:	4f e7       	ldi	r20, 0x7F	; 127
     f0a:	57 e4       	ldi	r21, 0x47	; 71
     f0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f10:	18 16       	cp	r1, r24
     f12:	4c f5       	brge	.+82     	; 0xf66 <SSD_DisplayNumber+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	6f a1       	ldd	r22, Y+39	; 0x27
     f16:	78 a5       	ldd	r23, Y+40	; 0x28
     f18:	89 a5       	ldd	r24, Y+41	; 0x29
     f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e2       	ldi	r20, 0x20	; 32
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9a a3       	std	Y+34, r25	; 0x22
     f3a:	89 a3       	std	Y+33, r24	; 0x21
     f3c:	0f c0       	rjmp	.+30     	; 0xf5c <SSD_DisplayNumber+0xf4>
     f3e:	88 ec       	ldi	r24, 0xC8	; 200
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	98 a3       	std	Y+32, r25	; 0x20
     f44:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f48:	98 a1       	ldd	r25, Y+32	; 0x20
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <SSD_DisplayNumber+0xe2>
     f4e:	98 a3       	std	Y+32, r25	; 0x20
     f50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f52:	89 a1       	ldd	r24, Y+33	; 0x21
     f54:	9a a1       	ldd	r25, Y+34	; 0x22
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	9a a3       	std	Y+34, r25	; 0x22
     f5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5c:	89 a1       	ldd	r24, Y+33	; 0x21
     f5e:	9a a1       	ldd	r25, Y+34	; 0x22
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	69 f7       	brne	.-38     	; 0xf3e <SSD_DisplayNumber+0xd6>
     f64:	14 c0       	rjmp	.+40     	; 0xf8e <SSD_DisplayNumber+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	6b a1       	ldd	r22, Y+35	; 0x23
     f68:	7c a1       	ldd	r23, Y+36	; 0x24
     f6a:	8d a1       	ldd	r24, Y+37	; 0x25
     f6c:	9e a1       	ldd	r25, Y+38	; 0x26
     f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9a a3       	std	Y+34, r25	; 0x22
     f78:	89 a3       	std	Y+33, r24	; 0x21
     f7a:	89 a1       	ldd	r24, Y+33	; 0x21
     f7c:	9a a1       	ldd	r25, Y+34	; 0x22
     f7e:	9e 8f       	std	Y+30, r25	; 0x1e
     f80:	8d 8f       	std	Y+29, r24	; 0x1d
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <SSD_DisplayNumber+0x11e>
     f8a:	9e 8f       	std	Y+30, r25	; 0x1e
     f8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//enable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	//disable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num/10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_FirstDigit);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	60 ef       	ldi	r22, 0xF0	; 240
     fa6:	4c a5       	ldd	r20, Y+44	; 0x2c
     fa8:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e8       	ldi	r26, 0x80	; 128
     fb2:	bf e3       	ldi	r27, 0x3F	; 63
     fb4:	89 8f       	std	Y+25, r24	; 0x19
     fb6:	9a 8f       	std	Y+26, r25	; 0x1a
     fb8:	ab 8f       	std	Y+27, r26	; 0x1b
     fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbc:	69 8d       	ldd	r22, Y+25	; 0x19
     fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a ef       	ldi	r20, 0xFA	; 250
     fca:	54 e4       	ldi	r21, 0x44	; 68
     fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	8d 8b       	std	Y+21, r24	; 0x15
     fd6:	9e 8b       	std	Y+22, r25	; 0x16
     fd8:	af 8b       	std	Y+23, r26	; 0x17
     fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fdc:	6d 89       	ldd	r22, Y+21	; 0x15
     fde:	7e 89       	ldd	r23, Y+22	; 0x16
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	2c f4       	brge	.+10     	; 0xffe <SSD_DisplayNumber+0x196>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 8b       	std	Y+20, r25	; 0x14
     ffa:	8b 8b       	std	Y+19, r24	; 0x13
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <SSD_DisplayNumber+0x214>
	else if (__tmp > 65535)
     ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    1000:	7e 89       	ldd	r23, Y+22	; 0x16
    1002:	8f 89       	ldd	r24, Y+23	; 0x17
    1004:	98 8d       	ldd	r25, Y+24	; 0x18
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1012:	18 16       	cp	r1, r24
    1014:	4c f5       	brge	.+82     	; 0x1068 <SSD_DisplayNumber+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1016:	69 8d       	ldd	r22, Y+25	; 0x19
    1018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	0f c0       	rjmp	.+30     	; 0x105e <SSD_DisplayNumber+0x1f6>
    1040:	88 ec       	ldi	r24, 0xC8	; 200
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	9a 8b       	std	Y+18, r25	; 0x12
    1046:	89 8b       	std	Y+17, r24	; 0x11
    1048:	89 89       	ldd	r24, Y+17	; 0x11
    104a:	9a 89       	ldd	r25, Y+18	; 0x12
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <SSD_DisplayNumber+0x1e4>
    1050:	9a 8b       	std	Y+18, r25	; 0x12
    1052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1054:	8b 89       	ldd	r24, Y+19	; 0x13
    1056:	9c 89       	ldd	r25, Y+20	; 0x14
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	9c 8b       	std	Y+20, r25	; 0x14
    105c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105e:	8b 89       	ldd	r24, Y+19	; 0x13
    1060:	9c 89       	ldd	r25, Y+20	; 0x14
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	69 f7       	brne	.-38     	; 0x1040 <SSD_DisplayNumber+0x1d8>
    1066:	14 c0       	rjmp	.+40     	; 0x1090 <SSD_DisplayNumber+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	98 8b       	std	Y+16, r25	; 0x10
    1082:	8f 87       	std	Y+15, r24	; 0x0f
    1084:	8f 85       	ldd	r24, Y+15	; 0x0f
    1086:	98 89       	ldd	r25, Y+16	; 0x10
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <SSD_DisplayNumber+0x220>
    108c:	98 8b       	std	Y+16, r25	; 0x10
    108e:	8f 87       	std	Y+15, r24	; 0x0f
	//wait (1m)
	_delay_ms(1);
	//disable ssd1
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	//enable ssd2
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	41 e0       	ldi	r20, 0x01	; 1
    10a0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	//DIO_PORTA_REG = (num%10)<<4;
	Dio_WriteGroup(DIO_PORTA, SSD_MASK, loc_SecondtDigit);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	60 ef       	ldi	r22, 0xF0	; 240
    10a8:	4b a5       	ldd	r20, Y+43	; 0x2b
    10aa:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 e8       	ldi	r26, 0x80	; 128
    10b4:	bf e3       	ldi	r27, 0x3F	; 63
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	ad 87       	std	Y+13, r26	; 0x0d
    10bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4a ef       	ldi	r20, 0xFA	; 250
    10cc:	54 e4       	ldi	r21, 0x44	; 68
    10ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	8f 83       	std	Y+7, r24	; 0x07
    10d8:	98 87       	std	Y+8, r25	; 0x08
    10da:	a9 87       	std	Y+9, r26	; 0x09
    10dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	2c f4       	brge	.+10     	; 0x1100 <SSD_DisplayNumber+0x298>
		__ticks = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <SSD_DisplayNumber+0x316>
	else if (__tmp > 65535)
    1100:	6f 81       	ldd	r22, Y+7	; 0x07
    1102:	78 85       	ldd	r23, Y+8	; 0x08
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	4c f5       	brge	.+82     	; 0x116a <SSD_DisplayNumber+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <SSD_DisplayNumber+0x2f8>
    1142:	88 ec       	ldi	r24, 0xC8	; 200
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <SSD_DisplayNumber+0x2e6>
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f7       	brne	.-38     	; 0x1142 <SSD_DisplayNumber+0x2da>
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <SSD_DisplayNumber+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <SSD_DisplayNumber+0x322>
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
	//wait (1m)
	_delay_ms(1);
}
    1192:	af 96       	adiw	r28, 0x2f	; 47
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <LED_Init>:
 */
#include"led.h"


void LED_Init(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT, LED0_PIN, OUTPUT);//LED 0
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	62 e0       	ldi	r22, 0x02	; 2
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,2);
	Dio_ConfigChannel(LED1_PORT, LED1_PIN, OUTPUT);//LED 1
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	67 e0       	ldi	r22, 0x07	; 7
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRC_REG,7);
	Dio_ConfigChannel(LED2_PORT, LED2_PIN, OUTPUT);//LED 2
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	63 e0       	ldi	r22, 0x03	; 3
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//SET_BIT(DIO_DDRD_REG,3);

}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LED_ON>:
void LED_ON(led_type ledId)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <LED_ON+0x6>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3b 83       	std	Y+3, r19	; 0x03
    11e6:	2a 83       	std	Y+2, r18	; 0x02
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	79 f0       	breq	.+30     	; 0x1210 <LED_ON+0x40>
    11f2:	2a 81       	ldd	r18, Y+2	; 0x02
    11f4:	3b 81       	ldd	r19, Y+3	; 0x03
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <LED_ON+0x4c>
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	89 f4       	brne	.+34     	; 0x1226 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_HIGH);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    120e:	0b c0       	rjmp	.+22     	; 0x1226 <LED_ON+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_HIGH);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	67 e0       	ldi	r22, 0x07	; 7
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <LED_ON+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_HIGH);
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	63 e0       	ldi	r22, 0x03	; 3
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
		break;

	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <LED_OFF>:
void LED_OFF(led_type ledId)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <LED_OFF+0x6>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3b 83       	std	Y+3, r19	; 0x03
    1248:	2a 83       	std	Y+2, r18	; 0x02
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	79 f0       	breq	.+30     	; 0x1272 <LED_OFF+0x40>
    1254:	2a 81       	ldd	r18, Y+2	; 0x02
    1256:	3b 81       	ldd	r19, Y+3	; 0x03
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <LED_OFF+0x4c>
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	89 f4       	brne	.+34     	; 0x1288 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT, LED0_PIN, STD_LOW);
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <LED_OFF+0x56>
		break;
	case LED1:
		Dio_WriteChannel(LED1_PORT, LED1_PIN, STD_LOW);
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	67 e0       	ldi	r22, 0x07	; 7
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <LED_OFF+0x56>
		break;
	case LED2:
		Dio_WriteChannel(LED2_PORT, LED2_PIN, STD_LOW);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	63 e0       	ldi	r22, 0x03	; 3
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
		break;
	}


}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <LED_TOGGLE+0x6>
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01

	switch (ledId)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	3b 83       	std	Y+3, r19	; 0x03
    12aa:	2a 83       	std	Y+2, r18	; 0x02
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	9b 81       	ldd	r25, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <LED_TOGGLE+0x3e>
    12b6:	2a 81       	ldd	r18, Y+2	; 0x02
    12b8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	71 f0       	breq	.+28     	; 0x12dc <LED_TOGGLE+0x48>
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	71 f4       	brne	.+28     	; 0x12e4 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	62 e0       	ldi	r22, 0x02	; 2
    12cc:	0e 94 91 10 	call	0x2122	; 0x2122 <Dio_ToggleChannel>
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <LED_TOGGLE+0x50>
		break;
	case LED1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	67 e0       	ldi	r22, 0x07	; 7
    12d6:	0e 94 91 10 	call	0x2122	; 0x2122 <Dio_ToggleChannel>
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <LED_TOGGLE+0x50>
		break;
	case LED2:
		Dio_ToggleChannel(LED2_PORT, LED2_PIN);
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	63 e0       	ldi	r22, 0x03	; 3
    12e0:	0e 94 91 10 	call	0x2122	; 0x2122 <Dio_ToggleChannel>
		break;
	}
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <Lcd_WriteCustom+0x6>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    12fc:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	2c c0       	rjmp	.+88     	; 0x135a <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	08 96       	adiw	r24, 0x08	; 8
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    131a:	1a 82       	std	Y+2, r1	; 0x02
    131c:	18 c0       	rjmp	.+48     	; 0x134e <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	48 2f       	mov	r20, r24
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	ca 01       	movw	r24, r20
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	fc 01       	movw	r30, r24
    133e:	e8 59       	subi	r30, 0x98	; 152
    1340:	fe 4f       	sbci	r31, 0xFE	; 254
    1342:	80 81       	ld	r24, Z
    1344:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	28 f3       	brcs	.-54     	; 0x131e <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	88 f2       	brcs	.-94     	; 0x1302 <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <Lcd_Init>:

void Lcd_Init(void)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	e4 97       	sbiw	r28, 0x34	; 52
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	64 e0       	ldi	r22, 0x04	; 4
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	65 e0       	ldi	r22, 0x05	; 5
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	67 e0       	ldi	r22, 0x07	; 7
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e7       	ldi	r26, 0x70	; 112
    13d4:	b1 e4       	ldi	r27, 0x41	; 65
    13d6:	89 ab       	std	Y+49, r24	; 0x31
    13d8:	9a ab       	std	Y+50, r25	; 0x32
    13da:	ab ab       	std	Y+51, r26	; 0x33
    13dc:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	69 a9       	ldd	r22, Y+49	; 0x31
    13e0:	7a a9       	ldd	r23, Y+50	; 0x32
    13e2:	8b a9       	ldd	r24, Y+51	; 0x33
    13e4:	9c a9       	ldd	r25, Y+52	; 0x34
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a ef       	ldi	r20, 0xFA	; 250
    13ec:	54 e4       	ldi	r21, 0x44	; 68
    13ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8d a7       	std	Y+45, r24	; 0x2d
    13f8:	9e a7       	std	Y+46, r25	; 0x2e
    13fa:	af a7       	std	Y+47, r26	; 0x2f
    13fc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    13fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1400:	7e a5       	ldd	r23, Y+46	; 0x2e
    1402:	8f a5       	ldd	r24, Y+47	; 0x2f
    1404:	98 a9       	ldd	r25, Y+48	; 0x30
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <Lcd_Init+0xb6>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9c a7       	std	Y+44, r25	; 0x2c
    141c:	8b a7       	std	Y+43, r24	; 0x2b
    141e:	3f c0       	rjmp	.+126    	; 0x149e <Lcd_Init+0x134>
	else if (__tmp > 65535)
    1420:	6d a5       	ldd	r22, Y+45	; 0x2d
    1422:	7e a5       	ldd	r23, Y+46	; 0x2e
    1424:	8f a5       	ldd	r24, Y+47	; 0x2f
    1426:	98 a9       	ldd	r25, Y+48	; 0x30
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	69 a9       	ldd	r22, Y+49	; 0x31
    143a:	7a a9       	ldd	r23, Y+50	; 0x32
    143c:	8b a9       	ldd	r24, Y+51	; 0x33
    143e:	9c a9       	ldd	r25, Y+52	; 0x34
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c a7       	std	Y+44, r25	; 0x2c
    145e:	8b a7       	std	Y+43, r24	; 0x2b
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <Lcd_Init+0x116>
    1462:	88 ec       	ldi	r24, 0xC8	; 200
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9a a7       	std	Y+42, r25	; 0x2a
    1468:	89 a7       	std	Y+41, r24	; 0x29
    146a:	89 a5       	ldd	r24, Y+41	; 0x29
    146c:	9a a5       	ldd	r25, Y+42	; 0x2a
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <Lcd_Init+0x104>
    1472:	9a a7       	std	Y+42, r25	; 0x2a
    1474:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	8b a5       	ldd	r24, Y+43	; 0x2b
    1478:	9c a5       	ldd	r25, Y+44	; 0x2c
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9c a7       	std	Y+44, r25	; 0x2c
    147e:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	8b a5       	ldd	r24, Y+43	; 0x2b
    1482:	9c a5       	ldd	r25, Y+44	; 0x2c
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <Lcd_Init+0xf8>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6d a5       	ldd	r22, Y+45	; 0x2d
    148c:	7e a5       	ldd	r23, Y+46	; 0x2e
    148e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1490:	98 a9       	ldd	r25, Y+48	; 0x30
    1492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9c a7       	std	Y+44, r25	; 0x2c
    149c:	8b a7       	std	Y+43, r24	; 0x2b
    149e:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a2:	98 a7       	std	Y+40, r25	; 0x28
    14a4:	8f a3       	std	Y+39, r24	; 0x27
    14a6:	8f a1       	ldd	r24, Y+39	; 0x27
    14a8:	98 a5       	ldd	r25, Y+40	; 0x28
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <Lcd_Init+0x140>
    14ae:	98 a7       	std	Y+40, r25	; 0x28
    14b0:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 ea       	ldi	r26, 0xA0	; 160
    14be:	b0 e4       	ldi	r27, 0x40	; 64
    14c0:	8b a3       	std	Y+35, r24	; 0x23
    14c2:	9c a3       	std	Y+36, r25	; 0x24
    14c4:	ad a3       	std	Y+37, r26	; 0x25
    14c6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ca:	7c a1       	ldd	r23, Y+36	; 0x24
    14cc:	8d a1       	ldd	r24, Y+37	; 0x25
    14ce:	9e a1       	ldd	r25, Y+38	; 0x26
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8f 8f       	std	Y+31, r24	; 0x1f
    14e2:	98 a3       	std	Y+32, r25	; 0x20
    14e4:	a9 a3       	std	Y+33, r26	; 0x21
    14e6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    14e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14ea:	78 a1       	ldd	r23, Y+32	; 0x20
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <Lcd_Init+0x1a0>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9e 8f       	std	Y+30, r25	; 0x1e
    1506:	8d 8f       	std	Y+29, r24	; 0x1d
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    150a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    150c:	78 a1       	ldd	r23, Y+32	; 0x20
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	6b a1       	ldd	r22, Y+35	; 0x23
    1524:	7c a1       	ldd	r23, Y+36	; 0x24
    1526:	8d a1       	ldd	r24, Y+37	; 0x25
    1528:	9e a1       	ldd	r25, Y+38	; 0x26
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9e 8f       	std	Y+30, r25	; 0x1e
    1548:	8d 8f       	std	Y+29, r24	; 0x1d
    154a:	0f c0       	rjmp	.+30     	; 0x156a <Lcd_Init+0x200>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 8f       	std	Y+28, r25	; 0x1c
    1552:	8b 8f       	std	Y+27, r24	; 0x1b
    1554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <Lcd_Init+0x1ee>
    155c:	9c 8f       	std	Y+28, r25	; 0x1c
    155e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1562:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9e 8f       	std	Y+30, r25	; 0x1e
    1568:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <Lcd_Init+0x1e2>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1576:	78 a1       	ldd	r23, Y+32	; 0x20
    1578:	89 a1       	ldd	r24, Y+33	; 0x21
    157a:	9a a1       	ldd	r25, Y+34	; 0x22
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 8f       	std	Y+30, r25	; 0x1e
    1586:	8d 8f       	std	Y+29, r24	; 0x1d
    1588:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158c:	9a 8f       	std	Y+26, r25	; 0x1a
    158e:	89 8f       	std	Y+25, r24	; 0x19
    1590:	89 8d       	ldd	r24, Y+25	; 0x19
    1592:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <Lcd_Init+0x22a>
    1598:	9a 8f       	std	Y+26, r25	; 0x1a
    159a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a8 ec       	ldi	r26, 0xC8	; 200
    15a8:	b2 e4       	ldi	r27, 0x42	; 66
    15aa:	8d 8b       	std	Y+21, r24	; 0x15
    15ac:	9e 8b       	std	Y+22, r25	; 0x16
    15ae:	af 8b       	std	Y+23, r26	; 0x17
    15b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	2b ea       	ldi	r18, 0xAB	; 171
    15bc:	3a ea       	ldi	r19, 0xAA	; 170
    15be:	4a e2       	ldi	r20, 0x2A	; 42
    15c0:	50 e4       	ldi	r21, 0x40	; 64
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	ab 8b       	std	Y+19, r26	; 0x13
    15d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15d2:	69 89       	ldd	r22, Y+17	; 0x11
    15d4:	7a 89       	ldd	r23, Y+18	; 0x12
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	1c f4       	brge	.+6      	; 0x15f0 <Lcd_Init+0x286>
		__ticks = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	88 8b       	std	Y+16, r24	; 0x10
    15ee:	91 c0       	rjmp	.+290    	; 0x1712 <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    15f0:	69 89       	ldd	r22, Y+17	; 0x11
    15f2:	7a 89       	ldd	r23, Y+18	; 0x12
    15f4:	8b 89       	ldd	r24, Y+19	; 0x13
    15f6:	9c 89       	ldd	r25, Y+20	; 0x14
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	0c f0       	brlt	.+2      	; 0x160a <Lcd_Init+0x2a0>
    1608:	7b c0       	rjmp	.+246    	; 0x1700 <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a e7       	ldi	r20, 0x7A	; 122
    1618:	54 e4       	ldi	r21, 0x44	; 68
    161a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8c 87       	std	Y+12, r24	; 0x0c
    1624:	9d 87       	std	Y+13, r25	; 0x0d
    1626:	ae 87       	std	Y+14, r26	; 0x0e
    1628:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	6c 85       	ldd	r22, Y+12	; 0x0c
    162c:	7d 85       	ldd	r23, Y+13	; 0x0d
    162e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1630:	9f 85       	ldd	r25, Y+15	; 0x0f
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a ef       	ldi	r20, 0xFA	; 250
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	88 87       	std	Y+8, r24	; 0x08
    1644:	99 87       	std	Y+9, r25	; 0x09
    1646:	aa 87       	std	Y+10, r26	; 0x0a
    1648:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    164a:	68 85       	ldd	r22, Y+8	; 0x08
    164c:	79 85       	ldd	r23, Y+9	; 0x09
    164e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1650:	9b 85       	ldd	r25, Y+11	; 0x0b
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <Lcd_Init+0x302>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9f 83       	std	Y+7, r25	; 0x07
    1668:	8e 83       	std	Y+6, r24	; 0x06
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <Lcd_Init+0x380>
	else if (__tmp > 65535)
    166c:	68 85       	ldd	r22, Y+8	; 0x08
    166e:	79 85       	ldd	r23, Y+9	; 0x09
    1670:	8a 85       	ldd	r24, Y+10	; 0x0a
    1672:	9b 85       	ldd	r25, Y+11	; 0x0b
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	6c 85       	ldd	r22, Y+12	; 0x0c
    1686:	7d 85       	ldd	r23, Y+13	; 0x0d
    1688:	8e 85       	ldd	r24, Y+14	; 0x0e
    168a:	9f 85       	ldd	r25, Y+15	; 0x0f
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9f 83       	std	Y+7, r25	; 0x07
    16aa:	8e 83       	std	Y+6, r24	; 0x06
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <Lcd_Init+0x362>
    16ae:	88 ec       	ldi	r24, 0xC8	; 200
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9d 83       	std	Y+5, r25	; 0x05
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <Lcd_Init+0x350>
    16be:	9d 83       	std	Y+5, r25	; 0x05
    16c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9f 83       	std	Y+7, r25	; 0x07
    16ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <Lcd_Init+0x344>
    16d4:	24 c0       	rjmp	.+72     	; 0x171e <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	68 85       	ldd	r22, Y+8	; 0x08
    16d8:	79 85       	ldd	r23, Y+9	; 0x09
    16da:	8a 85       	ldd	r24, Y+10	; 0x0a
    16dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9f 83       	std	Y+7, r25	; 0x07
    16e8:	8e 83       	std	Y+6, r24	; 0x06
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	9f 81       	ldd	r25, Y+7	; 0x07
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <Lcd_Init+0x38c>
    16fa:	9b 83       	std	Y+3, r25	; 0x03
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1700:	69 89       	ldd	r22, Y+17	; 0x11
    1702:	7a 89       	ldd	r23, Y+18	; 0x12
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	88 8b       	std	Y+16, r24	; 0x10
    1712:	88 89       	ldd	r24, Y+16	; 0x10
    1714:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	8a 95       	dec	r24
    171a:	f1 f7       	brne	.-4      	; 0x1718 <Lcd_Init+0x3ae>
    171c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_Cmd(2);
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    172a:	88 e2       	ldi	r24, 0x28	; 40
    172c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
	Lcd_WriteCustom();
    1730:	0e 94 78 09 	call	0x12f0	; 0x12f0 <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    173c:	8c e0       	ldi	r24, 0x0C	; 12
    173e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
}
    1742:	e4 96       	adiw	r28, 0x34	; 52
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <Enable_Pulse>:
static void Enable_Pulse(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	a6 97       	sbiw	r28, 0x26	; 38
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8b a3       	std	Y+35, r24	; 0x23
    177c:	9c a3       	std	Y+36, r25	; 0x24
    177e:	ad a3       	std	Y+37, r26	; 0x25
    1780:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1782:	6b a1       	ldd	r22, Y+35	; 0x23
    1784:	7c a1       	ldd	r23, Y+36	; 0x24
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	9e a1       	ldd	r25, Y+38	; 0x26
    178a:	2b ea       	ldi	r18, 0xAB	; 171
    178c:	3a ea       	ldi	r19, 0xAA	; 170
    178e:	4a e2       	ldi	r20, 0x2A	; 42
    1790:	50 e4       	ldi	r21, 0x40	; 64
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8f 8f       	std	Y+31, r24	; 0x1f
    179c:	98 a3       	std	Y+32, r25	; 0x20
    179e:	a9 a3       	std	Y+33, r26	; 0x21
    17a0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17a4:	78 a1       	ldd	r23, Y+32	; 0x20
    17a6:	89 a1       	ldd	r24, Y+33	; 0x21
    17a8:	9a a1       	ldd	r25, Y+34	; 0x22
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	1c f4       	brge	.+6      	; 0x17c0 <Enable_Pulse+0x6c>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	8e 8f       	std	Y+30, r24	; 0x1e
    17be:	91 c0       	rjmp	.+290    	; 0x18e2 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    17c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17c2:	78 a1       	ldd	r23, Y+32	; 0x20
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	53 e4       	ldi	r21, 0x43	; 67
    17d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	0c f0       	brlt	.+2      	; 0x17da <Enable_Pulse+0x86>
    17d8:	7b c0       	rjmp	.+246    	; 0x18d0 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	54 e4       	ldi	r21, 0x44	; 68
    17ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8a 8f       	std	Y+26, r24	; 0x1a
    17f4:	9b 8f       	std	Y+27, r25	; 0x1b
    17f6:	ac 8f       	std	Y+28, r26	; 0x1c
    17f8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1800:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a ef       	ldi	r20, 0xFA	; 250
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e 8b       	std	Y+22, r24	; 0x16
    1814:	9f 8b       	std	Y+23, r25	; 0x17
    1816:	a8 8f       	std	Y+24, r26	; 0x18
    1818:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    181a:	6e 89       	ldd	r22, Y+22	; 0x16
    181c:	7f 89       	ldd	r23, Y+23	; 0x17
    181e:	88 8d       	ldd	r24, Y+24	; 0x18
    1820:	99 8d       	ldd	r25, Y+25	; 0x19
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <Enable_Pulse+0xe8>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9d 8b       	std	Y+21, r25	; 0x15
    1838:	8c 8b       	std	Y+20, r24	; 0x14
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    183c:	6e 89       	ldd	r22, Y+22	; 0x16
    183e:	7f 89       	ldd	r23, Y+23	; 0x17
    1840:	88 8d       	ldd	r24, Y+24	; 0x18
    1842:	99 8d       	ldd	r25, Y+25	; 0x19
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1856:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9d 8b       	std	Y+21, r25	; 0x15
    187a:	8c 8b       	std	Y+20, r24	; 0x14
    187c:	0f c0       	rjmp	.+30     	; 0x189c <Enable_Pulse+0x148>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9b 8b       	std	Y+19, r25	; 0x13
    1884:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1886:	8a 89       	ldd	r24, Y+18	; 0x12
    1888:	9b 89       	ldd	r25, Y+19	; 0x13
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <Enable_Pulse+0x136>
    188e:	9b 8b       	std	Y+19, r25	; 0x13
    1890:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8c 89       	ldd	r24, Y+20	; 0x14
    1894:	9d 89       	ldd	r25, Y+21	; 0x15
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9d 8b       	std	Y+21, r25	; 0x15
    189a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8c 89       	ldd	r24, Y+20	; 0x14
    189e:	9d 89       	ldd	r25, Y+21	; 0x15
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <Enable_Pulse+0x12a>
    18a4:	24 c0       	rjmp	.+72     	; 0x18ee <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6e 89       	ldd	r22, Y+22	; 0x16
    18a8:	7f 89       	ldd	r23, Y+23	; 0x17
    18aa:	88 8d       	ldd	r24, Y+24	; 0x18
    18ac:	99 8d       	ldd	r25, Y+25	; 0x19
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9d 8b       	std	Y+21, r25	; 0x15
    18b8:	8c 8b       	std	Y+20, r24	; 0x14
    18ba:	8c 89       	ldd	r24, Y+20	; 0x14
    18bc:	9d 89       	ldd	r25, Y+21	; 0x15
    18be:	99 8b       	std	Y+17, r25	; 0x11
    18c0:	88 8b       	std	Y+16, r24	; 0x10
    18c2:	88 89       	ldd	r24, Y+16	; 0x10
    18c4:	99 89       	ldd	r25, Y+17	; 0x11
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <Enable_Pulse+0x172>
    18ca:	99 8b       	std	Y+17, r25	; 0x11
    18cc:	88 8b       	std	Y+16, r24	; 0x10
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d2:	78 a1       	ldd	r23, Y+32	; 0x20
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8e 8f       	std	Y+30, r24	; 0x1e
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	8a 95       	dec	r24
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <Enable_Pulse+0x194>
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	8b 87       	std	Y+11, r24	; 0x0b
    1902:	9c 87       	std	Y+12, r25	; 0x0c
    1904:	ad 87       	std	Y+13, r26	; 0x0d
    1906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	98 87       	std	Y+8, r25	; 0x08
    1924:	a9 87       	std	Y+9, r26	; 0x09
    1926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <Enable_Pulse+0x1f6>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <Enable_Pulse+0x256>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <Enable_Pulse+0x244>
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <Enable_Pulse+0x238>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <Enable_Pulse+0x280>
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    19dc:	a6 96       	adiw	r28, 0x26	; 38
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <Lcd_Data+0x6>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	82 95       	swap	r24
    1a04:	80 7f       	andi	r24, 0xF0	; 240
    1a06:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	60 ef       	ldi	r22, 0xF0	; 240
    1a16:	4a 81       	ldd	r20, Y+2	; 0x02
    1a18:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
	Enable_Pulse();
    1a1c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	60 ef       	ldi	r22, 0xF0	; 240
    1a24:	49 81       	ldd	r20, Y+1	; 0x01
    1a26:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
	Enable_Pulse();
    1a2a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <Lcd_Cmd+0x6>
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	82 95       	swap	r24
    1a50:	80 7f       	andi	r24, 0xF0	; 240
    1a52:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	60 ef       	ldi	r22, 0xF0	; 240
    1a62:	4a 81       	ldd	r20, Y+2	; 0x02
    1a64:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
	Enable_Pulse();
    1a68:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	60 ef       	ldi	r22, 0xF0	; 240
    1a70:	49 81       	ldd	r20, Y+1	; 0x01
    1a72:	0e 94 0c 10 	call	0x2018	; 0x2018 <Dio_WriteGroup>
	Enable_Pulse();
    1a76:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Enable_Pulse>
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	0f 92       	push	r0
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Lcd_Data>
}
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <Lcd_DisplayStr+0x6>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	80 81       	ld	r24, Z
    1ab6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
		str++;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	89 f7       	brne	.-30     	; 0x1ab0 <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <Lcd_Goto_Row_Column+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <Lcd_Goto_Row_Column+0x8>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3c 83       	std	Y+4, r19	; 0x04
    1af0:	2b 83       	std	Y+3, r18	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <Lcd_Goto_Row_Column+0x2e>
    1afa:	2b 81       	ldd	r18, Y+3	; 0x03
    1afc:	3c 81       	ldd	r19, Y+4	; 0x04
    1afe:	21 30       	cpi	r18, 0x01	; 1
    1b00:	31 05       	cpc	r19, r1
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <Lcd_Goto_Row_Column+0x38>
    1b04:	09 c0       	rjmp	.+18     	; 0x1b18 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 58       	subi	r24, 0x80	; 128
    1b0a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	80 54       	subi	r24, 0x40	; 64
    1b14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Lcd_Cmd>
		break;
	}
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <Lcd_DisplayNum>:

void Lcd_DisplayNum(u16 num)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <Lcd_DisplayNum+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	28 ee       	ldi	r18, 0xE8	; 232
    1b3a:	33 e0       	ldi	r19, 0x03	; 3
    1b3c:	b9 01       	movw	r22, r18
    1b3e:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b42:	cb 01       	movw	r24, r22
    1b44:	80 5d       	subi	r24, 0xD0	; 208
    1b46:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	28 ee       	ldi	r18, 0xE8	; 232
    1b50:	33 e0       	ldi	r19, 0x03	; 3
    1b52:	b9 01       	movw	r22, r18
    1b54:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b58:	24 e6       	ldi	r18, 0x64	; 100
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b62:	cb 01       	movw	r24, r22
    1b64:	80 5d       	subi	r24, 0xD0	; 208
    1b66:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	28 ee       	ldi	r18, 0xE8	; 232
    1b70:	33 e0       	ldi	r19, 0x03	; 3
    1b72:	b9 01       	movw	r22, r18
    1b74:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b78:	24 e6       	ldi	r18, 0x64	; 100
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	80 5d       	subi	r24, 0xD0	; 208
    1b90:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	28 ee       	ldi	r18, 0xE8	; 232
    1b9a:	33 e0       	ldi	r19, 0x03	; 3
    1b9c:	b9 01       	movw	r22, r18
    1b9e:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1ba2:	24 e6       	ldi	r18, 0x64	; 100
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	b9 01       	movw	r22, r18
    1bb2:	0e 94 10 22 	call	0x4420	; 0x4420 <__udivmodhi4>
    1bb6:	80 5d       	subi	r24, 0xD0	; 208
    1bb8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	2c 97       	sbiw	r28, 0x0c	; 12
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	69 87       	std	Y+9, r22	; 0x09
    1bdc:	7a 87       	std	Y+10, r23	; 0x0a
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1be2:	18 86       	std	Y+8, r1	; 0x08
    1be4:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	8b 83       	std	Y+3, r24	; 0x03
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	ad 83       	std	Y+5, r26	; 0x05
    1bf4:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1bfa:	69 85       	ldd	r22, Y+9	; 0x09
    1bfc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1c0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c10:	98 85       	ldd	r25, Y+8	; 0x08
    1c12:	cc 01       	movw	r24, r24
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	69 85       	ldd	r22, Y+9	; 0x09
    1c26:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c2c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	ad 83       	std	Y+5, r26	; 0x05
    1c3a:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1c3c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c3e:	7c 81       	ldd	r23, Y+4	; 0x04
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	48 ec       	ldi	r20, 0xC8	; 200
    1c4a:	52 e4       	ldi	r21, 0x42	; 66
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1c64:	8f 81       	ldd	r24, Y+7	; 0x07
    1c66:	98 85       	ldd	r25, Y+8	; 0x08
    1c68:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1c6c:	8e e2       	ldi	r24, 0x2E	; 46
    1c6e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_DisplayNum>
}
    1c7a:	2c 96       	adiw	r28, 0x0c	; 12
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <Dio_ConfigChannel>:
 *  Created on: Feb 12, 2022
 *      Author: 20100
 */
#include "Dio.h"
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <Dio_ConfigChannel+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <Dio_ConfigChannel+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	6a 83       	std	Y+2, r22	; 0x02
    1c9e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	3d 83       	std	Y+5, r19	; 0x05
    1ca8:	2c 83       	std	Y+4, r18	; 0x04
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <Dio_ConfigChannel+0x2a>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <Dio_ConfigChannel+0xb0>
    1cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <Dio_ConfigChannel+0x3e>
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <Dio_ConfigChannel+0x58>
    1cc8:	bc c0       	rjmp	.+376    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <Dio_ConfigChannel+0x4a>
    1cd4:	5f c0       	rjmp	.+190    	; 0x1d94 <Dio_ConfigChannel+0x108>
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <Dio_ConfigChannel+0x56>
    1ce0:	85 c0       	rjmp	.+266    	; 0x1dec <Dio_ConfigChannel+0x160>
    1ce2:	af c0       	rjmp	.+350    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if(direction == INPUT)
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	88 23       	and	r24, r24
    1ce8:	a9 f4       	brne	.+42     	; 0x1d14 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    1cea:	aa e3       	ldi	r26, 0x3A	; 58
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ea e3       	ldi	r30, 0x3A	; 58
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <Dio_ConfigChannel+0x7c>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <Dio_ConfigChannel+0x78>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	97 c0       	rjmp	.+302    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1d14:	aa e3       	ldi	r26, 0x3A	; 58
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ea e3       	ldi	r30, 0x3A	; 58
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <Dio_ConfigChannel+0xa6>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <Dio_ConfigChannel+0xa2>
    1d36:	84 2b       	or	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	83 c0       	rjmp	.+262    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(direction == INPUT)
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	88 23       	and	r24, r24
    1d40:	a9 f4       	brne	.+42     	; 0x1d6c <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    1d42:	a7 e3       	ldi	r26, 0x37	; 55
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e7 e3       	ldi	r30, 0x37	; 55
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <Dio_ConfigChannel+0xd4>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <Dio_ConfigChannel+0xd0>
    1d64:	80 95       	com	r24
    1d66:	84 23       	and	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	6b c0       	rjmp	.+214    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    1d6c:	a7 e3       	ldi	r26, 0x37	; 55
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e7 e3       	ldi	r30, 0x37	; 55
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <Dio_ConfigChannel+0xfe>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <Dio_ConfigChannel+0xfa>
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	57 c0       	rjmp	.+174    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(direction == INPUT)
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 23       	and	r24, r24
    1d98:	a9 f4       	brne	.+42     	; 0x1dc4 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    1d9a:	a4 e3       	ldi	r26, 0x34	; 52
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e4 e3       	ldi	r30, 0x34	; 52
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <Dio_ConfigChannel+0x12c>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <Dio_ConfigChannel+0x128>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1dc4:	a4 e3       	ldi	r26, 0x34	; 52
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e4 e3       	ldi	r30, 0x34	; 52
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <Dio_ConfigChannel+0x156>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <Dio_ConfigChannel+0x152>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	2b c0       	rjmp	.+86     	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(direction == INPUT)
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	88 23       	and	r24, r24
    1df0:	a9 f4       	brne	.+42     	; 0x1e1c <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    1df2:	a1 e3       	ldi	r26, 0x31	; 49
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e1 e3       	ldi	r30, 0x31	; 49
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <Dio_ConfigChannel+0x184>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <Dio_ConfigChannel+0x180>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    1e1c:	a1 e3       	ldi	r26, 0x31	; 49
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <Dio_ConfigChannel+0x1ae>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <Dio_ConfigChannel+0x1aa>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
		}
		break;
	}

}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <Dio_WriteChannel+0x6>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <Dio_WriteChannel+0x8>
    1e5a:	0f 92       	push	r0
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	6a 83       	std	Y+2, r22	; 0x02
    1e64:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3d 83       	std	Y+5, r19	; 0x05
    1e6e:	2c 83       	std	Y+4, r18	; 0x04
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <Dio_WriteChannel+0x2a>
    1e7a:	43 c0       	rjmp	.+134    	; 0x1f02 <Dio_WriteChannel+0xb0>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <Dio_WriteChannel+0x3e>
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	71 f0       	breq	.+28     	; 0x1eaa <Dio_WriteChannel+0x58>
    1e8e:	bc c0       	rjmp	.+376    	; 0x2008 <Dio_WriteChannel+0x1b6>
    1e90:	2c 81       	ldd	r18, Y+4	; 0x04
    1e92:	3d 81       	ldd	r19, Y+5	; 0x05
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <Dio_WriteChannel+0x4a>
    1e9a:	5f c0       	rjmp	.+190    	; 0x1f5a <Dio_WriteChannel+0x108>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <Dio_WriteChannel+0x56>
    1ea6:	85 c0       	rjmp	.+266    	; 0x1fb2 <Dio_WriteChannel+0x160>
    1ea8:	af c0       	rjmp	.+350    	; 0x2008 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if(level == STD_HIGH)
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	a1 f4       	brne	.+40     	; 0x1ed8 <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    1eb0:	ab e3       	ldi	r26, 0x3B	; 59
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	eb e3       	ldi	r30, 0x3B	; 59
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <Dio_WriteChannel+0x7c>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <Dio_WriteChannel+0x78>
    1ed2:	84 2b       	or	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	98 c0       	rjmp	.+304    	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    1ed8:	ab e3       	ldi	r26, 0x3B	; 59
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <Dio_WriteChannel+0xa4>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <Dio_WriteChannel+0xa0>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	83 c0       	rjmp	.+262    	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if(level == STD_HIGH)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	a1 f4       	brne	.+40     	; 0x1f30 <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    1f08:	a8 e3       	ldi	r26, 0x38	; 56
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e8 e3       	ldi	r30, 0x38	; 56
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <Dio_WriteChannel+0xd4>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <Dio_WriteChannel+0xd0>
    1f2a:	84 2b       	or	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	6c c0       	rjmp	.+216    	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <Dio_WriteChannel+0xfc>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <Dio_WriteChannel+0xf8>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	57 c0       	rjmp	.+174    	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if(level == STD_HIGH)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	a1 f4       	brne	.+40     	; 0x1f88 <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    1f60:	a5 e3       	ldi	r26, 0x35	; 53
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e5 e3       	ldi	r30, 0x35	; 53
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <Dio_WriteChannel+0x12c>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <Dio_WriteChannel+0x128>
    1f82:	84 2b       	or	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	40 c0       	rjmp	.+128    	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    1f88:	a5 e3       	ldi	r26, 0x35	; 53
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e5 e3       	ldi	r30, 0x35	; 53
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <Dio_WriteChannel+0x154>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <Dio_WriteChannel+0x150>
    1faa:	80 95       	com	r24
    1fac:	84 23       	and	r24, r20
    1fae:	8c 93       	st	X, r24
    1fb0:	2b c0       	rjmp	.+86     	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if(level == STD_HIGH)
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	a1 f4       	brne	.+40     	; 0x1fe0 <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    1fb8:	a2 e3       	ldi	r26, 0x32	; 50
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e2 e3       	ldi	r30, 0x32	; 50
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	48 2f       	mov	r20, r24
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	02 2e       	mov	r0, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <Dio_WriteChannel+0x184>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <Dio_WriteChannel+0x180>
    1fda:	84 2b       	or	r24, r20
    1fdc:	8c 93       	st	X, r24
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    1fe0:	a2 e3       	ldi	r26, 0x32	; 50
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e2 e3       	ldi	r30, 0x32	; 50
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	48 2f       	mov	r20, r24
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	02 2e       	mov	r0, r18
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <Dio_WriteChannel+0x1ac>
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	0a 94       	dec	r0
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <Dio_WriteChannel+0x1a8>
    2002:	80 95       	com	r24
    2004:	84 23       	and	r24, r20
    2006:	8c 93       	st	X, r24
		}
		break;
	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <Dio_WriteGroup+0x6>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <Dio_WriteGroup+0x8>
    2020:	0f 92       	push	r0
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	6a 83       	std	Y+2, r22	; 0x02
    202a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	3d 83       	std	Y+5, r19	; 0x05
    2034:	2c 83       	std	Y+4, r18	; 0x04
    2036:	8c 81       	ldd	r24, Y+4	; 0x04
    2038:	9d 81       	ldd	r25, Y+5	; 0x05
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	91 05       	cpc	r25, r1
    203e:	59 f1       	breq	.+86     	; 0x2096 <Dio_WriteGroup+0x7e>
    2040:	2c 81       	ldd	r18, Y+4	; 0x04
    2042:	3d 81       	ldd	r19, Y+5	; 0x05
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	31 05       	cpc	r19, r1
    2048:	2c f4       	brge	.+10     	; 0x2054 <Dio_WriteGroup+0x3c>
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f0       	breq	.+26     	; 0x206c <Dio_WriteGroup+0x54>
    2052:	5f c0       	rjmp	.+190    	; 0x2112 <Dio_WriteGroup+0xfa>
    2054:	2c 81       	ldd	r18, Y+4	; 0x04
    2056:	3d 81       	ldd	r19, Y+5	; 0x05
    2058:	22 30       	cpi	r18, 0x02	; 2
    205a:	31 05       	cpc	r19, r1
    205c:	89 f1       	breq	.+98     	; 0x20c0 <Dio_WriteGroup+0xa8>
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	9d 81       	ldd	r25, Y+5	; 0x05
    2062:	83 30       	cpi	r24, 0x03	; 3
    2064:	91 05       	cpc	r25, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <Dio_WriteGroup+0x52>
    2068:	40 c0       	rjmp	.+128    	; 0x20ea <Dio_WriteGroup+0xd2>
    206a:	53 c0       	rjmp	.+166    	; 0x2112 <Dio_WriteGroup+0xfa>
	{
	case DIO_PORTA:

		DIO_PORTA_REG &= ~mask;
    206c:	ab e3       	ldi	r26, 0x3B	; 59
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e3       	ldi	r30, 0x3B	; 59
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	98 2f       	mov	r25, r24
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	80 95       	com	r24
    207c:	89 23       	and	r24, r25
    207e:	8c 93       	st	X, r24
		DIO_PORTA_REG |= (data & mask);
    2080:	ab e3       	ldi	r26, 0x3B	; 59
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	eb e3       	ldi	r30, 0x3B	; 59
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	20 81       	ld	r18, Z
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	89 23       	and	r24, r25
    2090:	82 2b       	or	r24, r18
    2092:	8c 93       	st	X, r24
    2094:	3e c0       	rjmp	.+124    	; 0x2112 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG &= ~mask;
    2096:	a8 e3       	ldi	r26, 0x38	; 56
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e8 e3       	ldi	r30, 0x38	; 56
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	98 2f       	mov	r25, r24
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	80 95       	com	r24
    20a6:	89 23       	and	r24, r25
    20a8:	8c 93       	st	X, r24
		DIO_PORTB_REG |= (data & mask);
    20aa:	a8 e3       	ldi	r26, 0x38	; 56
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e8 e3       	ldi	r30, 0x38	; 56
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	20 81       	ld	r18, Z
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	89 23       	and	r24, r25
    20ba:	82 2b       	or	r24, r18
    20bc:	8c 93       	st	X, r24
    20be:	29 c0       	rjmp	.+82     	; 0x2112 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG &= ~mask;
    20c0:	a5 e3       	ldi	r26, 0x35	; 53
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e3       	ldi	r30, 0x35	; 53
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	98 2f       	mov	r25, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	80 95       	com	r24
    20d0:	89 23       	and	r24, r25
    20d2:	8c 93       	st	X, r24
		DIO_PORTC_REG |= (data & mask);
    20d4:	a5 e3       	ldi	r26, 0x35	; 53
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	20 81       	ld	r18, Z
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	89 23       	and	r24, r25
    20e4:	82 2b       	or	r24, r18
    20e6:	8c 93       	st	X, r24
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <Dio_WriteGroup+0xfa>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG &= ~mask;
    20ea:	a2 e3       	ldi	r26, 0x32	; 50
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	98 2f       	mov	r25, r24
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	80 95       	com	r24
    20fa:	89 23       	and	r24, r25
    20fc:	8c 93       	st	X, r24
		DIO_PORTD_REG |= (data & mask);
    20fe:	a2 e3       	ldi	r26, 0x32	; 50
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e2 e3       	ldi	r30, 0x32	; 50
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	20 81       	ld	r18, Z
    2108:	9b 81       	ldd	r25, Y+3	; 0x03
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	89 23       	and	r24, r25
    210e:	82 2b       	or	r24, r18
    2110:	8c 93       	st	X, r24
		break;
	}
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <Dio_ToggleChannel>:
void Dio_ToggleChannel(port_type port, pin_type pin)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <Dio_ToggleChannel+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <Dio_ToggleChannel+0x8>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	3c 83       	std	Y+4, r19	; 0x04
    213a:	2b 83       	std	Y+3, r18	; 0x03
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	91 05       	cpc	r25, r1
    2144:	49 f1       	breq	.+82     	; 0x2198 <Dio_ToggleChannel+0x76>
    2146:	2b 81       	ldd	r18, Y+3	; 0x03
    2148:	3c 81       	ldd	r19, Y+4	; 0x04
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	2c f4       	brge	.+10     	; 0x215a <Dio_ToggleChannel+0x38>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	61 f0       	breq	.+24     	; 0x2170 <Dio_ToggleChannel+0x4e>
    2158:	5a c0       	rjmp	.+180    	; 0x220e <Dio_ToggleChannel+0xec>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	71 f1       	breq	.+92     	; 0x21c0 <Dio_ToggleChannel+0x9e>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	e9 f1       	breq	.+122    	; 0x21e8 <Dio_ToggleChannel+0xc6>
    216e:	4f c0       	rjmp	.+158    	; 0x220e <Dio_ToggleChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    2170:	ab e3       	ldi	r26, 0x3B	; 59
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	eb e3       	ldi	r30, 0x3B	; 59
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <Dio_ToggleChannel+0x6c>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <Dio_ToggleChannel+0x68>
    2192:	84 27       	eor	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	3b c0       	rjmp	.+118    	; 0x220e <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    2198:	a8 e3       	ldi	r26, 0x38	; 56
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e8 e3       	ldi	r30, 0x38	; 56
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <Dio_ToggleChannel+0x94>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <Dio_ToggleChannel+0x90>
    21ba:	84 27       	eor	r24, r20
    21bc:	8c 93       	st	X, r24
    21be:	27 c0       	rjmp	.+78     	; 0x220e <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    21c0:	a5 e3       	ldi	r26, 0x35	; 53
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e5 e3       	ldi	r30, 0x35	; 53
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <Dio_ToggleChannel+0xbc>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <Dio_ToggleChannel+0xb8>
    21e2:	84 27       	eor	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	13 c0       	rjmp	.+38     	; 0x220e <Dio_ToggleChannel+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    21e8:	a2 e3       	ldi	r26, 0x32	; 50
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e2 e3       	ldi	r30, 0x32	; 50
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <Dio_ToggleChannel+0xe4>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <Dio_ToggleChannel+0xe0>
    220a:	84 27       	eor	r24, r20
    220c:	8c 93       	st	X, r24
		break;
	}
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <Dio_ReadChannel+0x6>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <Dio_ReadChannel+0x8>
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	8a 83       	std	Y+2, r24	; 0x02
    222c:	6b 83       	std	Y+3, r22	; 0x03
	level_type res = STD_LOW;
    222e:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3d 83       	std	Y+5, r19	; 0x05
    2238:	2c 83       	std	Y+4, r18	; 0x04
    223a:	4c 81       	ldd	r20, Y+4	; 0x04
    223c:	5d 81       	ldd	r21, Y+5	; 0x05
    223e:	41 30       	cpi	r20, 0x01	; 1
    2240:	51 05       	cpc	r21, r1
    2242:	79 f1       	breq	.+94     	; 0x22a2 <Dio_ReadChannel+0x86>
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	91 05       	cpc	r25, r1
    224c:	34 f4       	brge	.+12     	; 0x225a <Dio_ReadChannel+0x3e>
    224e:	2c 81       	ldd	r18, Y+4	; 0x04
    2250:	3d 81       	ldd	r19, Y+5	; 0x05
    2252:	21 15       	cp	r18, r1
    2254:	31 05       	cpc	r19, r1
    2256:	69 f0       	breq	.+26     	; 0x2272 <Dio_ReadChannel+0x56>
    2258:	6b c0       	rjmp	.+214    	; 0x2330 <Dio_ReadChannel+0x114>
    225a:	4c 81       	ldd	r20, Y+4	; 0x04
    225c:	5d 81       	ldd	r21, Y+5	; 0x05
    225e:	42 30       	cpi	r20, 0x02	; 2
    2260:	51 05       	cpc	r21, r1
    2262:	b9 f1       	breq	.+110    	; 0x22d2 <Dio_ReadChannel+0xb6>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <Dio_ReadChannel+0x54>
    226e:	49 c0       	rjmp	.+146    	; 0x2302 <Dio_ReadChannel+0xe6>
    2270:	5f c0       	rjmp	.+190    	; 0x2330 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if (GET_BIT(DIO_PINA_REG,pin))
    2272:	e9 e3       	ldi	r30, 0x39	; 57
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a9 01       	movw	r20, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <Dio_ReadChannel+0x6e>
    2286:	55 95       	asr	r21
    2288:	47 95       	ror	r20
    228a:	8a 95       	dec	r24
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <Dio_ReadChannel+0x6a>
    228e:	ca 01       	movw	r24, r20
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	88 23       	and	r24, r24
    2296:	19 f0       	breq	.+6      	; 0x229e <Dio_ReadChannel+0x82>
			res = STD_HIGH;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	49 c0       	rjmp	.+146    	; 0x2330 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    229e:	19 82       	std	Y+1, r1	; 0x01
    22a0:	47 c0       	rjmp	.+142    	; 0x2330 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTB:
		if (GET_BIT(DIO_PINB_REG,pin))
    22a2:	e6 e3       	ldi	r30, 0x36	; 54
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a9 01       	movw	r20, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <Dio_ReadChannel+0x9e>
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	8a 95       	dec	r24
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <Dio_ReadChannel+0x9a>
    22be:	ca 01       	movw	r24, r20
    22c0:	81 70       	andi	r24, 0x01	; 1
    22c2:	90 70       	andi	r25, 0x00	; 0
    22c4:	88 23       	and	r24, r24
    22c6:	19 f0       	breq	.+6      	; 0x22ce <Dio_ReadChannel+0xb2>
			res = STD_HIGH;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	31 c0       	rjmp	.+98     	; 0x2330 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    22ce:	19 82       	std	Y+1, r1	; 0x01
    22d0:	2f c0       	rjmp	.+94     	; 0x2330 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTC:
		if (GET_BIT(DIO_PINC_REG,pin))
    22d2:	e3 e3       	ldi	r30, 0x33	; 51
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a9 01       	movw	r20, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <Dio_ReadChannel+0xce>
    22e6:	55 95       	asr	r21
    22e8:	47 95       	ror	r20
    22ea:	8a 95       	dec	r24
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <Dio_ReadChannel+0xca>
    22ee:	ca 01       	movw	r24, r20
    22f0:	81 70       	andi	r24, 0x01	; 1
    22f2:	90 70       	andi	r25, 0x00	; 0
    22f4:	88 23       	and	r24, r24
    22f6:	19 f0       	breq	.+6      	; 0x22fe <Dio_ReadChannel+0xe2>
			res = STD_HIGH;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	19 c0       	rjmp	.+50     	; 0x2330 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    22fe:	19 82       	std	Y+1, r1	; 0x01
    2300:	17 c0       	rjmp	.+46     	; 0x2330 <Dio_ReadChannel+0x114>
		break;
	case DIO_PORTD:
		if (GET_BIT(DIO_PIND_REG,pin))
    2302:	e0 e3       	ldi	r30, 0x30	; 48
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a9 01       	movw	r20, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <Dio_ReadChannel+0xfe>
    2316:	55 95       	asr	r21
    2318:	47 95       	ror	r20
    231a:	8a 95       	dec	r24
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <Dio_ReadChannel+0xfa>
    231e:	ca 01       	movw	r24, r20
    2320:	81 70       	andi	r24, 0x01	; 1
    2322:	90 70       	andi	r25, 0x00	; 0
    2324:	88 23       	and	r24, r24
    2326:	19 f0       	breq	.+6      	; 0x232e <Dio_ReadChannel+0x112>
			res = STD_HIGH;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <Dio_ReadChannel+0x114>
		else
			res = STD_LOW;
    232e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return res;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <BUZZER_Init>:
 *      Author: 20100
 */
#include "Buzzer.h"

void BUZZER_Init(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	63 e0       	ldi	r22, 0x03	; 3
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <BUZZER_ON>:
void BUZZER_ON(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_HIGH);
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	63 e0       	ldi	r22, 0x03	; 3
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
}
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <BUZZER_OFF>:

void BUZZER_OFF(void)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT, BUZZER_PIN, STD_LOW);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	63 e0       	ldi	r22, 0x03	; 3
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Dio_WriteChannel>
}
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <BUZZER_TOGGLE>:
void BUZZER_TOGGLE(void)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	Dio_ToggleChannel(BUZZER_PORT, BUZZER_PIN);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	63 e0       	ldi	r22, 0x03	; 3
    2396:	0e 94 91 10 	call	0x2122	; 0x2122 <Dio_ToggleChannel>
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <Buzzer_GetStatus>:
buzzer_type Buzzer_GetStatus(void)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	buzzer_type status = OFF;
    23aa:	19 82       	std	Y+1, r1	; 0x01
	if(Dio_ReadChannel(BUZZER_PORT, BUZZER_PIN) == STD_HIGH)
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	63 e0       	ldi	r22, 0x03	; 3
    23b0:	0e 94 0e 11 	call	0x221c	; 0x221c <Dio_ReadChannel>
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	19 f4       	brne	.+6      	; 0x23be <Buzzer_GetStatus+0x1e>
	{
		status = ON;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <Buzzer_GetStatus+0x20>
	}
	else
	{
		status = OFF;
    23be:	19 82       	std	Y+1, r1	; 0x01
	}
	return status;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <Button_Init>:
 */

#include "Button.h"

void Button_Init(void)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT, BUTTON0_PIN, INPUT);//BUTTON 0
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRB_REG,0);
	Dio_ConfigChannel(BUTTON1_PORT, BUTTON1_PIN, INPUT);//BUTTON 1
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	66 e0       	ldi	r22, 0x06	; 6
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,6);
	Dio_ConfigChannel(BUTTON2_PORT, BUTTON2_PIN, INPUT);//BUTTON 2
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	62 e0       	ldi	r22, 0x02	; 2
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Dio_ConfigChannel>
	//CLR_BIT(DIO_DDRD_REG,2);
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <Button_GetStatus+0x6>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <Button_GetStatus+0x8>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    2404:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3c 83       	std	Y+4, r19	; 0x04
    240e:	2b 83       	std	Y+3, r18	; 0x03
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	a1 f0       	breq	.+40     	; 0x2442 <Button_GetStatus+0x4c>
    241a:	2b 81       	ldd	r18, Y+3	; 0x03
    241c:	3c 81       	ldd	r19, Y+4	; 0x04
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	d1 f0       	breq	.+52     	; 0x2458 <Button_GetStatus+0x62>
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	01 f5       	brne	.+64     	; 0x246c <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if(Dio_ReadChannel(BUTTON0_PORT, BUTTON0_PIN) == STD_HIGH)
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	0e 94 0e 11 	call	0x221c	; 0x221c <Dio_ReadChannel>
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	19 f4       	brne	.+6      	; 0x243e <Button_GetStatus+0x48>
		{
			status = PRESSED;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	17 c0       	rjmp	.+46     	; 0x246c <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    243e:	19 82       	std	Y+1, r1	; 0x01
    2440:	15 c0       	rjmp	.+42     	; 0x246c <Button_GetStatus+0x76>
		}
		break;
	case BUTTON1:
		if(Dio_ReadChannel(BUTTON1_PORT, BUTTON1_PIN) == STD_HIGH)
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	66 e0       	ldi	r22, 0x06	; 6
    2446:	0e 94 0e 11 	call	0x221c	; 0x221c <Dio_ReadChannel>
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	19 f4       	brne	.+6      	; 0x2454 <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	0c c0       	rjmp	.+24     	; 0x246c <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	0a c0       	rjmp	.+20     	; 0x246c <Button_GetStatus+0x76>
		}
		break;
	case BUTTON2:
		if(Dio_ReadChannel(BUTTON2_PORT, BUTTON2_PIN) == STD_HIGH)
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	0e 94 0e 11 	call	0x221c	; 0x221c <Dio_ReadChannel>
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	19 f4       	brne	.+6      	; 0x246a <Button_GetStatus+0x74>
		{
			status = PRESSED;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	01 c0       	rjmp	.+2      	; 0x246c <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    246a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;


	}
	return status;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <GLCD_Command>:
	h,
	vup,
	vdown
}axis;
void GLCD_Command(char Command)		/* GLCD command function */
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	e1 97       	sbiw	r28, 0x31	; 49
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;		/* Copy command on data pin */
    2492:	eb e3       	ldi	r30, 0x3B	; 59
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	89 a9       	ldd	r24, Y+49	; 0x31
    2498:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
    249a:	a5 e3       	ldi	r26, 0x35	; 53
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e5 e3       	ldi	r30, 0x35	; 53
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8e 7f       	andi	r24, 0xFE	; 254
    24a6:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    24a8:	a5 e3       	ldi	r26, 0x35	; 53
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e5 e3       	ldi	r30, 0x35	; 53
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8d 7f       	andi	r24, 0xFD	; 253
    24b4:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    24b6:	a5 e3       	ldi	r26, 0x35	; 53
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e5 e3       	ldi	r30, 0x35	; 53
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	84 60       	ori	r24, 0x04	; 4
    24c2:	8c 93       	st	X, r24
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 ea       	ldi	r26, 0xA0	; 160
    24ca:	b0 e4       	ldi	r27, 0x40	; 64
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
    24ce:	9e a7       	std	Y+46, r25	; 0x2e
    24d0:	af a7       	std	Y+47, r26	; 0x2f
    24d2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    24d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	2b ea       	ldi	r18, 0xAB	; 171
    24de:	3a ea       	ldi	r19, 0xAA	; 170
    24e0:	4a e2       	ldi	r20, 0x2A	; 42
    24e2:	50 e4       	ldi	r21, 0x40	; 64
    24e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	89 a7       	std	Y+41, r24	; 0x29
    24ee:	9a a7       	std	Y+42, r25	; 0x2a
    24f0:	ab a7       	std	Y+43, r26	; 0x2b
    24f2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    24f4:	69 a5       	ldd	r22, Y+41	; 0x29
    24f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    24f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	1c f4       	brge	.+6      	; 0x2512 <GLCD_Command+0x96>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	88 a7       	std	Y+40, r24	; 0x28
    2510:	91 c0       	rjmp	.+290    	; 0x2634 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    2512:	69 a5       	ldd	r22, Y+41	; 0x29
    2514:	7a a5       	ldd	r23, Y+42	; 0x2a
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	9c a5       	ldd	r25, Y+44	; 0x2c
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	53 e4       	ldi	r21, 0x43	; 67
    2522:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	0c f0       	brlt	.+2      	; 0x252c <GLCD_Command+0xb0>
    252a:	7b c0       	rjmp	.+246    	; 0x2622 <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    252c:	6d a5       	ldd	r22, Y+45	; 0x2d
    252e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2530:	8f a5       	ldd	r24, Y+47	; 0x2f
    2532:	98 a9       	ldd	r25, Y+48	; 0x30
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	54 e4       	ldi	r21, 0x44	; 68
    253c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8c a3       	std	Y+36, r24	; 0x24
    2546:	9d a3       	std	Y+37, r25	; 0x25
    2548:	ae a3       	std	Y+38, r26	; 0x26
    254a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6c a1       	ldd	r22, Y+36	; 0x24
    254e:	7d a1       	ldd	r23, Y+37	; 0x25
    2550:	8e a1       	ldd	r24, Y+38	; 0x26
    2552:	9f a1       	ldd	r25, Y+39	; 0x27
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	88 a3       	std	Y+32, r24	; 0x20
    2566:	99 a3       	std	Y+33, r25	; 0x21
    2568:	aa a3       	std	Y+34, r26	; 0x22
    256a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    256c:	68 a1       	ldd	r22, Y+32	; 0x20
    256e:	79 a1       	ldd	r23, Y+33	; 0x21
    2570:	8a a1       	ldd	r24, Y+34	; 0x22
    2572:	9b a1       	ldd	r25, Y+35	; 0x23
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <GLCD_Command+0x112>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9f 8f       	std	Y+31, r25	; 0x1f
    258a:	8e 8f       	std	Y+30, r24	; 0x1e
    258c:	3f c0       	rjmp	.+126    	; 0x260c <GLCD_Command+0x190>
	else if (__tmp > 65535)
    258e:	68 a1       	ldd	r22, Y+32	; 0x20
    2590:	79 a1       	ldd	r23, Y+33	; 0x21
    2592:	8a a1       	ldd	r24, Y+34	; 0x22
    2594:	9b a1       	ldd	r25, Y+35	; 0x23
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6c a1       	ldd	r22, Y+36	; 0x24
    25a8:	7d a1       	ldd	r23, Y+37	; 0x25
    25aa:	8e a1       	ldd	r24, Y+38	; 0x26
    25ac:	9f a1       	ldd	r25, Y+39	; 0x27
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9f 8f       	std	Y+31, r25	; 0x1f
    25cc:	8e 8f       	std	Y+30, r24	; 0x1e
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <GLCD_Command+0x172>
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9d 8f       	std	Y+29, r25	; 0x1d
    25d6:	8c 8f       	std	Y+28, r24	; 0x1c
    25d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <GLCD_Command+0x160>
    25e0:	9d 8f       	std	Y+29, r25	; 0x1d
    25e2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9f 8f       	std	Y+31, r25	; 0x1f
    25ec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <GLCD_Command+0x154>
    25f6:	24 c0       	rjmp	.+72     	; 0x2640 <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	68 a1       	ldd	r22, Y+32	; 0x20
    25fa:	79 a1       	ldd	r23, Y+33	; 0x21
    25fc:	8a a1       	ldd	r24, Y+34	; 0x22
    25fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9f 8f       	std	Y+31, r25	; 0x1f
    260a:	8e 8f       	std	Y+30, r24	; 0x1e
    260c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    260e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2610:	9b 8f       	std	Y+27, r25	; 0x1b
    2612:	8a 8f       	std	Y+26, r24	; 0x1a
    2614:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2616:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <GLCD_Command+0x19c>
    261c:	9b 8f       	std	Y+27, r25	; 0x1b
    261e:	8a 8f       	std	Y+26, r24	; 0x1a
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2622:	69 a5       	ldd	r22, Y+41	; 0x29
    2624:	7a a5       	ldd	r23, Y+42	; 0x2a
    2626:	8b a5       	ldd	r24, Y+43	; 0x2b
    2628:	9c a5       	ldd	r25, Y+44	; 0x2c
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	88 a7       	std	Y+40, r24	; 0x28
    2634:	88 a5       	ldd	r24, Y+40	; 0x28
    2636:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2638:	89 8d       	ldd	r24, Y+25	; 0x19
    263a:	8a 95       	dec	r24
    263c:	f1 f7       	brne	.-4      	; 0x263a <GLCD_Command+0x1be>
    263e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    2640:	a5 e3       	ldi	r26, 0x35	; 53
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e3       	ldi	r30, 0x35	; 53
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8b 7f       	andi	r24, 0xFB	; 251
    264c:	8c 93       	st	X, r24
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 ea       	ldi	r26, 0xA0	; 160
    2654:	b0 e4       	ldi	r27, 0x40	; 64
    2656:	8d 8b       	std	Y+21, r24	; 0x15
    2658:	9e 8b       	std	Y+22, r25	; 0x16
    265a:	af 8b       	std	Y+23, r26	; 0x17
    265c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	2b ea       	ldi	r18, 0xAB	; 171
    2668:	3a ea       	ldi	r19, 0xAA	; 170
    266a:	4a e2       	ldi	r20, 0x2A	; 42
    266c:	50 e4       	ldi	r21, 0x40	; 64
    266e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	89 8b       	std	Y+17, r24	; 0x11
    2678:	9a 8b       	std	Y+18, r25	; 0x12
    267a:	ab 8b       	std	Y+19, r26	; 0x13
    267c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    267e:	69 89       	ldd	r22, Y+17	; 0x11
    2680:	7a 89       	ldd	r23, Y+18	; 0x12
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	1c f4       	brge	.+6      	; 0x269c <GLCD_Command+0x220>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	88 8b       	std	Y+16, r24	; 0x10
    269a:	91 c0       	rjmp	.+290    	; 0x27be <GLCD_Command+0x342>
	else if (__tmp > 255)
    269c:	69 89       	ldd	r22, Y+17	; 0x11
    269e:	7a 89       	ldd	r23, Y+18	; 0x12
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	53 e4       	ldi	r21, 0x43	; 67
    26ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	0c f0       	brlt	.+2      	; 0x26b6 <GLCD_Command+0x23a>
    26b4:	7b c0       	rjmp	.+246    	; 0x27ac <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a e7       	ldi	r20, 0x7A	; 122
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8c 87       	std	Y+12, r24	; 0x0c
    26d0:	9d 87       	std	Y+13, r25	; 0x0d
    26d2:	ae 87       	std	Y+14, r26	; 0x0e
    26d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    26d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    26da:	8e 85       	ldd	r24, Y+14	; 0x0e
    26dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	88 87       	std	Y+8, r24	; 0x08
    26f0:	99 87       	std	Y+9, r25	; 0x09
    26f2:	aa 87       	std	Y+10, r26	; 0x0a
    26f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26f6:	68 85       	ldd	r22, Y+8	; 0x08
    26f8:	79 85       	ldd	r23, Y+9	; 0x09
    26fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <GLCD_Command+0x29c>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9f 83       	std	Y+7, r25	; 0x07
    2714:	8e 83       	std	Y+6, r24	; 0x06
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    2718:	68 85       	ldd	r22, Y+8	; 0x08
    271a:	79 85       	ldd	r23, Y+9	; 0x09
    271c:	8a 85       	ldd	r24, Y+10	; 0x0a
    271e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6c 85       	ldd	r22, Y+12	; 0x0c
    2732:	7d 85       	ldd	r23, Y+13	; 0x0d
    2734:	8e 85       	ldd	r24, Y+14	; 0x0e
    2736:	9f 85       	ldd	r25, Y+15	; 0x0f
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9f 83       	std	Y+7, r25	; 0x07
    2756:	8e 83       	std	Y+6, r24	; 0x06
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <GLCD_Command+0x2fc>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9d 83       	std	Y+5, r25	; 0x05
    2760:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2762:	8c 81       	ldd	r24, Y+4	; 0x04
    2764:	9d 81       	ldd	r25, Y+5	; 0x05
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <GLCD_Command+0x2ea>
    276a:	9d 83       	std	Y+5, r25	; 0x05
    276c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8e 81       	ldd	r24, Y+6	; 0x06
    2770:	9f 81       	ldd	r25, Y+7	; 0x07
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9f 83       	std	Y+7, r25	; 0x07
    2776:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8e 81       	ldd	r24, Y+6	; 0x06
    277a:	9f 81       	ldd	r25, Y+7	; 0x07
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <GLCD_Command+0x2de>
    2780:	24 c0       	rjmp	.+72     	; 0x27ca <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	68 85       	ldd	r22, Y+8	; 0x08
    2784:	79 85       	ldd	r23, Y+9	; 0x09
    2786:	8a 85       	ldd	r24, Y+10	; 0x0a
    2788:	9b 85       	ldd	r25, Y+11	; 0x0b
    278a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9f 83       	std	Y+7, r25	; 0x07
    2794:	8e 83       	std	Y+6, r24	; 0x06
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	9b 83       	std	Y+3, r25	; 0x03
    279c:	8a 83       	std	Y+2, r24	; 0x02
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <GLCD_Command+0x326>
    27a6:	9b 83       	std	Y+3, r25	; 0x03
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27ac:	69 89       	ldd	r22, Y+17	; 0x11
    27ae:	7a 89       	ldd	r23, Y+18	; 0x12
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	88 8b       	std	Y+16, r24	; 0x10
    27be:	88 89       	ldd	r24, Y+16	; 0x10
    27c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	8a 95       	dec	r24
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <GLCD_Command+0x348>
    27c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    27ca:	e1 96       	adiw	r28, 0x31	; 49
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <GLCD_Data>:

void GLCD_Data(char Data)		/* GLCD data function */
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	e1 97       	sbiw	r28, 0x31	; 49
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;		/* Copy data on data pin */
    27f2:	eb e3       	ldi	r30, 0x3B	; 59
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	89 a9       	ldd	r24, Y+49	; 0x31
    27f8:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
    27fa:	a5 e3       	ldi	r26, 0x35	; 53
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e5 e3       	ldi	r30, 0x35	; 53
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	81 60       	ori	r24, 0x01	; 1
    2806:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
    2808:	a5 e3       	ldi	r26, 0x35	; 53
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e5 e3       	ldi	r30, 0x35	; 53
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8d 7f       	andi	r24, 0xFD	; 253
    2814:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    2816:	a5 e3       	ldi	r26, 0x35	; 53
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e5 e3       	ldi	r30, 0x35	; 53
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	84 60       	ori	r24, 0x04	; 4
    2822:	8c 93       	st	X, r24
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 ea       	ldi	r26, 0xA0	; 160
    282a:	b0 e4       	ldi	r27, 0x40	; 64
    282c:	8d a7       	std	Y+45, r24	; 0x2d
    282e:	9e a7       	std	Y+46, r25	; 0x2e
    2830:	af a7       	std	Y+47, r26	; 0x2f
    2832:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2834:	6d a5       	ldd	r22, Y+45	; 0x2d
    2836:	7e a5       	ldd	r23, Y+46	; 0x2e
    2838:	8f a5       	ldd	r24, Y+47	; 0x2f
    283a:	98 a9       	ldd	r25, Y+48	; 0x30
    283c:	2b ea       	ldi	r18, 0xAB	; 171
    283e:	3a ea       	ldi	r19, 0xAA	; 170
    2840:	4a e2       	ldi	r20, 0x2A	; 42
    2842:	50 e4       	ldi	r21, 0x40	; 64
    2844:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	89 a7       	std	Y+41, r24	; 0x29
    284e:	9a a7       	std	Y+42, r25	; 0x2a
    2850:	ab a7       	std	Y+43, r26	; 0x2b
    2852:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2854:	69 a5       	ldd	r22, Y+41	; 0x29
    2856:	7a a5       	ldd	r23, Y+42	; 0x2a
    2858:	8b a5       	ldd	r24, Y+43	; 0x2b
    285a:	9c a5       	ldd	r25, Y+44	; 0x2c
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	1c f4       	brge	.+6      	; 0x2872 <GLCD_Data+0x96>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	88 a7       	std	Y+40, r24	; 0x28
    2870:	91 c0       	rjmp	.+290    	; 0x2994 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    2872:	69 a5       	ldd	r22, Y+41	; 0x29
    2874:	7a a5       	ldd	r23, Y+42	; 0x2a
    2876:	8b a5       	ldd	r24, Y+43	; 0x2b
    2878:	9c a5       	ldd	r25, Y+44	; 0x2c
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	53 e4       	ldi	r21, 0x43	; 67
    2882:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	0c f0       	brlt	.+2      	; 0x288c <GLCD_Data+0xb0>
    288a:	7b c0       	rjmp	.+246    	; 0x2982 <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    288c:	6d a5       	ldd	r22, Y+45	; 0x2d
    288e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2890:	8f a5       	ldd	r24, Y+47	; 0x2f
    2892:	98 a9       	ldd	r25, Y+48	; 0x30
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a e7       	ldi	r20, 0x7A	; 122
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8c a3       	std	Y+36, r24	; 0x24
    28a6:	9d a3       	std	Y+37, r25	; 0x25
    28a8:	ae a3       	std	Y+38, r26	; 0x26
    28aa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6c a1       	ldd	r22, Y+36	; 0x24
    28ae:	7d a1       	ldd	r23, Y+37	; 0x25
    28b0:	8e a1       	ldd	r24, Y+38	; 0x26
    28b2:	9f a1       	ldd	r25, Y+39	; 0x27
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	88 a3       	std	Y+32, r24	; 0x20
    28c6:	99 a3       	std	Y+33, r25	; 0x21
    28c8:	aa a3       	std	Y+34, r26	; 0x22
    28ca:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    28cc:	68 a1       	ldd	r22, Y+32	; 0x20
    28ce:	79 a1       	ldd	r23, Y+33	; 0x21
    28d0:	8a a1       	ldd	r24, Y+34	; 0x22
    28d2:	9b a1       	ldd	r25, Y+35	; 0x23
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <GLCD_Data+0x112>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9f 8f       	std	Y+31, r25	; 0x1f
    28ea:	8e 8f       	std	Y+30, r24	; 0x1e
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <GLCD_Data+0x190>
	else if (__tmp > 65535)
    28ee:	68 a1       	ldd	r22, Y+32	; 0x20
    28f0:	79 a1       	ldd	r23, Y+33	; 0x21
    28f2:	8a a1       	ldd	r24, Y+34	; 0x22
    28f4:	9b a1       	ldd	r25, Y+35	; 0x23
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6c a1       	ldd	r22, Y+36	; 0x24
    2908:	7d a1       	ldd	r23, Y+37	; 0x25
    290a:	8e a1       	ldd	r24, Y+38	; 0x26
    290c:	9f a1       	ldd	r25, Y+39	; 0x27
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9f 8f       	std	Y+31, r25	; 0x1f
    292c:	8e 8f       	std	Y+30, r24	; 0x1e
    292e:	0f c0       	rjmp	.+30     	; 0x294e <GLCD_Data+0x172>
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9d 8f       	std	Y+29, r25	; 0x1d
    2936:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2938:	8c 8d       	ldd	r24, Y+28	; 0x1c
    293a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <GLCD_Data+0x160>
    2940:	9d 8f       	std	Y+29, r25	; 0x1d
    2942:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2946:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9f 8f       	std	Y+31, r25	; 0x1f
    294c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2950:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <GLCD_Data+0x154>
    2956:	24 c0       	rjmp	.+72     	; 0x29a0 <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	68 a1       	ldd	r22, Y+32	; 0x20
    295a:	79 a1       	ldd	r23, Y+33	; 0x21
    295c:	8a a1       	ldd	r24, Y+34	; 0x22
    295e:	9b a1       	ldd	r25, Y+35	; 0x23
    2960:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9f 8f       	std	Y+31, r25	; 0x1f
    296a:	8e 8f       	std	Y+30, r24	; 0x1e
    296c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    296e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2970:	9b 8f       	std	Y+27, r25	; 0x1b
    2972:	8a 8f       	std	Y+26, r24	; 0x1a
    2974:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2976:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <GLCD_Data+0x19c>
    297c:	9b 8f       	std	Y+27, r25	; 0x1b
    297e:	8a 8f       	std	Y+26, r24	; 0x1a
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2982:	69 a5       	ldd	r22, Y+41	; 0x29
    2984:	7a a5       	ldd	r23, Y+42	; 0x2a
    2986:	8b a5       	ldd	r24, Y+43	; 0x2b
    2988:	9c a5       	ldd	r25, Y+44	; 0x2c
    298a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	88 a7       	std	Y+40, r24	; 0x28
    2994:	88 a5       	ldd	r24, Y+40	; 0x28
    2996:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2998:	89 8d       	ldd	r24, Y+25	; 0x19
    299a:	8a 95       	dec	r24
    299c:	f1 f7       	brne	.-4      	; 0x299a <GLCD_Data+0x1be>
    299e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    29a0:	a5 e3       	ldi	r26, 0x35	; 53
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e5 e3       	ldi	r30, 0x35	; 53
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8b 7f       	andi	r24, 0xFB	; 251
    29ac:	8c 93       	st	X, r24
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 ea       	ldi	r26, 0xA0	; 160
    29b4:	b0 e4       	ldi	r27, 0x40	; 64
    29b6:	8d 8b       	std	Y+21, r24	; 0x15
    29b8:	9e 8b       	std	Y+22, r25	; 0x16
    29ba:	af 8b       	std	Y+23, r26	; 0x17
    29bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	2b ea       	ldi	r18, 0xAB	; 171
    29c8:	3a ea       	ldi	r19, 0xAA	; 170
    29ca:	4a e2       	ldi	r20, 0x2A	; 42
    29cc:	50 e4       	ldi	r21, 0x40	; 64
    29ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	89 8b       	std	Y+17, r24	; 0x11
    29d8:	9a 8b       	std	Y+18, r25	; 0x12
    29da:	ab 8b       	std	Y+19, r26	; 0x13
    29dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29de:	69 89       	ldd	r22, Y+17	; 0x11
    29e0:	7a 89       	ldd	r23, Y+18	; 0x12
    29e2:	8b 89       	ldd	r24, Y+19	; 0x13
    29e4:	9c 89       	ldd	r25, Y+20	; 0x14
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	1c f4       	brge	.+6      	; 0x29fc <GLCD_Data+0x220>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	88 8b       	std	Y+16, r24	; 0x10
    29fa:	91 c0       	rjmp	.+290    	; 0x2b1e <GLCD_Data+0x342>
	else if (__tmp > 255)
    29fc:	69 89       	ldd	r22, Y+17	; 0x11
    29fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	53 e4       	ldi	r21, 0x43	; 67
    2a0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <GLCD_Data+0x23a>
    2a14:	7b c0       	rjmp	.+246    	; 0x2b0c <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a e7       	ldi	r20, 0x7A	; 122
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8c 87       	std	Y+12, r24	; 0x0c
    2a30:	9d 87       	std	Y+13, r25	; 0x0d
    2a32:	ae 87       	std	Y+14, r26	; 0x0e
    2a34:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a38:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	88 87       	std	Y+8, r24	; 0x08
    2a50:	99 87       	std	Y+9, r25	; 0x09
    2a52:	aa 87       	std	Y+10, r26	; 0x0a
    2a54:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a56:	68 85       	ldd	r22, Y+8	; 0x08
    2a58:	79 85       	ldd	r23, Y+9	; 0x09
    2a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <GLCD_Data+0x29c>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9f 83       	std	Y+7, r25	; 0x07
    2a74:	8e 83       	std	Y+6, r24	; 0x06
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    2a78:	68 85       	ldd	r22, Y+8	; 0x08
    2a7a:	79 85       	ldd	r23, Y+9	; 0x09
    2a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9f 83       	std	Y+7, r25	; 0x07
    2ab6:	8e 83       	std	Y+6, r24	; 0x06
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <GLCD_Data+0x2fc>
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9d 83       	std	Y+5, r25	; 0x05
    2ac0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <GLCD_Data+0x2ea>
    2aca:	9d 83       	std	Y+5, r25	; 0x05
    2acc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9f 83       	std	Y+7, r25	; 0x07
    2ad6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ada:	9f 81       	ldd	r25, Y+7	; 0x07
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <GLCD_Data+0x2de>
    2ae0:	24 c0       	rjmp	.+72     	; 0x2b2a <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	68 85       	ldd	r22, Y+8	; 0x08
    2ae4:	79 85       	ldd	r23, Y+9	; 0x09
    2ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9f 83       	std	Y+7, r25	; 0x07
    2af4:	8e 83       	std	Y+6, r24	; 0x06
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	9b 83       	std	Y+3, r25	; 0x03
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <GLCD_Data+0x326>
    2b06:	9b 83       	std	Y+3, r25	; 0x03
    2b08:	8a 83       	std	Y+2, r24	; 0x02
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b0c:	69 89       	ldd	r22, Y+17	; 0x11
    2b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	88 8b       	std	Y+16, r24	; 0x10
    2b1e:	88 89       	ldd	r24, Y+16	; 0x10
    2b20:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	8a 95       	dec	r24
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <GLCD_Data+0x348>
    2b28:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    2b2a:	e1 96       	adiw	r28, 0x31	; 49
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <GLCD_Init>:

void GLCD_Init()			/* GLCD initialize function */
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	2e 97       	sbiw	r28, 0x0e	; 14
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    2b50:	ea e3       	ldi	r30, 0x3A	; 58
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    2b58:	e4 e3       	ldi	r30, 0x34	; 52
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	8f ef       	ldi	r24, 0xFF	; 255
    2b5e:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    2b60:	a5 e3       	ldi	r26, 0x35	; 53
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e5 e3       	ldi	r30, 0x35	; 53
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 63       	ori	r24, 0x38	; 56
    2b6c:	8c 93       	st	X, r24
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	a0 ea       	ldi	r26, 0xA0	; 160
    2b74:	b1 e4       	ldi	r27, 0x41	; 65
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
    2b78:	9c 87       	std	Y+12, r25	; 0x0c
    2b7a:	ad 87       	std	Y+13, r26	; 0x0d
    2b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a ef       	ldi	r20, 0xFA	; 250
    2b8c:	54 e4       	ldi	r21, 0x44	; 68
    2b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8f 83       	std	Y+7, r24	; 0x07
    2b98:	98 87       	std	Y+8, r25	; 0x08
    2b9a:	a9 87       	std	Y+9, r26	; 0x09
    2b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <GLCD_Init+0x84>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	3f c0       	rjmp	.+126    	; 0x2c3e <GLCD_Init+0x102>
	else if (__tmp > 65535)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	4c f5       	brge	.+82     	; 0x2c2a <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <GLCD_Init+0xe4>
    2c02:	88 ec       	ldi	r24, 0xC8	; 200
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <GLCD_Init+0xd2>
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <GLCD_Init+0xc6>
    2c28:	14 c0       	rjmp	.+40     	; 0x2c52 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <GLCD_Init+0x10e>
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
    2c52:	8e e3       	ldi	r24, 0x3E	; 62
    2c54:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    2c58:	80 e4       	ldi	r24, 0x40	; 64
    2c5a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    2c5e:	88 eb       	ldi	r24, 0xB8	; 184
    2c60:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
    2c64:	80 ec       	ldi	r24, 0xC0	; 192
    2c66:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
    2c6a:	8f e3       	ldi	r24, 0x3F	; 63
    2c6c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
}
    2c70:	2e 96       	adiw	r28, 0x0e	; 14
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <GLCD_ClearAll>:

void GLCD_ClearAll()			/* GLCD all display clear function */
{
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <GLCD_ClearAll+0x6>
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <GLCD_ClearAll+0x8>
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <GLCD_ClearAll+0xa>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
	int i=0,j=0;
    2c90:	1e 82       	std	Y+6, r1	; 0x06
    2c92:	1d 82       	std	Y+5, r1	; 0x05
    2c94:	1c 82       	std	Y+4, r1	; 0x04
    2c96:	1b 82       	std	Y+3, r1	; 0x03
	/* Select both left & right half of display */
	Command_Port |= (1 << CS2);
    2c98:	a5 e3       	ldi	r26, 0x35	; 53
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e5 e3       	ldi	r30, 0x35	; 53
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	80 61       	ori	r24, 0x10	; 16
    2ca4:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS1);
    2ca6:	a5 e3       	ldi	r26, 0x35	; 53
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e5 e3       	ldi	r30, 0x35	; 53
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	87 7f       	andi	r24, 0xF7	; 247
    2cb2:	8c 93       	st	X, r24
	for(int q = 0; q < 2; q++)
    2cb4:	1a 82       	std	Y+2, r1	; 0x02
    2cb6:	19 82       	std	Y+1, r1	; 0x01
    2cb8:	38 c0       	rjmp	.+112    	; 0x2d2a <GLCD_ClearAll+0xa8>
	{


	for(i = 0; i < TotalPage; i++)
    2cba:	1e 82       	std	Y+6, r1	; 0x06
    2cbc:	1d 82       	std	Y+5, r1	; 0x05
    2cbe:	1d c0       	rjmp	.+58     	; 0x2cfa <GLCD_ClearAll+0x78>
	{
		GLCD_Command((0xB8) + i);
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	88 54       	subi	r24, 0x48	; 72
    2cc4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>

		for(j = 0; j < 64; j++)
    2cc8:	1c 82       	std	Y+4, r1	; 0x04
    2cca:	1b 82       	std	Y+3, r1	; 0x03
    2ccc:	0c c0       	rjmp	.+24     	; 0x2ce6 <GLCD_ClearAll+0x64>
		{
			GLCD_Command((0x40) + j);/* Increment page */
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	80 5c       	subi	r24, 0xC0	; 192
    2cd2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x00);	/* Write zeros to all 64 column */
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>

	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);

		for(j = 0; j < 64; j++)
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	80 34       	cpi	r24, 0x40	; 64
    2cec:	91 05       	cpc	r25, r1
    2cee:	7c f3       	brlt	.-34     	; 0x2cce <GLCD_ClearAll+0x4c>
	Command_Port &= ~(1 << CS1);
	for(int q = 0; q < 2; q++)
	{


	for(i = 0; i < TotalPage; i++)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	88 30       	cpi	r24, 0x08	; 8
    2d00:	91 05       	cpc	r25, r1
    2d02:	f4 f2       	brlt	.-68     	; 0x2cc0 <GLCD_ClearAll+0x3e>
		{
			GLCD_Command((0x40) + j);/* Increment page */
			GLCD_Data(0x00);	/* Write zeros to all 64 column */
		}
	}
	Command_Port |= (1 << CS1);
    2d04:	a5 e3       	ldi	r26, 0x35	; 53
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e5 e3       	ldi	r30, 0x35	; 53
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	88 60       	ori	r24, 0x08	; 8
    2d10:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    2d12:	a5 e3       	ldi	r26, 0x35	; 53
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e5 e3       	ldi	r30, 0x35	; 53
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8f 7e       	andi	r24, 0xEF	; 239
    2d1e:	8c 93       	st	X, r24
{
	int i=0,j=0;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS2);
	Command_Port &= ~(1 << CS1);
	for(int q = 0; q < 2; q++)
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	82 30       	cpi	r24, 0x02	; 2
    2d30:	91 05       	cpc	r25, r1
    2d32:	1c f2       	brlt	.-122    	; 0x2cba <GLCD_ClearAll+0x38>
		}
	}
	Command_Port |= (1 << CS1);
	Command_Port &= ~(1 << CS2);
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
    2d34:	80 e4       	ldi	r24, 0x40	; 64
    2d36:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
    2d3a:	88 eb       	ldi	r24, 0xB8	; 184
    2d3c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
}
    2d40:	26 96       	adiw	r28, 0x06	; 6
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
    2d52:	0f 93       	push	r16
    2d54:	1f 93       	push	r17
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	61 97       	sbiw	r28, 0x11	; 17
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	8f 87       	std	Y+15, r24	; 0x0f
    2d6c:	79 8b       	std	Y+17, r23	; 0x11
    2d6e:	68 8b       	std	Y+16, r22	; 0x10
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
    2d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d72:	88 2f       	mov	r24, r24
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	88 54       	subi	r24, 0x48	; 72
    2d78:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7a:	9a 87       	std	Y+10, r25	; 0x0a
    2d7c:	89 87       	std	Y+9, r24	; 0x09
	unsigned int Y_address = 0;
    2d7e:	18 86       	std	Y+8, r1	; 0x08
    2d80:	1f 82       	std	Y+7, r1	; 0x07
	float Page_inc = 0.5;
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a0 e0       	ldi	r26, 0x00	; 0
    2d88:	bf e3       	ldi	r27, 0x3F	; 63
    2d8a:	8b 83       	std	Y+3, r24	; 0x03
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	ad 83       	std	Y+5, r26	; 0x05
    2d90:	be 83       	std	Y+6, r27	; 0x06
	unsigned int FontWidth = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
	Command_Port |= (1 << CS1);	/* Select Left half of display */
    2d9a:	a5 e3       	ldi	r26, 0x35	; 53
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e5 e3       	ldi	r30, 0x35	; 53
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	88 60       	ori	r24, 0x08	; 8
    2da6:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    2da8:	a5 e3       	ldi	r26, 0x35	; 53
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e5 e3       	ldi	r30, 0x35	; 53
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	8f 7e       	andi	r24, 0xEF	; 239
    2db4:	8c 93       	st	X, r24

	GLCD_Command(Page);
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    2dbc:	1e 86       	std	Y+14, r1	; 0x0e
    2dbe:	1d 86       	std	Y+13, r1	; 0x0d
    2dc0:	e3 c1       	rjmp	.+966    	; 0x3188 <GLCD_String+0x436>
	{
		if (Y_address > (1024-(((page_no)*128))))
    2dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	88 e0       	ldi	r24, 0x08	; 8
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	82 1b       	sub	r24, r18
    2dce:	93 0b       	sbc	r25, r19
    2dd0:	96 95       	lsr	r25
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	88 27       	eor	r24, r24
    2dd6:	97 95       	ror	r25
    2dd8:	87 95       	ror	r24
    2dda:	9c 01       	movw	r18, r24
    2ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dde:	98 85       	ldd	r25, Y+8	; 0x08
    2de0:	28 17       	cp	r18, r24
    2de2:	39 07       	cpc	r19, r25
    2de4:	08 f4       	brcc	.+2      	; 0x2de8 <GLCD_String+0x96>
    2de6:	db c1       	rjmp	.+950    	; 0x319e <GLCD_String+0x44c>
		break;
		if (str[i]!=32)
    2de8:	28 89       	ldd	r18, Y+16	; 0x10
    2dea:	39 89       	ldd	r19, Y+17	; 0x11
    2dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df0:	f9 01       	movw	r30, r18
    2df2:	e8 0f       	add	r30, r24
    2df4:	f9 1f       	adc	r31, r25
    2df6:	80 81       	ld	r24, Z
    2df8:	80 32       	cpi	r24, 0x20	; 32
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <GLCD_String+0xac>
    2dfc:	84 c0       	rjmp	.+264    	; 0x2f06 <GLCD_String+0x1b4>
		{
			for (column=1; column<=FontWidth; column++)
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 87       	std	Y+12, r25	; 0x0c
    2e04:	8b 87       	std	Y+11, r24	; 0x0b
    2e06:	77 c0       	rjmp	.+238    	; 0x2ef6 <GLCD_String+0x1a4>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    2e08:	2f 81       	ldd	r18, Y+7	; 0x07
    2e0a:	38 85       	ldd	r19, Y+8	; 0x08
    2e0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e10:	89 01       	movw	r16, r18
    2e12:	08 0f       	add	r16, r24
    2e14:	19 1f       	adc	r17, r25
    2e16:	6b 81       	ldd	r22, Y+3	; 0x03
    2e18:	7c 81       	ldd	r23, Y+4	; 0x04
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	96 95       	lsr	r25
    2e3c:	98 2f       	mov	r25, r24
    2e3e:	88 27       	eor	r24, r24
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	08 17       	cp	r16, r24
    2e46:	19 07       	cpc	r17, r25
    2e48:	09 f0       	breq	.+2      	; 0x2e4c <GLCD_String+0xfa>
    2e4a:	50 c0       	rjmp	.+160    	; 0x2eec <GLCD_String+0x19a>
				{
					if (column == FontWidth)
    2e4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <GLCD_String+0x10a>
    2e5a:	55 c0       	rjmp	.+170    	; 0x2f06 <GLCD_String+0x1b4>
					break;
					GLCD_Command(0x40);
    2e5c:	80 e4       	ldi	r24, 0x40	; 64
    2e5e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
					Y_address = Y_address + column;
    2e62:	2f 81       	ldd	r18, Y+7	; 0x07
    2e64:	38 85       	ldd	r19, Y+8	; 0x08
    2e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e6a:	82 0f       	add	r24, r18
    2e6c:	93 1f       	adc	r25, r19
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    2e70:	8f 83       	std	Y+7, r24	; 0x07
					Command_Port ^= (1 << CS1);
    2e72:	a5 e3       	ldi	r26, 0x35	; 53
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e5 e3       	ldi	r30, 0x35	; 53
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	90 81       	ld	r25, Z
    2e7c:	88 e0       	ldi	r24, 0x08	; 8
    2e7e:	89 27       	eor	r24, r25
    2e80:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2e82:	a5 e3       	ldi	r26, 0x35	; 53
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e5 e3       	ldi	r30, 0x35	; 53
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	90 81       	ld	r25, Z
    2e8c:	80 e1       	ldi	r24, 0x10	; 16
    2e8e:	89 27       	eor	r24, r25
    2e90:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	cc 01       	movw	r24, r24
    2e98:	a0 e0       	ldi	r26, 0x00	; 0
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	2b 81       	ldd	r18, Y+3	; 0x03
    2eae:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb0:	4d 81       	ldd	r20, Y+5	; 0x05
    2eb2:	5e 81       	ldd	r21, Y+6	; 0x06
    2eb4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	bc 01       	movw	r22, r24
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    2ecc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ece:	7c 81       	ldd	r23, Y+4	; 0x04
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8b 83       	std	Y+3, r24	; 0x03
    2ee6:	9c 83       	std	Y+4, r25	; 0x04
    2ee8:	ad 83       	std	Y+5, r26	; 0x05
    2eea:	be 83       	std	Y+6, r27	; 0x06
	{
		if (Y_address > (1024-(((page_no)*128))))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
    2eec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	9c 87       	std	Y+12, r25	; 0x0c
    2ef4:	8b 87       	std	Y+11, r24	; 0x0b
    2ef6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ef8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	82 17       	cp	r24, r18
    2f00:	93 07       	cpc	r25, r19
    2f02:	08 f0       	brcs	.+2      	; 0x2f06 <GLCD_String+0x1b4>
    2f04:	81 cf       	rjmp	.-254    	; 0x2e08 <GLCD_String+0xb6>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128))))
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	82 1b       	sub	r24, r18
    2f12:	93 0b       	sbc	r25, r19
    2f14:	96 95       	lsr	r25
    2f16:	98 2f       	mov	r25, r24
    2f18:	88 27       	eor	r24, r24
    2f1a:	97 95       	ror	r25
    2f1c:	87 95       	ror	r24
    2f1e:	9c 01       	movw	r18, r24
    2f20:	8f 81       	ldd	r24, Y+7	; 0x07
    2f22:	98 85       	ldd	r25, Y+8	; 0x08
    2f24:	28 17       	cp	r18, r24
    2f26:	39 07       	cpc	r19, r25
    2f28:	08 f4       	brcc	.+2      	; 0x2f2c <GLCD_String+0x1da>
    2f2a:	39 c1       	rjmp	.+626    	; 0x319e <GLCD_String+0x44c>
		break;
		if((((str[i]-32))+4)==0 || str[i]==32)
    2f2c:	28 89       	ldd	r18, Y+16	; 0x10
    2f2e:	39 89       	ldd	r19, Y+17	; 0x11
    2f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f34:	f9 01       	movw	r30, r18
    2f36:	e8 0f       	add	r30, r24
    2f38:	f9 1f       	adc	r31, r25
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8c 31       	cpi	r24, 0x1C	; 28
    2f3e:	59 f0       	breq	.+22     	; 0x2f56 <GLCD_String+0x204>
    2f40:	28 89       	ldd	r18, Y+16	; 0x10
    2f42:	39 89       	ldd	r19, Y+17	; 0x11
    2f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f48:	f9 01       	movw	r30, r18
    2f4a:	e8 0f       	add	r30, r24
    2f4c:	f9 1f       	adc	r31, r25
    2f4e:	80 81       	ld	r24, Z
    2f50:	80 32       	cpi	r24, 0x20	; 32
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <GLCD_String+0x204>
    2f54:	65 c0       	rjmp	.+202    	; 0x3020 <GLCD_String+0x2ce>
		{
			for(column=0; column<FontWidth; column++)
    2f56:	1c 86       	std	Y+12, r1	; 0x0c
    2f58:	1b 86       	std	Y+11, r1	; 0x0b
    2f5a:	59 c0       	rjmp	.+178    	; 0x300e <GLCD_String+0x2bc>
			{
				GLCD_Data(str[i]-32);
    2f5c:	28 89       	ldd	r18, Y+16	; 0x10
    2f5e:	39 89       	ldd	r19, Y+17	; 0x11
    2f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f64:	f9 01       	movw	r30, r18
    2f66:	e8 0f       	add	r30, r24
    2f68:	f9 1f       	adc	r31, r25
    2f6a:	80 81       	ld	r24, Z
    2f6c:	80 52       	subi	r24, 0x20	; 32
    2f6e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
				if((Y_address+1)%64==0)
    2f72:	8f 81       	ldd	r24, Y+7	; 0x07
    2f74:	98 85       	ldd	r25, Y+8	; 0x08
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	8f 73       	andi	r24, 0x3F	; 63
    2f7a:	90 70       	andi	r25, 0x00	; 0
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	e9 f5       	brne	.+122    	; 0x2ffa <GLCD_String+0x2a8>
				{
					Command_Port ^= (1 << CS1);
    2f80:	a5 e3       	ldi	r26, 0x35	; 53
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e5 e3       	ldi	r30, 0x35	; 53
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	90 81       	ld	r25, Z
    2f8a:	88 e0       	ldi	r24, 0x08	; 8
    2f8c:	89 27       	eor	r24, r25
    2f8e:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    2f90:	a5 e3       	ldi	r26, 0x35	; 53
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e5 e3       	ldi	r30, 0x35	; 53
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	90 81       	ld	r25, Z
    2f9a:	80 e1       	ldi	r24, 0x10	; 16
    2f9c:	89 27       	eor	r24, r25
    2f9e:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa4:	cc 01       	movw	r24, r24
    2fa6:	a0 e0       	ldi	r26, 0x00	; 0
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	2b 81       	ldd	r18, Y+3	; 0x03
    2fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbe:	4d 81       	ldd	r20, Y+5	; 0x05
    2fc0:	5e 81       	ldd	r21, Y+6	; 0x06
    2fc2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    2fda:	6b 81       	ldd	r22, Y+3	; 0x03
    2fdc:	7c 81       	ldd	r23, Y+4	; 0x04
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	ad 83       	std	Y+5, r26	; 0x05
    2ff8:	be 83       	std	Y+6, r27	; 0x06
				}
				Y_address++;
    2ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffc:	98 85       	ldd	r25, Y+8	; 0x08
    2ffe:	01 96       	adiw	r24, 0x01	; 1
    3000:	98 87       	std	Y+8, r25	; 0x08
    3002:	8f 83       	std	Y+7, r24	; 0x07
		}
		if (Y_address>(1024-(((page_no)*128))))
		break;
		if((((str[i]-32))+4)==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    3004:	8b 85       	ldd	r24, Y+11	; 0x0b
    3006:	9c 85       	ldd	r25, Y+12	; 0x0c
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	8b 87       	std	Y+11, r24	; 0x0b
    300e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3010:	3c 85       	ldd	r19, Y+12	; 0x0c
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	9a 81       	ldd	r25, Y+2	; 0x02
    3016:	28 17       	cp	r18, r24
    3018:	39 07       	cpc	r19, r25
    301a:	08 f4       	brcc	.+2      	; 0x301e <GLCD_String+0x2cc>
    301c:	9f cf       	rjmp	.-194    	; 0x2f5c <GLCD_String+0x20a>
    301e:	af c0       	rjmp	.+350    	; 0x317e <GLCD_String+0x42c>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    3020:	1c 86       	std	Y+12, r1	; 0x0c
    3022:	1b 86       	std	Y+11, r1	; 0x0b
    3024:	59 c0       	rjmp	.+178    	; 0x30d8 <GLCD_String+0x386>
			{
				GLCD_Data(str[i]-32);
    3026:	28 89       	ldd	r18, Y+16	; 0x10
    3028:	39 89       	ldd	r19, Y+17	; 0x11
    302a:	8d 85       	ldd	r24, Y+13	; 0x0d
    302c:	9e 85       	ldd	r25, Y+14	; 0x0e
    302e:	f9 01       	movw	r30, r18
    3030:	e8 0f       	add	r30, r24
    3032:	f9 1f       	adc	r31, r25
    3034:	80 81       	ld	r24, Z
    3036:	80 52       	subi	r24, 0x20	; 32
    3038:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
				if((Y_address+1)%64==0)
    303c:	8f 81       	ldd	r24, Y+7	; 0x07
    303e:	98 85       	ldd	r25, Y+8	; 0x08
    3040:	01 96       	adiw	r24, 0x01	; 1
    3042:	8f 73       	andi	r24, 0x3F	; 63
    3044:	90 70       	andi	r25, 0x00	; 0
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	e9 f5       	brne	.+122    	; 0x30c4 <GLCD_String+0x372>
				{
					Command_Port ^= (1 << CS1);
    304a:	a5 e3       	ldi	r26, 0x35	; 53
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e5 e3       	ldi	r30, 0x35	; 53
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	90 81       	ld	r25, Z
    3054:	88 e0       	ldi	r24, 0x08	; 8
    3056:	89 27       	eor	r24, r25
    3058:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    305a:	a5 e3       	ldi	r26, 0x35	; 53
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e5 e3       	ldi	r30, 0x35	; 53
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	90 81       	ld	r25, Z
    3064:	80 e1       	ldi	r24, 0x10	; 16
    3066:	89 27       	eor	r24, r25
    3068:	8c 93       	st	X, r24
					GLCD_Command((Page+Page_inc));
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	cc 01       	movw	r24, r24
    3070:	a0 e0       	ldi	r26, 0x00	; 0
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	2b 81       	ldd	r18, Y+3	; 0x03
    3086:	3c 81       	ldd	r19, Y+4	; 0x04
    3088:	4d 81       	ldd	r20, Y+5	; 0x05
    308a:	5e 81       	ldd	r21, Y+6	; 0x06
    308c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    30a4:	6b 81       	ldd	r22, Y+3	; 0x03
    30a6:	7c 81       	ldd	r23, Y+4	; 0x04
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8b 83       	std	Y+3, r24	; 0x03
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	ad 83       	std	Y+5, r26	; 0x05
    30c2:	be 83       	std	Y+6, r27	; 0x06
				}
				Y_address++;
    30c4:	8f 81       	ldd	r24, Y+7	; 0x07
    30c6:	98 85       	ldd	r25, Y+8	; 0x08
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	98 87       	std	Y+8, r25	; 0x08
    30cc:	8f 83       	std	Y+7, r24	; 0x07
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    30ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    30d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	9c 87       	std	Y+12, r25	; 0x0c
    30d6:	8b 87       	std	Y+11, r24	; 0x0b
    30d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    30da:	3c 85       	ldd	r19, Y+12	; 0x0c
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	28 17       	cp	r18, r24
    30e2:	39 07       	cpc	r19, r25
    30e4:	08 f4       	brcc	.+2      	; 0x30e8 <GLCD_String+0x396>
    30e6:	9f cf       	rjmp	.-194    	; 0x3026 <GLCD_String+0x2d4>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			Y_address++;
    30ee:	8f 81       	ldd	r24, Y+7	; 0x07
    30f0:	98 85       	ldd	r25, Y+8	; 0x08
    30f2:	01 96       	adiw	r24, 0x01	; 1
    30f4:	98 87       	std	Y+8, r25	; 0x08
    30f6:	8f 83       	std	Y+7, r24	; 0x07
			if((Y_address)%64 == 0)
    30f8:	8f 81       	ldd	r24, Y+7	; 0x07
    30fa:	98 85       	ldd	r25, Y+8	; 0x08
    30fc:	8f 73       	andi	r24, 0x3F	; 63
    30fe:	90 70       	andi	r25, 0x00	; 0
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	e9 f5       	brne	.+122    	; 0x317e <GLCD_String+0x42c>
			{
				Command_Port ^= (1 << CS1);
    3104:	a5 e3       	ldi	r26, 0x35	; 53
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e5 e3       	ldi	r30, 0x35	; 53
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	90 81       	ld	r25, Z
    310e:	88 e0       	ldi	r24, 0x08	; 8
    3110:	89 27       	eor	r24, r25
    3112:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    3114:	a5 e3       	ldi	r26, 0x35	; 53
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e5 e3       	ldi	r30, 0x35	; 53
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	90 81       	ld	r25, Z
    311e:	80 e1       	ldi	r24, 0x10	; 16
    3120:	89 27       	eor	r24, r25
    3122:	8c 93       	st	X, r24
				GLCD_Command((Page+Page_inc));
    3124:	89 85       	ldd	r24, Y+9	; 0x09
    3126:	9a 85       	ldd	r25, Y+10	; 0x0a
    3128:	cc 01       	movw	r24, r24
    312a:	a0 e0       	ldi	r26, 0x00	; 0
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	2b 81       	ldd	r18, Y+3	; 0x03
    3140:	3c 81       	ldd	r19, Y+4	; 0x04
    3142:	4d 81       	ldd	r20, Y+5	; 0x05
    3144:	5e 81       	ldd	r21, Y+6	; 0x06
    3146:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    315e:	6b 81       	ldd	r22, Y+3	; 0x03
    3160:	7c 81       	ldd	r23, Y+4	; 0x04
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	5f e3       	ldi	r21, 0x3F	; 63
    316e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	8b 83       	std	Y+3, r24	; 0x03
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	ad 83       	std	Y+5, r26	; 0x05
    317c:	be 83       	std	Y+6, r27	; 0x06
	unsigned int FontWidth = 1;
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);

	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	9e 87       	std	Y+14, r25	; 0x0e
    3186:	8d 87       	std	Y+13, r24	; 0x0d
    3188:	28 89       	ldd	r18, Y+16	; 0x10
    318a:	39 89       	ldd	r19, Y+17	; 0x11
    318c:	8d 85       	ldd	r24, Y+13	; 0x0d
    318e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3190:	f9 01       	movw	r30, r18
    3192:	e8 0f       	add	r30, r24
    3194:	f9 1f       	adc	r31, r25
    3196:	80 81       	ld	r24, Z
    3198:	88 23       	and	r24, r24
    319a:	09 f0       	breq	.+2      	; 0x319e <GLCD_String+0x44c>
    319c:	12 ce       	rjmp	.-988    	; 0x2dc2 <GLCD_String+0x70>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
    319e:	80 e4       	ldi	r24, 0x40	; 64
    31a0:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
}
    31a4:	61 96       	adiw	r28, 0x11	; 17
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	08 95       	ret

000031ba <direction>:
void direction(dir d)
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	0f 92       	push	r0
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	89 83       	std	Y+1, r24	; 0x01
	if(d == left)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	88 23       	and	r24, r24
    31ca:	79 f4       	brne	.+30     	; 0x31ea <direction+0x30>
	{
		Command_Port |= (1 << CS2);
    31cc:	a5 e3       	ldi	r26, 0x35	; 53
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e5 e3       	ldi	r30, 0x35	; 53
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	80 61       	ori	r24, 0x10	; 16
    31d8:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS1);
    31da:	a5 e3       	ldi	r26, 0x35	; 53
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e5 e3       	ldi	r30, 0x35	; 53
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	87 7f       	andi	r24, 0xF7	; 247
    31e6:	8c 93       	st	X, r24
    31e8:	0e c0       	rjmp	.+28     	; 0x3206 <direction+0x4c>
	}
	else
	{
		Command_Port |= (1 << CS1);
    31ea:	a5 e3       	ldi	r26, 0x35	; 53
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e5 e3       	ldi	r30, 0x35	; 53
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	88 60       	ori	r24, 0x08	; 8
    31f6:	8c 93       	st	X, r24
		Command_Port &= ~(1 << CS2);
    31f8:	a5 e3       	ldi	r26, 0x35	; 53
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e5 e3       	ldi	r30, 0x35	; 53
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	8f 7e       	andi	r24, 0xEF	; 239
    3204:	8c 93       	st	X, r24
	}
}
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <cursor_place>:
void cursor_place(int x, int y, dir d)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <cursor_place+0x6>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <cursor_place+0x8>
    3216:	0f 92       	push	r0
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	7c 83       	std	Y+4, r23	; 0x04
    3222:	6b 83       	std	Y+3, r22	; 0x03
    3224:	4d 83       	std	Y+5, r20	; 0x05
	direction(d);
    3226:	8d 81       	ldd	r24, Y+5	; 0x05
    3228:	0e 94 dd 18 	call	0x31ba	; 0x31ba <direction>
	GLCD_Command((0x40) + x);
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	80 5c       	subi	r24, 0xC0	; 192
    3230:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command((0xB8) + y);
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	88 54       	subi	r24, 0x48	; 72
    3238:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <write_me_char>:

int write_me_char(char c, int x, int y, dir d)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	2a 97       	sbiw	r28, 0x0a	; 10
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	8b 83       	std	Y+3, r24	; 0x03
    3262:	7d 83       	std	Y+5, r23	; 0x05
    3264:	6c 83       	std	Y+4, r22	; 0x04
    3266:	5f 83       	std	Y+7, r21	; 0x07
    3268:	4e 83       	std	Y+6, r20	; 0x06
    326a:	28 87       	std	Y+8, r18	; 0x08
	int moves = 0;
    326c:	1a 82       	std	Y+2, r1	; 0x02
    326e:	19 82       	std	Y+1, r1	; 0x01
	direction(d);
    3270:	88 85       	ldd	r24, Y+8	; 0x08
    3272:	0e 94 dd 18 	call	0x31ba	; 0x31ba <direction>

	GLCD_Command((0xB8) + y);
    3276:	8e 81       	ldd	r24, Y+6	; 0x06
    3278:	88 54       	subi	r24, 0x48	; 72
    327a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command((0x40) + x);
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	80 5c       	subi	r24, 0xC0	; 192
    3282:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>

	switch (c)
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	3a 87       	std	Y+10, r19	; 0x0a
    328e:	29 87       	std	Y+9, r18	; 0x09
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	8b 34       	cpi	r24, 0x4B	; 75
    3296:	91 05       	cpc	r25, r1
    3298:	09 f4       	brne	.+2      	; 0x329c <write_me_char+0x50>
    329a:	8b c0       	rjmp	.+278    	; 0x33b2 <write_me_char+0x166>
    329c:	29 85       	ldd	r18, Y+9	; 0x09
    329e:	3a 85       	ldd	r19, Y+10	; 0x0a
    32a0:	2c 34       	cpi	r18, 0x4C	; 76
    32a2:	31 05       	cpc	r19, r1
    32a4:	b4 f5       	brge	.+108    	; 0x3312 <write_me_char+0xc6>
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	85 34       	cpi	r24, 0x45	; 69
    32ac:	91 05       	cpc	r25, r1
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <write_me_char+0x66>
    32b0:	9b c1       	rjmp	.+822    	; 0x35e8 <write_me_char+0x39c>
    32b2:	29 85       	ldd	r18, Y+9	; 0x09
    32b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    32b6:	26 34       	cpi	r18, 0x46	; 70
    32b8:	31 05       	cpc	r19, r1
    32ba:	fc f4       	brge	.+62     	; 0x32fa <write_me_char+0xae>
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	8a 33       	cpi	r24, 0x3A	; 58
    32c2:	91 05       	cpc	r25, r1
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <write_me_char+0x7c>
    32c6:	ec c2       	rjmp	.+1496   	; 0x38a0 <write_me_char+0x654>
    32c8:	29 85       	ldd	r18, Y+9	; 0x09
    32ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    32cc:	2b 33       	cpi	r18, 0x3B	; 59
    32ce:	31 05       	cpc	r19, r1
    32d0:	6c f4       	brge	.+26     	; 0x32ec <write_me_char+0xa0>
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d6:	80 32       	cpi	r24, 0x20	; 32
    32d8:	91 05       	cpc	r25, r1
    32da:	09 f4       	brne	.+2      	; 0x32de <write_me_char+0x92>
    32dc:	ea c2       	rjmp	.+1492   	; 0x38b2 <write_me_char+0x666>
    32de:	29 85       	ldd	r18, Y+9	; 0x09
    32e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    32e2:	25 32       	cpi	r18, 0x25	; 37
    32e4:	31 05       	cpc	r19, r1
    32e6:	09 f4       	brne	.+2      	; 0x32ea <write_me_char+0x9e>
    32e8:	70 c2       	rjmp	.+1248   	; 0x37ca <write_me_char+0x57e>
    32ea:	eb c2       	rjmp	.+1494   	; 0x38c2 <write_me_char+0x676>
    32ec:	89 85       	ldd	r24, Y+9	; 0x09
    32ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f0:	84 34       	cpi	r24, 0x44	; 68
    32f2:	91 05       	cpc	r25, r1
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <write_me_char+0xac>
    32f6:	c3 c0       	rjmp	.+390    	; 0x347e <write_me_char+0x232>
    32f8:	e4 c2       	rjmp	.+1480   	; 0x38c2 <write_me_char+0x676>
    32fa:	29 85       	ldd	r18, Y+9	; 0x09
    32fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    32fe:	26 34       	cpi	r18, 0x46	; 70
    3300:	31 05       	cpc	r19, r1
    3302:	91 f1       	breq	.+100    	; 0x3368 <write_me_char+0x11c>
    3304:	89 85       	ldd	r24, Y+9	; 0x09
    3306:	9a 85       	ldd	r25, Y+10	; 0x0a
    3308:	88 34       	cpi	r24, 0x48	; 72
    330a:	91 05       	cpc	r25, r1
    330c:	09 f4       	brne	.+2      	; 0x3310 <write_me_char+0xc4>
    330e:	84 c0       	rjmp	.+264    	; 0x3418 <write_me_char+0x1cc>
    3310:	d8 c2       	rjmp	.+1456   	; 0x38c2 <write_me_char+0x676>
    3312:	29 85       	ldd	r18, Y+9	; 0x09
    3314:	3a 85       	ldd	r19, Y+10	; 0x0a
    3316:	29 35       	cpi	r18, 0x59	; 89
    3318:	31 05       	cpc	r19, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <write_me_char+0xd2>
    331c:	24 c1       	rjmp	.+584    	; 0x3566 <write_me_char+0x31a>
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	8a 35       	cpi	r24, 0x5A	; 90
    3324:	91 05       	cpc	r25, r1
    3326:	6c f4       	brge	.+26     	; 0x3342 <write_me_char+0xf6>
    3328:	29 85       	ldd	r18, Y+9	; 0x09
    332a:	3a 85       	ldd	r19, Y+10	; 0x0a
    332c:	2c 34       	cpi	r18, 0x4C	; 76
    332e:	31 05       	cpc	r19, r1
    3330:	09 f4       	brne	.+2      	; 0x3334 <write_me_char+0xe8>
    3332:	8d c1       	rjmp	.+794    	; 0x364e <write_me_char+0x402>
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	84 35       	cpi	r24, 0x54	; 84
    333a:	91 05       	cpc	r25, r1
    333c:	09 f4       	brne	.+2      	; 0x3340 <write_me_char+0xf4>
    333e:	d2 c0       	rjmp	.+420    	; 0x34e4 <write_me_char+0x298>
    3340:	c0 c2       	rjmp	.+1408   	; 0x38c2 <write_me_char+0x676>
    3342:	29 85       	ldd	r18, Y+9	; 0x09
    3344:	3a 85       	ldd	r19, Y+10	; 0x0a
    3346:	25 37       	cpi	r18, 0x75	; 117
    3348:	31 05       	cpc	r19, r1
    334a:	09 f4       	brne	.+2      	; 0x334e <write_me_char+0x102>
    334c:	e6 c1       	rjmp	.+972    	; 0x371a <write_me_char+0x4ce>
    334e:	89 85       	ldd	r24, Y+9	; 0x09
    3350:	9a 85       	ldd	r25, Y+10	; 0x0a
    3352:	8a 37       	cpi	r24, 0x7A	; 122
    3354:	91 05       	cpc	r25, r1
    3356:	09 f4       	brne	.+2      	; 0x335a <write_me_char+0x10e>
    3358:	13 c2       	rjmp	.+1062   	; 0x3780 <write_me_char+0x534>
    335a:	29 85       	ldd	r18, Y+9	; 0x09
    335c:	3a 85       	ldd	r19, Y+10	; 0x0a
    335e:	23 36       	cpi	r18, 0x63	; 99
    3360:	31 05       	cpc	r19, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <write_me_char+0x11a>
    3364:	a7 c1       	rjmp	.+846    	; 0x36b4 <write_me_char+0x468>
    3366:	ad c2       	rjmp	.+1370   	; 0x38c2 <write_me_char+0x676>
	{
		case 'F':
			GLCD_Data(0x7f);
    3368:	8f e7       	ldi	r24, 0x7F	; 127
    336a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	89 0f       	add	r24, r25
    337e:	80 5c       	subi	r24, 0xC0	; 192
    3380:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x9);//0000 1001
    3384:	89 e0       	ldi	r24, 0x09	; 9
    3386:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	01 96       	adiw	r24, 0x01	; 1
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	89 0f       	add	r24, r25
    339a:	80 5c       	subi	r24, 0xC0	; 192
    339c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x9);
    33a0:	89 e0       	ldi	r24, 0x09	; 9
    33a2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	01 96       	adiw	r24, 0x01	; 1
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01
    33b0:	88 c2       	rjmp	.+1296   	; 0x38c2 <write_me_char+0x676>
			break;
		case 'K':
			GLCD_Data(0x7f);
    33b2:	8f e7       	ldi	r24, 0x7F	; 127
    33b4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	89 0f       	add	r24, r25
    33c8:	80 5c       	subi	r24, 0xC0	; 192
    33ca:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x14);//0000 1001
    33ce:	84 e1       	ldi	r24, 0x14	; 20
    33d0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	9a 81       	ldd	r25, Y+2	; 0x02
    33d8:	01 96       	adiw	r24, 0x01	; 1
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    33de:	9c 81       	ldd	r25, Y+4	; 0x04
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	89 0f       	add	r24, r25
    33e4:	80 5c       	subi	r24, 0xC0	; 192
    33e6:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x22);
    33ea:	82 e2       	ldi	r24, 0x22	; 34
    33ec:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    33fa:	9c 81       	ldd	r25, Y+4	; 0x04
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	89 0f       	add	r24, r25
    3400:	80 5c       	subi	r24, 0xC0	; 192
    3402:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);
    3406:	81 e4       	ldi	r24, 0x41	; 65
    3408:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	55 c2       	rjmp	.+1194   	; 0x38c2 <write_me_char+0x676>
			break;
		case 'H':
			GLCD_Data(0x7f);
    3418:	8f e7       	ldi	r24, 0x7F	; 127
    341a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	89 0f       	add	r24, r25
    342e:	80 5c       	subi	r24, 0xC0	; 192
    3430:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x8);//0000 1001
    3434:	88 e0       	ldi	r24, 0x08	; 8
    3436:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	89 0f       	add	r24, r25
    344a:	80 5c       	subi	r24, 0xC0	; 192
    344c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x8);//0000 1001
    3450:	88 e0       	ldi	r24, 0x08	; 8
    3452:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	9a 81       	ldd	r25, Y+2	; 0x02
    345a:	01 96       	adiw	r24, 0x01	; 1
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	89 0f       	add	r24, r25
    3466:	80 5c       	subi	r24, 0xC0	; 192
    3468:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x7f);
    346c:	8f e7       	ldi	r24, 0x7F	; 127
    346e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	22 c2       	rjmp	.+1092   	; 0x38c2 <write_me_char+0x676>
			break;
		case 'D':
			GLCD_Data(0x7f);
    347e:	8f e7       	ldi	r24, 0x7F	; 127
    3480:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	9a 81       	ldd	r25, Y+2	; 0x02
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	89 0f       	add	r24, r25
    3494:	80 5c       	subi	r24, 0xC0	; 192
    3496:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);//0000 1001
    349a:	81 e4       	ldi	r24, 0x41	; 65
    349c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	9a 83       	std	Y+2, r25	; 0x02
    34a8:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	89 0f       	add	r24, r25
    34b0:	80 5c       	subi	r24, 0xC0	; 192
    34b2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);//0000 1001
    34b6:	81 e4       	ldi	r24, 0x41	; 65
    34b8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	01 96       	adiw	r24, 0x01	; 1
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    34c6:	9c 81       	ldd	r25, Y+4	; 0x04
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	89 0f       	add	r24, r25
    34cc:	80 5c       	subi	r24, 0xC0	; 192
    34ce:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x3E);
    34d2:	8e e3       	ldi	r24, 0x3E	; 62
    34d4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	ef c1       	rjmp	.+990    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'T':
			GLCD_Data(0x01);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	89 0f       	add	r24, r25
    34fa:	80 5c       	subi	r24, 0xC0	; 192
    34fc:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x01);//0000 1001
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	01 96       	adiw	r24, 0x01	; 1
    350c:	9a 83       	std	Y+2, r25	; 0x02
    350e:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	89 0f       	add	r24, r25
    3516:	80 5c       	subi	r24, 0xC0	; 192
    3518:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x7f);
    351c:	8f e7       	ldi	r24, 0x7F	; 127
    351e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	01 96       	adiw	r24, 0x01	; 1
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    352c:	9c 81       	ldd	r25, Y+4	; 0x04
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	89 0f       	add	r24, r25
    3532:	80 5c       	subi	r24, 0xC0	; 192
    3534:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x01);//0000 1001
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	89 0f       	add	r24, r25
    354e:	80 5c       	subi	r24, 0xC0	; 192
    3550:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x01);//0000 1001
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	9a 83       	std	Y+2, r25	; 0x02
    3562:	89 83       	std	Y+1, r24	; 0x01
    3564:	ae c1       	rjmp	.+860    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'Y':
			GLCD_Data(0x03);
    3566:	83 e0       	ldi	r24, 0x03	; 3
    3568:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	9a 81       	ldd	r25, Y+2	; 0x02
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3576:	9c 81       	ldd	r25, Y+4	; 0x04
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	89 0f       	add	r24, r25
    357c:	80 5c       	subi	r24, 0xC0	; 192
    357e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x04);//0000 1001
    3582:	84 e0       	ldi	r24, 0x04	; 4
    3584:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	89 0f       	add	r24, r25
    3598:	80 5c       	subi	r24, 0xC0	; 192
    359a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x78);
    359e:	88 e7       	ldi	r24, 0x78	; 120
    35a0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    35ae:	9c 81       	ldd	r25, Y+4	; 0x04
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	89 0f       	add	r24, r25
    35b4:	80 5c       	subi	r24, 0xC0	; 192
    35b6:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x04);//0000 1001
    35ba:	84 e0       	ldi	r24, 0x04	; 4
    35bc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	01 96       	adiw	r24, 0x01	; 1
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    35ca:	9c 81       	ldd	r25, Y+4	; 0x04
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	89 0f       	add	r24, r25
    35d0:	80 5c       	subi	r24, 0xC0	; 192
    35d2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x03);//0000 1001
    35d6:	83 e0       	ldi	r24, 0x03	; 3
    35d8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	9a 81       	ldd	r25, Y+2	; 0x02
    35e0:	01 96       	adiw	r24, 0x01	; 1
    35e2:	9a 83       	std	Y+2, r25	; 0x02
    35e4:	89 83       	std	Y+1, r24	; 0x01
    35e6:	6d c1       	rjmp	.+730    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'E':
			GLCD_Data(0x7f);
    35e8:	8f e7       	ldi	r24, 0x7F	; 127
    35ea:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	9a 83       	std	Y+2, r25	; 0x02
    35f6:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    35f8:	9c 81       	ldd	r25, Y+4	; 0x04
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	89 0f       	add	r24, r25
    35fe:	80 5c       	subi	r24, 0xC0	; 192
    3600:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);//0000 1001
    3604:	89 e4       	ldi	r24, 0x49	; 73
    3606:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	01 96       	adiw	r24, 0x01	; 1
    3610:	9a 83       	std	Y+2, r25	; 0x02
    3612:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3614:	9c 81       	ldd	r25, Y+4	; 0x04
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	89 0f       	add	r24, r25
    361a:	80 5c       	subi	r24, 0xC0	; 192
    361c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3620:	89 e4       	ldi	r24, 0x49	; 73
    3622:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	89 0f       	add	r24, r25
    3636:	80 5c       	subi	r24, 0xC0	; 192
    3638:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);//0000 1001
    363c:	89 e4       	ldi	r24, 0x49	; 73
    363e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	9a 81       	ldd	r25, Y+2	; 0x02
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	3a c1       	rjmp	.+628    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'L':
			GLCD_Data(0x7f);
    364e:	8f e7       	ldi	r24, 0x7F	; 127
    3650:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	9a 81       	ldd	r25, Y+2	; 0x02
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    365e:	9c 81       	ldd	r25, Y+4	; 0x04
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	89 0f       	add	r24, r25
    3664:	80 5c       	subi	r24, 0xC0	; 192
    3666:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);//0000 1001
    366a:	80 e4       	ldi	r24, 0x40	; 64
    366c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	9a 83       	std	Y+2, r25	; 0x02
    3678:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    367a:	9c 81       	ldd	r25, Y+4	; 0x04
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	89 0f       	add	r24, r25
    3680:	80 5c       	subi	r24, 0xC0	; 192
    3682:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);
    3686:	80 e4       	ldi	r24, 0x40	; 64
    3688:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	89 0f       	add	r24, r25
    369c:	80 5c       	subi	r24, 0xC0	; 192
    369e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);//0000 1001
    36a2:	80 e4       	ldi	r24, 0x40	; 64
    36a4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	9a 81       	ldd	r25, Y+2	; 0x02
    36ac:	01 96       	adiw	r24, 0x01	; 1
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	07 c1       	rjmp	.+526    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'c':
			GLCD_Data(0x3c);
    36b4:	8c e3       	ldi	r24, 0x3C	; 60
    36b6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	01 96       	adiw	r24, 0x01	; 1
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    36c4:	9c 81       	ldd	r25, Y+4	; 0x04
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	89 0f       	add	r24, r25
    36ca:	80 5c       	subi	r24, 0xC0	; 192
    36cc:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x42);//0000 1001
    36d0:	82 e4       	ldi	r24, 0x42	; 66
    36d2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    36e0:	9c 81       	ldd	r25, Y+4	; 0x04
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	89 0f       	add	r24, r25
    36e6:	80 5c       	subi	r24, 0xC0	; 192
    36e8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x42);
    36ec:	82 e4       	ldi	r24, 0x42	; 66
    36ee:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	9a 81       	ldd	r25, Y+2	; 0x02
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    36fc:	9c 81       	ldd	r25, Y+4	; 0x04
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	89 0f       	add	r24, r25
    3702:	80 5c       	subi	r24, 0xC0	; 192
    3704:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x42);//0000 1001
    3708:	82 e4       	ldi	r24, 0x42	; 66
    370a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	01 96       	adiw	r24, 0x01	; 1
    3714:	9a 83       	std	Y+2, r25	; 0x02
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	d4 c0       	rjmp	.+424    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'u':
			GLCD_Data(0x7e);
    371a:	8e e7       	ldi	r24, 0x7E	; 126
    371c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01

			GLCD_Command((0x40) +x+moves);
    372a:	9c 81       	ldd	r25, Y+4	; 0x04
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	89 0f       	add	r24, r25
    3730:	80 5c       	subi	r24, 0xC0	; 192
    3732:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);//0000 1001
    3736:	80 e4       	ldi	r24, 0x40	; 64
    3738:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	89 0f       	add	r24, r25
    374c:	80 5c       	subi	r24, 0xC0	; 192
    374e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);//0000 1001
    3752:	80 e4       	ldi	r24, 0x40	; 64
    3754:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	9a 83       	std	Y+2, r25	; 0x02
    3760:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	89 0f       	add	r24, r25
    3768:	80 5c       	subi	r24, 0xC0	; 192
    376a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x7e);
    376e:	8e e7       	ldi	r24, 0x7E	; 126
    3770:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	01 96       	adiw	r24, 0x01	; 1
    377a:	9a 83       	std	Y+2, r25	; 0x02
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	a1 c0       	rjmp	.+322    	; 0x38c2 <write_me_char+0x676>
			break;
		case 'z':
			GLCD_Data(0x64);
    3780:	84 e6       	ldi	r24, 0x64	; 100
    3782:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	9a 81       	ldd	r25, Y+2	; 0x02
    378a:	01 96       	adiw	r24, 0x01	; 1
    378c:	9a 83       	std	Y+2, r25	; 0x02
    378e:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	89 0f       	add	r24, r25
    3796:	80 5c       	subi	r24, 0xC0	; 192
    3798:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x54);
    379c:	84 e5       	ldi	r24, 0x54	; 84
    379e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	01 96       	adiw	r24, 0x01	; 1
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    37ac:	9c 81       	ldd	r25, Y+4	; 0x04
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	89 0f       	add	r24, r25
    37b2:	80 5c       	subi	r24, 0xC0	; 192
    37b4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x4c);
    37b8:	8c e4       	ldi	r24, 0x4C	; 76
    37ba:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	9a 81       	ldd	r25, Y+2	; 0x02
    37c2:	01 96       	adiw	r24, 0x01	; 1
    37c4:	9a 83       	std	Y+2, r25	; 0x02
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	7c c0       	rjmp	.+248    	; 0x38c2 <write_me_char+0x676>
			break;
		case '%':
			GLCD_Data(0x86);
    37ca:	86 e8       	ldi	r24, 0x86	; 134
    37cc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	9a 83       	std	Y+2, r25	; 0x02
    37d8:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    37da:	9c 81       	ldd	r25, Y+4	; 0x04
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	89 0f       	add	r24, r25
    37e0:	80 5c       	subi	r24, 0xC0	; 192
    37e2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    37e6:	89 e4       	ldi	r24, 0x49	; 73
    37e8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	01 96       	adiw	r24, 0x01	; 1
    37f2:	9a 83       	std	Y+2, r25	; 0x02
    37f4:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    37f6:	9c 81       	ldd	r25, Y+4	; 0x04
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	89 0f       	add	r24, r25
    37fc:	80 5c       	subi	r24, 0xC0	; 192
    37fe:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x29);
    3802:	89 e2       	ldi	r24, 0x29	; 41
    3804:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
    380c:	01 96       	adiw	r24, 0x01	; 1
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3812:	9c 81       	ldd	r25, Y+4	; 0x04
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	89 0f       	add	r24, r25
    3818:	80 5c       	subi	r24, 0xC0	; 192
    381a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x16);
    381e:	86 e1       	ldi	r24, 0x16	; 22
    3820:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	9a 81       	ldd	r25, Y+2	; 0x02
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    382e:	9c 81       	ldd	r25, Y+4	; 0x04
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	89 0f       	add	r24, r25
    3834:	80 5c       	subi	r24, 0xC0	; 192
    3836:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x68);
    383a:	88 e6       	ldi	r24, 0x68	; 104
    383c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	01 96       	adiw	r24, 0x01	; 1
    3846:	9a 83       	std	Y+2, r25	; 0x02
    3848:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	89 0f       	add	r24, r25
    3850:	80 5c       	subi	r24, 0xC0	; 192
    3852:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x94);
    3856:	84 e9       	ldi	r24, 0x94	; 148
    3858:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	01 96       	adiw	r24, 0x01	; 1
    3862:	9a 83       	std	Y+2, r25	; 0x02
    3864:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3866:	9c 81       	ldd	r25, Y+4	; 0x04
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	89 0f       	add	r24, r25
    386c:	80 5c       	subi	r24, 0xC0	; 192
    386e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x92);
    3872:	82 e9       	ldi	r24, 0x92	; 146
    3874:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	9a 81       	ldd	r25, Y+2	; 0x02
    387c:	01 96       	adiw	r24, 0x01	; 1
    387e:	9a 83       	std	Y+2, r25	; 0x02
    3880:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	89 0f       	add	r24, r25
    3888:	80 5c       	subi	r24, 0xC0	; 192
    388a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x61);
    388e:	81 e6       	ldi	r24, 0x61	; 97
    3890:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	9a 81       	ldd	r25, Y+2	; 0x02
    3898:	01 96       	adiw	r24, 0x01	; 1
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	11 c0       	rjmp	.+34     	; 0x38c2 <write_me_char+0x676>
			break;
		case ':':
			GLCD_Data(0x24); //0100 0100
    38a0:	84 e2       	ldi	r24, 0x24	; 36
    38a2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	9a 81       	ldd	r25, Y+2	; 0x02
    38aa:	01 96       	adiw	r24, 0x01	; 1
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
    38b0:	08 c0       	rjmp	.+16     	; 0x38c2 <write_me_char+0x676>
			break;
		case ' ':
			GLCD_Data(0x0); //0100 0100
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	01 96       	adiw	r24, 0x01	; 1
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	moves++;
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	9a 81       	ldd	r25, Y+2	; 0x02
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	9a 83       	std	Y+2, r25	; 0x02
    38ca:	89 83       	std	Y+1, r24	; 0x01
	return moves;
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02

}
    38d0:	2a 96       	adiw	r28, 0x0a	; 10
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <write_me_num>:
int write_me_num(int c, int x, int y, dir d)
{
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	2b 97       	sbiw	r28, 0x0b	; 11
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	9c 83       	std	Y+4, r25	; 0x04
    38f8:	8b 83       	std	Y+3, r24	; 0x03
    38fa:	7e 83       	std	Y+6, r23	; 0x06
    38fc:	6d 83       	std	Y+5, r22	; 0x05
    38fe:	58 87       	std	Y+8, r21	; 0x08
    3900:	4f 83       	std	Y+7, r20	; 0x07
    3902:	29 87       	std	Y+9, r18	; 0x09
	int moves = 0;
    3904:	1a 82       	std	Y+2, r1	; 0x02
    3906:	19 82       	std	Y+1, r1	; 0x01
	direction(d);
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	0e 94 dd 18 	call	0x31ba	; 0x31ba <direction>

	GLCD_Command((0xB8) + y);
    390e:	8f 81       	ldd	r24, Y+7	; 0x07
    3910:	88 54       	subi	r24, 0x48	; 72
    3912:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command((0x40) + x);
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	80 5c       	subi	r24, 0xC0	; 192
    391a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>

	switch (c)
    391e:	8b 81       	ldd	r24, Y+3	; 0x03
    3920:	9c 81       	ldd	r25, Y+4	; 0x04
    3922:	9b 87       	std	Y+11, r25	; 0x0b
    3924:	8a 87       	std	Y+10, r24	; 0x0a
    3926:	8a 85       	ldd	r24, Y+10	; 0x0a
    3928:	9b 85       	ldd	r25, Y+11	; 0x0b
    392a:	84 30       	cpi	r24, 0x04	; 4
    392c:	91 05       	cpc	r25, r1
    392e:	09 f4       	brne	.+2      	; 0x3932 <write_me_num+0x50>
    3930:	3d c1       	rjmp	.+634    	; 0x3bac <write_me_num+0x2ca>
    3932:	8a 85       	ldd	r24, Y+10	; 0x0a
    3934:	9b 85       	ldd	r25, Y+11	; 0x0b
    3936:	85 30       	cpi	r24, 0x05	; 5
    3938:	91 05       	cpc	r25, r1
    393a:	ec f4       	brge	.+58     	; 0x3976 <write_me_num+0x94>
    393c:	8a 85       	ldd	r24, Y+10	; 0x0a
    393e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	91 05       	cpc	r25, r1
    3944:	09 f4       	brne	.+2      	; 0x3948 <write_me_num+0x66>
    3946:	6f c0       	rjmp	.+222    	; 0x3a26 <write_me_num+0x144>
    3948:	8a 85       	ldd	r24, Y+10	; 0x0a
    394a:	9b 85       	ldd	r25, Y+11	; 0x0b
    394c:	82 30       	cpi	r24, 0x02	; 2
    394e:	91 05       	cpc	r25, r1
    3950:	2c f4       	brge	.+10     	; 0x395c <write_me_num+0x7a>
    3952:	8a 85       	ldd	r24, Y+10	; 0x0a
    3954:	9b 85       	ldd	r25, Y+11	; 0x0b
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	99 f1       	breq	.+102    	; 0x39c0 <write_me_num+0xde>
    395a:	ad c2       	rjmp	.+1370   	; 0x3eb6 <write_me_num+0x5d4>
    395c:	8a 85       	ldd	r24, Y+10	; 0x0a
    395e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3960:	82 30       	cpi	r24, 0x02	; 2
    3962:	91 05       	cpc	r25, r1
    3964:	09 f4       	brne	.+2      	; 0x3968 <write_me_num+0x86>
    3966:	a0 c0       	rjmp	.+320    	; 0x3aa8 <write_me_num+0x1c6>
    3968:	8a 85       	ldd	r24, Y+10	; 0x0a
    396a:	9b 85       	ldd	r25, Y+11	; 0x0b
    396c:	83 30       	cpi	r24, 0x03	; 3
    396e:	91 05       	cpc	r25, r1
    3970:	09 f4       	brne	.+2      	; 0x3974 <write_me_num+0x92>
    3972:	db c0       	rjmp	.+438    	; 0x3b2a <write_me_num+0x248>
    3974:	a0 c2       	rjmp	.+1344   	; 0x3eb6 <write_me_num+0x5d4>
    3976:	8a 85       	ldd	r24, Y+10	; 0x0a
    3978:	9b 85       	ldd	r25, Y+11	; 0x0b
    397a:	87 30       	cpi	r24, 0x07	; 7
    397c:	91 05       	cpc	r25, r1
    397e:	09 f4       	brne	.+2      	; 0x3982 <write_me_num+0xa0>
    3980:	d8 c1       	rjmp	.+944    	; 0x3d32 <write_me_num+0x450>
    3982:	8a 85       	ldd	r24, Y+10	; 0x0a
    3984:	9b 85       	ldd	r25, Y+11	; 0x0b
    3986:	88 30       	cpi	r24, 0x08	; 8
    3988:	91 05       	cpc	r25, r1
    398a:	6c f4       	brge	.+26     	; 0x39a6 <write_me_num+0xc4>
    398c:	8a 85       	ldd	r24, Y+10	; 0x0a
    398e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3990:	85 30       	cpi	r24, 0x05	; 5
    3992:	91 05       	cpc	r25, r1
    3994:	09 f4       	brne	.+2      	; 0x3998 <write_me_num+0xb6>
    3996:	4b c1       	rjmp	.+662    	; 0x3c2e <write_me_num+0x34c>
    3998:	8a 85       	ldd	r24, Y+10	; 0x0a
    399a:	9b 85       	ldd	r25, Y+11	; 0x0b
    399c:	86 30       	cpi	r24, 0x06	; 6
    399e:	91 05       	cpc	r25, r1
    39a0:	09 f4       	brne	.+2      	; 0x39a4 <write_me_num+0xc2>
    39a2:	86 c1       	rjmp	.+780    	; 0x3cb0 <write_me_num+0x3ce>
    39a4:	88 c2       	rjmp	.+1296   	; 0x3eb6 <write_me_num+0x5d4>
    39a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    39aa:	88 30       	cpi	r24, 0x08	; 8
    39ac:	91 05       	cpc	r25, r1
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <write_me_num+0xd0>
    39b0:	01 c2       	rjmp	.+1026   	; 0x3db4 <write_me_num+0x4d2>
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b6:	89 30       	cpi	r24, 0x09	; 9
    39b8:	91 05       	cpc	r25, r1
    39ba:	09 f4       	brne	.+2      	; 0x39be <write_me_num+0xdc>
    39bc:	3c c2       	rjmp	.+1144   	; 0x3e36 <write_me_num+0x554>
    39be:	7b c2       	rjmp	.+1270   	; 0x3eb6 <write_me_num+0x5d4>
	{
		case 0:
			GLCD_Data(0x3E);
    39c0:	8e e3       	ldi	r24, 0x3E	; 62
    39c2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    39d0:	9d 81       	ldd	r25, Y+5	; 0x05
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	89 0f       	add	r24, r25
    39d6:	80 5c       	subi	r24, 0xC0	; 192
    39d8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);//0000 1001
    39dc:	81 e4       	ldi	r24, 0x41	; 65
    39de:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    39ec:	9d 81       	ldd	r25, Y+5	; 0x05
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	89 0f       	add	r24, r25
    39f2:	80 5c       	subi	r24, 0xC0	; 192
    39f4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);//0000 1001
    39f8:	81 e4       	ldi	r24, 0x41	; 65
    39fa:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3a08:	9d 81       	ldd	r25, Y+5	; 0x05
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	89 0f       	add	r24, r25
    3a0e:	80 5c       	subi	r24, 0xC0	; 192
    3a10:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x3E);
    3a14:	8e e3       	ldi	r24, 0x3E	; 62
    3a16:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	01 96       	adiw	r24, 0x01	; 1
    3a20:	9a 83       	std	Y+2, r25	; 0x02
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	48 c2       	rjmp	.+1168   	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 1:
			GLCD_Data(0);
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	9a 83       	std	Y+2, r25	; 0x02
    3a34:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3a36:	9d 81       	ldd	r25, Y+5	; 0x05
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	89 0f       	add	r24, r25
    3a3c:	80 5c       	subi	r24, 0xC0	; 192
    3a3e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x42);
    3a42:	82 e4       	ldi	r24, 0x42	; 66
    3a44:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	9a 83       	std	Y+2, r25	; 0x02
    3a50:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3a52:	9d 81       	ldd	r25, Y+5	; 0x05
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	89 0f       	add	r24, r25
    3a58:	80 5c       	subi	r24, 0xC0	; 192
    3a5a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x7f);
    3a5e:	8f e7       	ldi	r24, 0x7F	; 127
    3a60:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	9a 81       	ldd	r25, Y+2	; 0x02
    3a68:	01 96       	adiw	r24, 0x01	; 1
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	89 0f       	add	r24, r25
    3a74:	80 5c       	subi	r24, 0xC0	; 192
    3a76:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x40);
    3a7a:	80 e4       	ldi	r24, 0x40	; 64
    3a7c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	9a 81       	ldd	r25, Y+2	; 0x02
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	89 0f       	add	r24, r25
    3a90:	80 5c       	subi	r24, 0xC0	; 192
    3a92:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0);
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	9a 83       	std	Y+2, r25	; 0x02
    3aa4:	89 83       	std	Y+1, r24	; 0x01
    3aa6:	07 c2       	rjmp	.+1038   	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 2:
			GLCD_Data(0x42);
    3aa8:	82 e4       	ldi	r24, 0x42	; 66
    3aaa:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	89 0f       	add	r24, r25
    3abe:	80 5c       	subi	r24, 0xC0	; 192
    3ac0:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x61);
    3ac4:	81 e6       	ldi	r24, 0x61	; 97
    3ac6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	01 96       	adiw	r24, 0x01	; 1
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	89 0f       	add	r24, r25
    3ada:	80 5c       	subi	r24, 0xC0	; 192
    3adc:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x51);
    3ae0:	81 e5       	ldi	r24, 0x51	; 81
    3ae2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aea:	01 96       	adiw	r24, 0x01	; 1
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3af0:	9d 81       	ldd	r25, Y+5	; 0x05
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	89 0f       	add	r24, r25
    3af6:	80 5c       	subi	r24, 0xC0	; 192
    3af8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3afc:	89 e4       	ldi	r24, 0x49	; 73
    3afe:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	9a 81       	ldd	r25, Y+2	; 0x02
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	89 0f       	add	r24, r25
    3b12:	80 5c       	subi	r24, 0xC0	; 192
    3b14:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x46);
    3b18:	86 e4       	ldi	r24, 0x46	; 70
    3b1a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	9a 83       	std	Y+2, r25	; 0x02
    3b26:	89 83       	std	Y+1, r24	; 0x01
    3b28:	c6 c1       	rjmp	.+908    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 3:
			GLCD_Data(0x21);
    3b2a:	81 e2       	ldi	r24, 0x21	; 33
    3b2c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	9a 81       	ldd	r25, Y+2	; 0x02
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	9a 83       	std	Y+2, r25	; 0x02
    3b38:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	89 0f       	add	r24, r25
    3b40:	80 5c       	subi	r24, 0xC0	; 192
    3b42:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x41);
    3b46:	81 e4       	ldi	r24, 0x41	; 65
    3b48:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	9a 83       	std	Y+2, r25	; 0x02
    3b54:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	89 0f       	add	r24, r25
    3b5c:	80 5c       	subi	r24, 0xC0	; 192
    3b5e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x45);
    3b62:	85 e4       	ldi	r24, 0x45	; 69
    3b64:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3b72:	9d 81       	ldd	r25, Y+5	; 0x05
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	89 0f       	add	r24, r25
    3b78:	80 5c       	subi	r24, 0xC0	; 192
    3b7a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x4b);
    3b7e:	8b e4       	ldi	r24, 0x4B	; 75
    3b80:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	9a 81       	ldd	r25, Y+2	; 0x02
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	89 0f       	add	r24, r25
    3b94:	80 5c       	subi	r24, 0xC0	; 192
    3b96:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x31);
    3b9a:	81 e3       	ldi	r24, 0x31	; 49
    3b9c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	01 96       	adiw	r24, 0x01	; 1
    3ba6:	9a 83       	std	Y+2, r25	; 0x02
    3ba8:	89 83       	std	Y+1, r24	; 0x01
    3baa:	85 c1       	rjmp	.+778    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 4:
			GLCD_Data(0x18);
    3bac:	88 e1       	ldi	r24, 0x18	; 24
    3bae:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb6:	01 96       	adiw	r24, 0x01	; 1
    3bb8:	9a 83       	std	Y+2, r25	; 0x02
    3bba:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	89 0f       	add	r24, r25
    3bc2:	80 5c       	subi	r24, 0xC0	; 192
    3bc4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x14);
    3bc8:	84 e1       	ldi	r24, 0x14	; 20
    3bca:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	01 96       	adiw	r24, 0x01	; 1
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	89 0f       	add	r24, r25
    3bde:	80 5c       	subi	r24, 0xC0	; 192
    3be0:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x12);
    3be4:	82 e1       	ldi	r24, 0x12	; 18
    3be6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	01 96       	adiw	r24, 0x01	; 1
    3bf0:	9a 83       	std	Y+2, r25	; 0x02
    3bf2:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	89 0f       	add	r24, r25
    3bfa:	80 5c       	subi	r24, 0xC0	; 192
    3bfc:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x7f);
    3c00:	8f e7       	ldi	r24, 0x7F	; 127
    3c02:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	9a 83       	std	Y+2, r25	; 0x02
    3c0e:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3c10:	9d 81       	ldd	r25, Y+5	; 0x05
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	89 0f       	add	r24, r25
    3c16:	80 5c       	subi	r24, 0xC0	; 192
    3c18:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x10);
    3c1c:	80 e1       	ldi	r24, 0x10	; 16
    3c1e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	9a 83       	std	Y+2, r25	; 0x02
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    3c2c:	44 c1       	rjmp	.+648    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 5:
			GLCD_Data(0x27);
    3c2e:	87 e2       	ldi	r24, 0x27	; 39
    3c30:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	89 0f       	add	r24, r25
    3c44:	80 5c       	subi	r24, 0xC0	; 192
    3c46:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x45);
    3c4a:	85 e4       	ldi	r24, 0x45	; 69
    3c4c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	9a 81       	ldd	r25, Y+2	; 0x02
    3c54:	01 96       	adiw	r24, 0x01	; 1
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	89 0f       	add	r24, r25
    3c60:	80 5c       	subi	r24, 0xC0	; 192
    3c62:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x45);
    3c66:	85 e4       	ldi	r24, 0x45	; 69
    3c68:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c70:	01 96       	adiw	r24, 0x01	; 1
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3c76:	9d 81       	ldd	r25, Y+5	; 0x05
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	89 0f       	add	r24, r25
    3c7c:	80 5c       	subi	r24, 0xC0	; 192
    3c7e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x45);
    3c82:	85 e4       	ldi	r24, 0x45	; 69
    3c84:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	9a 83       	std	Y+2, r25	; 0x02
    3c90:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3c92:	9d 81       	ldd	r25, Y+5	; 0x05
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	89 0f       	add	r24, r25
    3c98:	80 5c       	subi	r24, 0xC0	; 192
    3c9a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x39);
    3c9e:	89 e3       	ldi	r24, 0x39	; 57
    3ca0:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca8:	01 96       	adiw	r24, 0x01	; 1
    3caa:	9a 83       	std	Y+2, r25	; 0x02
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	03 c1       	rjmp	.+518    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 6:
			GLCD_Data(0x3c);
    3cb0:	8c e3       	ldi	r24, 0x3C	; 60
    3cb2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	89 0f       	add	r24, r25
    3cc6:	80 5c       	subi	r24, 0xC0	; 192
    3cc8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x4a);
    3ccc:	8a e4       	ldi	r24, 0x4A	; 74
    3cce:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	89 0f       	add	r24, r25
    3ce2:	80 5c       	subi	r24, 0xC0	; 192
    3ce4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3ce8:	89 e4       	ldi	r24, 0x49	; 73
    3cea:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf2:	01 96       	adiw	r24, 0x01	; 1
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
    3cf6:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	89 0f       	add	r24, r25
    3cfe:	80 5c       	subi	r24, 0xC0	; 192
    3d00:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3d04:	89 e4       	ldi	r24, 0x49	; 73
    3d06:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	9a 83       	std	Y+2, r25	; 0x02
    3d12:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3d14:	9d 81       	ldd	r25, Y+5	; 0x05
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	89 0f       	add	r24, r25
    3d1a:	80 5c       	subi	r24, 0xC0	; 192
    3d1c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x30);
    3d20:	80 e3       	ldi	r24, 0x30	; 48
    3d22:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	9a 83       	std	Y+2, r25	; 0x02
    3d2e:	89 83       	std	Y+1, r24	; 0x01
    3d30:	c2 c0       	rjmp	.+388    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 7:
			GLCD_Data(0x1);
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3d42:	9d 81       	ldd	r25, Y+5	; 0x05
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	89 0f       	add	r24, r25
    3d48:	80 5c       	subi	r24, 0xC0	; 192
    3d4a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x71);
    3d4e:	81 e7       	ldi	r24, 0x71	; 113
    3d50:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	9a 81       	ldd	r25, Y+2	; 0x02
    3d58:	01 96       	adiw	r24, 0x01	; 1
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	89 0f       	add	r24, r25
    3d64:	80 5c       	subi	r24, 0xC0	; 192
    3d66:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x9);
    3d6a:	89 e0       	ldi	r24, 0x09	; 9
    3d6c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	9a 81       	ldd	r25, Y+2	; 0x02
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	9a 83       	std	Y+2, r25	; 0x02
    3d78:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	89 0f       	add	r24, r25
    3d80:	80 5c       	subi	r24, 0xC0	; 192
    3d82:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x5);
    3d86:	85 e0       	ldi	r24, 0x05	; 5
    3d88:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3d96:	9d 81       	ldd	r25, Y+5	; 0x05
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	89 0f       	add	r24, r25
    3d9c:	80 5c       	subi	r24, 0xC0	; 192
    3d9e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x3);
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	01 96       	adiw	r24, 0x01	; 1
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	81 c0       	rjmp	.+258    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 8:
			GLCD_Data(0x36);
    3db4:	86 e3       	ldi	r24, 0x36	; 54
    3db6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	9a 83       	std	Y+2, r25	; 0x02
    3dc2:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	89 0f       	add	r24, r25
    3dca:	80 5c       	subi	r24, 0xC0	; 192
    3dcc:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3dd0:	89 e4       	ldi	r24, 0x49	; 73
    3dd2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	9a 83       	std	Y+2, r25	; 0x02
    3dde:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3de0:	9d 81       	ldd	r25, Y+5	; 0x05
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	89 0f       	add	r24, r25
    3de6:	80 5c       	subi	r24, 0xC0	; 192
    3de8:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3dec:	89 e4       	ldi	r24, 0x49	; 73
    3dee:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	01 96       	adiw	r24, 0x01	; 1
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	89 0f       	add	r24, r25
    3e02:	80 5c       	subi	r24, 0xC0	; 192
    3e04:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3e08:	89 e4       	ldi	r24, 0x49	; 73
    3e0a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	9a 81       	ldd	r25, Y+2	; 0x02
    3e12:	01 96       	adiw	r24, 0x01	; 1
    3e14:	9a 83       	std	Y+2, r25	; 0x02
    3e16:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3e18:	9d 81       	ldd	r25, Y+5	; 0x05
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	89 0f       	add	r24, r25
    3e1e:	80 5c       	subi	r24, 0xC0	; 192
    3e20:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x36);
    3e24:	86 e3       	ldi	r24, 0x36	; 54
    3e26:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2e:	01 96       	adiw	r24, 0x01	; 1
    3e30:	9a 83       	std	Y+2, r25	; 0x02
    3e32:	89 83       	std	Y+1, r24	; 0x01
    3e34:	40 c0       	rjmp	.+128    	; 0x3eb6 <write_me_num+0x5d4>
			break;
		case 9:
			GLCD_Data(0x6);
    3e36:	86 e0       	ldi	r24, 0x06	; 6
    3e38:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e40:	01 96       	adiw	r24, 0x01	; 1
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3e46:	9d 81       	ldd	r25, Y+5	; 0x05
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	89 0f       	add	r24, r25
    3e4c:	80 5c       	subi	r24, 0xC0	; 192
    3e4e:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3e52:	89 e4       	ldi	r24, 0x49	; 73
    3e54:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5c:	01 96       	adiw	r24, 0x01	; 1
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3e62:	9d 81       	ldd	r25, Y+5	; 0x05
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	89 0f       	add	r24, r25
    3e68:	80 5c       	subi	r24, 0xC0	; 192
    3e6a:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x49);
    3e6e:	89 e4       	ldi	r24, 0x49	; 73
    3e70:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	9a 81       	ldd	r25, Y+2	; 0x02
    3e78:	01 96       	adiw	r24, 0x01	; 1
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	89 0f       	add	r24, r25
    3e84:	80 5c       	subi	r24, 0xC0	; 192
    3e86:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x29);
    3e8a:	89 e2       	ldi	r24, 0x29	; 41
    3e8c:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	9a 81       	ldd	r25, Y+2	; 0x02
    3e94:	01 96       	adiw	r24, 0x01	; 1
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 83       	std	Y+1, r24	; 0x01
			GLCD_Command((0x40) +x+moves);
    3e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	89 0f       	add	r24, r25
    3ea0:	80 5c       	subi	r24, 0xC0	; 192
    3ea2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
			GLCD_Data(0x1e);
    3ea6:	8e e1       	ldi	r24, 0x1E	; 30
    3ea8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
			moves++;
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	moves++;
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	9a 83       	std	Y+2, r25	; 0x02
    3ebe:	89 83       	std	Y+1, r24	; 0x01
	return moves;
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	9a 81       	ldd	r25, Y+2	; 0x02

}
    3ec4:	2b 96       	adiw	r28, 0x0b	; 11
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	cf 91       	pop	r28
    3ed2:	df 91       	pop	r29
    3ed4:	08 95       	ret

00003ed6 <present_num>:

int present_num(int num, int x, int y, dir direction)
{
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	29 97       	sbiw	r28, 0x09	; 9
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61
    3eea:	9c 83       	std	Y+4, r25	; 0x04
    3eec:	8b 83       	std	Y+3, r24	; 0x03
    3eee:	7e 83       	std	Y+6, r23	; 0x06
    3ef0:	6d 83       	std	Y+5, r22	; 0x05
    3ef2:	58 87       	std	Y+8, r21	; 0x08
    3ef4:	4f 83       	std	Y+7, r20	; 0x07
    3ef6:	29 87       	std	Y+9, r18	; 0x09
	int moves = 0;
    3ef8:	1a 82       	std	Y+2, r1	; 0x02
    3efa:	19 82       	std	Y+1, r1	; 0x01
	if(num/10 == 0)
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	9c 81       	ldd	r25, Y+4	; 0x04
    3f00:	09 96       	adiw	r24, 0x09	; 9
    3f02:	83 31       	cpi	r24, 0x13	; 19
    3f04:	91 05       	cpc	r25, r1
    3f06:	90 f4       	brcc	.+36     	; 0x3f2c <present_num+0x56>
	{
		moves += write_me_num(num, x, y, direction);
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f0e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f10:	4f 81       	ldd	r20, Y+7	; 0x07
    3f12:	58 85       	ldd	r21, Y+8	; 0x08
    3f14:	b9 01       	movw	r22, r18
    3f16:	29 85       	ldd	r18, Y+9	; 0x09
    3f18:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    3f1c:	9c 01       	movw	r18, r24
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
    3f2a:	76 c0       	rjmp	.+236    	; 0x4018 <present_num+0x142>
	}
	else if(num/100 == 1)
    3f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f30:	84 56       	subi	r24, 0x64	; 100
    3f32:	90 40       	sbci	r25, 0x00	; 0
    3f34:	84 36       	cpi	r24, 0x64	; 100
    3f36:	91 05       	cpc	r25, r1
    3f38:	e0 f5       	brcc	.+120    	; 0x3fb2 <present_num+0xdc>
	{
		moves += write_me_num(1, x, y, direction);
    3f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    3f3e:	4f 81       	ldd	r20, Y+7	; 0x07
    3f40:	58 85       	ldd	r21, Y+8	; 0x08
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	b9 01       	movw	r22, r18
    3f48:	29 85       	ldd	r18, Y+9	; 0x09
    3f4a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    3f4e:	9c 01       	movw	r18, r24
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	9a 81       	ldd	r25, Y+2	; 0x02
    3f54:	82 0f       	add	r24, r18
    3f56:	93 1f       	adc	r25, r19
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
		moves += write_me_num(0, x+moves, y, direction);
    3f5c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f5e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	28 0f       	add	r18, r24
    3f66:	39 1f       	adc	r19, r25
    3f68:	4f 81       	ldd	r20, Y+7	; 0x07
    3f6a:	58 85       	ldd	r21, Y+8	; 0x08
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	b9 01       	movw	r22, r18
    3f72:	29 85       	ldd	r18, Y+9	; 0x09
    3f74:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    3f78:	9c 01       	movw	r18, r24
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	82 0f       	add	r24, r18
    3f80:	93 1f       	adc	r25, r19
    3f82:	9a 83       	std	Y+2, r25	; 0x02
    3f84:	89 83       	std	Y+1, r24	; 0x01
		moves += write_me_num(0, x+moves, y, direction);
    3f86:	2d 81       	ldd	r18, Y+5	; 0x05
    3f88:	3e 81       	ldd	r19, Y+6	; 0x06
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8e:	28 0f       	add	r18, r24
    3f90:	39 1f       	adc	r19, r25
    3f92:	4f 81       	ldd	r20, Y+7	; 0x07
    3f94:	58 85       	ldd	r21, Y+8	; 0x08
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	b9 01       	movw	r22, r18
    3f9c:	29 85       	ldd	r18, Y+9	; 0x09
    3f9e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    3fa2:	9c 01       	movw	r18, r24
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa8:	82 0f       	add	r24, r18
    3faa:	93 1f       	adc	r25, r19
    3fac:	9a 83       	std	Y+2, r25	; 0x02
    3fae:	89 83       	std	Y+1, r24	; 0x01
    3fb0:	33 c0       	rjmp	.+102    	; 0x4018 <present_num+0x142>
	}
	else
	{
		moves += write_me_num(num/10, x, y, direction);
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	2a e0       	ldi	r18, 0x0A	; 10
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	b9 01       	movw	r22, r18
    3fbc:	0e 94 24 22 	call	0x4448	; 0x4448 <__divmodhi4>
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	2d 81       	ldd	r18, Y+5	; 0x05
    3fc4:	3e 81       	ldd	r19, Y+6	; 0x06
    3fc6:	4f 81       	ldd	r20, Y+7	; 0x07
    3fc8:	58 85       	ldd	r21, Y+8	; 0x08
    3fca:	b9 01       	movw	r22, r18
    3fcc:	29 85       	ldd	r18, Y+9	; 0x09
    3fce:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    3fd2:	9c 01       	movw	r18, r24
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd8:	82 0f       	add	r24, r18
    3fda:	93 1f       	adc	r25, r19
    3fdc:	9a 83       	std	Y+2, r25	; 0x02
    3fde:	89 83       	std	Y+1, r24	; 0x01
		moves += write_me_num(num%10, x+moves, y, direction);
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe4:	2a e0       	ldi	r18, 0x0A	; 10
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	b9 01       	movw	r22, r18
    3fea:	0e 94 24 22 	call	0x4448	; 0x4448 <__divmodhi4>
    3fee:	bc 01       	movw	r22, r24
    3ff0:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff2:	3e 81       	ldd	r19, Y+6	; 0x06
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff8:	28 0f       	add	r18, r24
    3ffa:	39 1f       	adc	r19, r25
    3ffc:	4f 81       	ldd	r20, Y+7	; 0x07
    3ffe:	58 85       	ldd	r21, Y+8	; 0x08
    4000:	cb 01       	movw	r24, r22
    4002:	b9 01       	movw	r22, r18
    4004:	29 85       	ldd	r18, Y+9	; 0x09
    4006:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <write_me_num>
    400a:	9c 01       	movw	r18, r24
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	82 0f       	add	r24, r18
    4012:	93 1f       	adc	r25, r19
    4014:	9a 83       	std	Y+2, r25	; 0x02
    4016:	89 83       	std	Y+1, r24	; 0x01
	}
	return moves;
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    401c:	29 96       	adiw	r28, 0x09	; 9
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <line>:


int line(axis a, int x, int y)
{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	29 97       	sbiw	r28, 0x09	; 9
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	8b 83       	std	Y+3, r24	; 0x03
    4044:	7d 83       	std	Y+5, r23	; 0x05
    4046:	6c 83       	std	Y+4, r22	; 0x04
    4048:	5f 83       	std	Y+7, r21	; 0x07
    404a:	4e 83       	std	Y+6, r20	; 0x06
	int moves = 0;
    404c:	1a 82       	std	Y+2, r1	; 0x02
    404e:	19 82       	std	Y+1, r1	; 0x01

	GLCD_Command((0xB8) + y);
    4050:	8e 81       	ldd	r24, Y+6	; 0x06
    4052:	88 54       	subi	r24, 0x48	; 72
    4054:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	GLCD_Command((0x40) + x);
    4058:	8c 81       	ldd	r24, Y+4	; 0x04
    405a:	80 5c       	subi	r24, 0xC0	; 192
    405c:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
	switch(a)
    4060:	8b 81       	ldd	r24, Y+3	; 0x03
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	39 87       	std	Y+9, r19	; 0x09
    4068:	28 87       	std	Y+8, r18	; 0x08
    406a:	88 85       	ldd	r24, Y+8	; 0x08
    406c:	99 85       	ldd	r25, Y+9	; 0x09
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	91 05       	cpc	r25, r1
    4072:	09 f1       	breq	.+66     	; 0x40b6 <line+0x88>
    4074:	28 85       	ldd	r18, Y+8	; 0x08
    4076:	39 85       	ldd	r19, Y+9	; 0x09
    4078:	22 30       	cpi	r18, 0x02	; 2
    407a:	31 05       	cpc	r19, r1
    407c:	69 f1       	breq	.+90     	; 0x40d8 <line+0xaa>
    407e:	88 85       	ldd	r24, Y+8	; 0x08
    4080:	99 85       	ldd	r25, Y+9	; 0x09
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	89 f5       	brne	.+98     	; 0x40e8 <line+0xba>
	{
	case h:
		GLCD_Data(0xff);
    4086:	8f ef       	ldi	r24, 0xFF	; 255
    4088:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
		GLCD_Command((0x40) + x);
    408c:	8c 81       	ldd	r24, Y+4	; 0x04
    408e:	80 5c       	subi	r24, 0xC0	; 192
    4090:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
		GLCD_Command((0xB8)+ y  + 1);
    4094:	8e 81       	ldd	r24, Y+6	; 0x06
    4096:	87 54       	subi	r24, 0x47	; 71
    4098:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
		GLCD_Data(0xff);
    409c:	8f ef       	ldi	r24, 0xFF	; 255
    409e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
		GLCD_Command((0xB8)+ y);
    40a2:	8e 81       	ldd	r24, Y+6	; 0x06
    40a4:	88 54       	subi	r24, 0x48	; 72
    40a6:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
		moves++;
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	9a 81       	ldd	r25, Y+2	; 0x02
    40ae:	01 96       	adiw	r24, 0x01	; 1
    40b0:	9a 83       	std	Y+2, r25	; 0x02
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	19 c0       	rjmp	.+50     	; 0x40e8 <line+0xba>
		break;
	case vup:
		moves++;
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ba:	01 96       	adiw	r24, 0x01	; 1
    40bc:	9a 83       	std	Y+2, r25	; 0x02
    40be:	89 83       	std	Y+1, r24	; 0x01
		GLCD_Command((0xB8)+ y  + 1);
    40c0:	8e 81       	ldd	r24, Y+6	; 0x06
    40c2:	87 54       	subi	r24, 0x47	; 71
    40c4:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
		GLCD_Data(0x80);
    40c8:	80 e8       	ldi	r24, 0x80	; 128
    40ca:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
		GLCD_Command((0xB8)+ y);
    40ce:	8e 81       	ldd	r24, Y+6	; 0x06
    40d0:	88 54       	subi	r24, 0x48	; 72
    40d2:	0e 94 3e 12 	call	0x247c	; 0x247c <GLCD_Command>
    40d6:	08 c0       	rjmp	.+16     	; 0x40e8 <line+0xba>
		break;
	case vdown:
		moves++;
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	01 96       	adiw	r24, 0x01	; 1
    40de:	9a 83       	std	Y+2, r25	; 0x02
    40e0:	89 83       	std	Y+1, r24	; 0x01
		GLCD_Data(0x1);
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <GLCD_Data>
		break;
	}
	return moves;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    40ec:	29 96       	adiw	r28, 0x09	; 9
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	f8 94       	cli
    40f2:	de bf       	out	0x3e, r29	; 62
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	cd bf       	out	0x3d, r28	; 61
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <main>:


int main(void)
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	2c 97       	sbiw	r28, 0x0c	; 12
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
	GLCD_Init();		/* Initialize GLCD */
    4112:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GLCD_Init>
	GLCD_ClearAll();	/* Clear all GLCD display */
    4116:	0e 94 41 16 	call	0x2c82	; 0x2c82 <GLCD_ClearAll>
	dir dd = left;
    411a:	1b 86       	std	Y+11, r1	; 0x0b
	direction(dd);
    411c:	8b 85       	ldd	r24, Y+11	; 0x0b
    411e:	0e 94 dd 18 	call	0x31ba	; 0x31ba <direction>
	int x = 0;
    4122:	1a 86       	std	Y+10, r1	; 0x0a
    4124:	19 86       	std	Y+9, r1	; 0x09
	int y = 4;
    4126:	84 e0       	ldi	r24, 0x04	; 4
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	98 87       	std	Y+8, r25	; 0x08
    412c:	8f 83       	std	Y+7, r24	; 0x07
	int countxleft = 0;
    412e:	1e 82       	std	Y+6, r1	; 0x06
    4130:	1d 82       	std	Y+5, r1	; 0x05
	int countxright = 0;
    4132:	1c 82       	std	Y+4, r1	; 0x04
    4134:	1b 82       	std	Y+3, r1	; 0x03
	int countnum = 0;
    4136:	1a 82       	std	Y+2, r1	; 0x02
    4138:	19 82       	std	Y+1, r1	; 0x01
	x+=line(h, x, y);
    413a:	29 85       	ldd	r18, Y+9	; 0x09
    413c:	3a 85       	ldd	r19, Y+10	; 0x0a
    413e:	4f 81       	ldd	r20, Y+7	; 0x07
    4140:	58 85       	ldd	r21, Y+8	; 0x08
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	b9 01       	movw	r22, r18
    4146:	0e 94 17 20 	call	0x402e	; 0x402e <line>
    414a:	9c 01       	movw	r18, r24
    414c:	89 85       	ldd	r24, Y+9	; 0x09
    414e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4150:	82 0f       	add	r24, r18
    4152:	93 1f       	adc	r25, r19
    4154:	9a 87       	std	Y+10, r25	; 0x0a
    4156:	89 87       	std	Y+9, r24	; 0x09
	while(1)
	{
		dd = left;
    4158:	1b 86       	std	Y+11, r1	; 0x0b
		direction(dd);
    415a:	8b 85       	ldd	r24, Y+11	; 0x0b
    415c:	0e 94 dd 18 	call	0x31ba	; 0x31ba <direction>
		x+=line(vup, x, y);
    4160:	29 85       	ldd	r18, Y+9	; 0x09
    4162:	3a 85       	ldd	r19, Y+10	; 0x0a
    4164:	4f 81       	ldd	r20, Y+7	; 0x07
    4166:	58 85       	ldd	r21, Y+8	; 0x08
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	b9 01       	movw	r22, r18
    416c:	0e 94 17 20 	call	0x402e	; 0x402e <line>
    4170:	9c 01       	movw	r18, r24
    4172:	89 85       	ldd	r24, Y+9	; 0x09
    4174:	9a 85       	ldd	r25, Y+10	; 0x0a
    4176:	82 0f       	add	r24, r18
    4178:	93 1f       	adc	r25, r19
    417a:	9a 87       	std	Y+10, r25	; 0x0a
    417c:	89 87       	std	Y+9, r24	; 0x09
		countxleft += write_me_char('F', countxleft, 0, left);
    417e:	2d 81       	ldd	r18, Y+5	; 0x05
    4180:	3e 81       	ldd	r19, Y+6	; 0x06
    4182:	86 e4       	ldi	r24, 0x46	; 70
    4184:	b9 01       	movw	r22, r18
    4186:	40 e0       	ldi	r20, 0x00	; 0
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4190:	9c 01       	movw	r18, r24
    4192:	8d 81       	ldd	r24, Y+5	; 0x05
    4194:	9e 81       	ldd	r25, Y+6	; 0x06
    4196:	82 0f       	add	r24, r18
    4198:	93 1f       	adc	r25, r19
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
		countxleft += write_me_char(':', countxleft, 0, left);
    419e:	2d 81       	ldd	r18, Y+5	; 0x05
    41a0:	3e 81       	ldd	r19, Y+6	; 0x06
    41a2:	8a e3       	ldi	r24, 0x3A	; 58
    41a4:	b9 01       	movw	r22, r18
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    41b0:	9c 01       	movw	r18, r24
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	9e 81       	ldd	r25, Y+6	; 0x06
    41b6:	82 0f       	add	r24, r18
    41b8:	93 1f       	adc	r25, r19
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	8d 83       	std	Y+5, r24	; 0x05
		//number here
		countxleft += present_num(100, countxleft, 0, left);
    41be:	2d 81       	ldd	r18, Y+5	; 0x05
    41c0:	3e 81       	ldd	r19, Y+6	; 0x06
    41c2:	84 e6       	ldi	r24, 0x64	; 100
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	b9 01       	movw	r22, r18
    41c8:	40 e0       	ldi	r20, 0x00	; 0
    41ca:	50 e0       	ldi	r21, 0x00	; 0
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <present_num>
    41d2:	9c 01       	movw	r18, r24
    41d4:	8d 81       	ldd	r24, Y+5	; 0x05
    41d6:	9e 81       	ldd	r25, Y+6	; 0x06
    41d8:	82 0f       	add	r24, r18
    41da:	93 1f       	adc	r25, r19
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
		countxleft += present_num(3, countxleft, 0, left);
    41e0:	2d 81       	ldd	r18, Y+5	; 0x05
    41e2:	3e 81       	ldd	r19, Y+6	; 0x06
    41e4:	83 e0       	ldi	r24, 0x03	; 3
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	b9 01       	movw	r22, r18
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	50 e0       	ldi	r21, 0x00	; 0
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <present_num>
    41f4:	9c 01       	movw	r18, r24
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	82 0f       	add	r24, r18
    41fc:	93 1f       	adc	r25, r19
    41fe:	9e 83       	std	Y+6, r25	; 0x06
    4200:	8d 83       	std	Y+5, r24	; 0x05

		countxleft += write_me_char('K', countxleft, 0, left);
    4202:	2d 81       	ldd	r18, Y+5	; 0x05
    4204:	3e 81       	ldd	r19, Y+6	; 0x06
    4206:	8b e4       	ldi	r24, 0x4B	; 75
    4208:	b9 01       	movw	r22, r18
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4214:	9c 01       	movw	r18, r24
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	82 0f       	add	r24, r18
    421c:	93 1f       	adc	r25, r19
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
		countxleft += write_me_char('H', countxleft, 0, left);
    4222:	2d 81       	ldd	r18, Y+5	; 0x05
    4224:	3e 81       	ldd	r19, Y+6	; 0x06
    4226:	88 e4       	ldi	r24, 0x48	; 72
    4228:	b9 01       	movw	r22, r18
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	50 e0       	ldi	r21, 0x00	; 0
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4234:	9c 01       	movw	r18, r24
    4236:	8d 81       	ldd	r24, Y+5	; 0x05
    4238:	9e 81       	ldd	r25, Y+6	; 0x06
    423a:	82 0f       	add	r24, r18
    423c:	93 1f       	adc	r25, r19
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
		countxleft += write_me_char('z', countxleft, 0, left);
    4242:	2d 81       	ldd	r18, Y+5	; 0x05
    4244:	3e 81       	ldd	r19, Y+6	; 0x06
    4246:	8a e7       	ldi	r24, 0x7A	; 122
    4248:	b9 01       	movw	r22, r18
    424a:	40 e0       	ldi	r20, 0x00	; 0
    424c:	50 e0       	ldi	r21, 0x00	; 0
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4254:	9c 01       	movw	r18, r24
    4256:	8d 81       	ldd	r24, Y+5	; 0x05
    4258:	9e 81       	ldd	r25, Y+6	; 0x06
    425a:	82 0f       	add	r24, r18
    425c:	93 1f       	adc	r25, r19
    425e:	9e 83       	std	Y+6, r25	; 0x06
    4260:	8d 83       	std	Y+5, r24	; 0x05

		countxright += write_me_char('D', countxright, 0, right);
    4262:	2b 81       	ldd	r18, Y+3	; 0x03
    4264:	3c 81       	ldd	r19, Y+4	; 0x04
    4266:	84 e4       	ldi	r24, 0x44	; 68
    4268:	b9 01       	movw	r22, r18
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	21 e0       	ldi	r18, 0x01	; 1
    4270:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4274:	9c 01       	movw	r18, r24
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	9c 81       	ldd	r25, Y+4	; 0x04
    427a:	82 0f       	add	r24, r18
    427c:	93 1f       	adc	r25, r19
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('u', countxright, 0, right);
    4282:	2b 81       	ldd	r18, Y+3	; 0x03
    4284:	3c 81       	ldd	r19, Y+4	; 0x04
    4286:	85 e7       	ldi	r24, 0x75	; 117
    4288:	b9 01       	movw	r22, r18
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	21 e0       	ldi	r18, 0x01	; 1
    4290:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4294:	9c 01       	movw	r18, r24
    4296:	8b 81       	ldd	r24, Y+3	; 0x03
    4298:	9c 81       	ldd	r25, Y+4	; 0x04
    429a:	82 0f       	add	r24, r18
    429c:	93 1f       	adc	r25, r19
    429e:	9c 83       	std	Y+4, r25	; 0x04
    42a0:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('T', countxright, 0, right);
    42a2:	2b 81       	ldd	r18, Y+3	; 0x03
    42a4:	3c 81       	ldd	r19, Y+4	; 0x04
    42a6:	84 e5       	ldi	r24, 0x54	; 84
    42a8:	b9 01       	movw	r22, r18
    42aa:	40 e0       	ldi	r20, 0x00	; 0
    42ac:	50 e0       	ldi	r21, 0x00	; 0
    42ae:	21 e0       	ldi	r18, 0x01	; 1
    42b0:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    42b4:	9c 01       	movw	r18, r24
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	82 0f       	add	r24, r18
    42bc:	93 1f       	adc	r25, r19
    42be:	9c 83       	std	Y+4, r25	; 0x04
    42c0:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('Y', countxright, 0, right);
    42c2:	2b 81       	ldd	r18, Y+3	; 0x03
    42c4:	3c 81       	ldd	r19, Y+4	; 0x04
    42c6:	89 e5       	ldi	r24, 0x59	; 89
    42c8:	b9 01       	movw	r22, r18
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	21 e0       	ldi	r18, 0x01	; 1
    42d0:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    42d4:	9c 01       	movw	r18, r24
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	9c 81       	ldd	r25, Y+4	; 0x04
    42da:	82 0f       	add	r24, r18
    42dc:	93 1f       	adc	r25, r19
    42de:	9c 83       	std	Y+4, r25	; 0x04
    42e0:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char(' ', countxright, 0, right);
    42e2:	2b 81       	ldd	r18, Y+3	; 0x03
    42e4:	3c 81       	ldd	r19, Y+4	; 0x04
    42e6:	80 e2       	ldi	r24, 0x20	; 32
    42e8:	b9 01       	movw	r22, r18
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	21 e0       	ldi	r18, 0x01	; 1
    42f0:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    42f4:	9c 01       	movw	r18, r24
    42f6:	8b 81       	ldd	r24, Y+3	; 0x03
    42f8:	9c 81       	ldd	r25, Y+4	; 0x04
    42fa:	82 0f       	add	r24, r18
    42fc:	93 1f       	adc	r25, r19
    42fe:	9c 83       	std	Y+4, r25	; 0x04
    4300:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('c', countxright, 0, right);
    4302:	2b 81       	ldd	r18, Y+3	; 0x03
    4304:	3c 81       	ldd	r19, Y+4	; 0x04
    4306:	83 e6       	ldi	r24, 0x63	; 99
    4308:	b9 01       	movw	r22, r18
    430a:	40 e0       	ldi	r20, 0x00	; 0
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	21 e0       	ldi	r18, 0x01	; 1
    4310:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4314:	9c 01       	movw	r18, r24
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	9c 81       	ldd	r25, Y+4	; 0x04
    431a:	82 0f       	add	r24, r18
    431c:	93 1f       	adc	r25, r19
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('Y', countxright, 0, right);
    4322:	2b 81       	ldd	r18, Y+3	; 0x03
    4324:	3c 81       	ldd	r19, Y+4	; 0x04
    4326:	89 e5       	ldi	r24, 0x59	; 89
    4328:	b9 01       	movw	r22, r18
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	21 e0       	ldi	r18, 0x01	; 1
    4330:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4334:	9c 01       	movw	r18, r24
    4336:	8b 81       	ldd	r24, Y+3	; 0x03
    4338:	9c 81       	ldd	r25, Y+4	; 0x04
    433a:	82 0f       	add	r24, r18
    433c:	93 1f       	adc	r25, r19
    433e:	9c 83       	std	Y+4, r25	; 0x04
    4340:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('c', countxright, 0, right);
    4342:	2b 81       	ldd	r18, Y+3	; 0x03
    4344:	3c 81       	ldd	r19, Y+4	; 0x04
    4346:	83 e6       	ldi	r24, 0x63	; 99
    4348:	b9 01       	movw	r22, r18
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	21 e0       	ldi	r18, 0x01	; 1
    4350:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4354:	9c 01       	movw	r18, r24
    4356:	8b 81       	ldd	r24, Y+3	; 0x03
    4358:	9c 81       	ldd	r25, Y+4	; 0x04
    435a:	82 0f       	add	r24, r18
    435c:	93 1f       	adc	r25, r19
    435e:	9c 83       	std	Y+4, r25	; 0x04
    4360:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char(':', countxright, 0, right);
    4362:	2b 81       	ldd	r18, Y+3	; 0x03
    4364:	3c 81       	ldd	r19, Y+4	; 0x04
    4366:	8a e3       	ldi	r24, 0x3A	; 58
    4368:	b9 01       	movw	r22, r18
    436a:	40 e0       	ldi	r20, 0x00	; 0
    436c:	50 e0       	ldi	r21, 0x00	; 0
    436e:	21 e0       	ldi	r18, 0x01	; 1
    4370:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    4374:	9c 01       	movw	r18, r24
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	9c 81       	ldd	r25, Y+4	; 0x04
    437a:	82 0f       	add	r24, r18
    437c:	93 1f       	adc	r25, r19
    437e:	9c 83       	std	Y+4, r25	; 0x04
    4380:	8b 83       	std	Y+3, r24	; 0x03

		countxright += present_num(76, countxright, 0, right);
    4382:	2b 81       	ldd	r18, Y+3	; 0x03
    4384:	3c 81       	ldd	r19, Y+4	; 0x04
    4386:	8c e4       	ldi	r24, 0x4C	; 76
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	b9 01       	movw	r22, r18
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	21 e0       	ldi	r18, 0x01	; 1
    4392:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <present_num>
    4396:	9c 01       	movw	r18, r24
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	9c 81       	ldd	r25, Y+4	; 0x04
    439c:	82 0f       	add	r24, r18
    439e:	93 1f       	adc	r25, r19
    43a0:	9c 83       	std	Y+4, r25	; 0x04
    43a2:	8b 83       	std	Y+3, r24	; 0x03
		countxright += write_me_char('%', countxright, 0, right);
    43a4:	2b 81       	ldd	r18, Y+3	; 0x03
    43a6:	3c 81       	ldd	r19, Y+4	; 0x04
    43a8:	85 e2       	ldi	r24, 0x25	; 37
    43aa:	b9 01       	movw	r22, r18
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	50 e0       	ldi	r21, 0x00	; 0
    43b0:	21 e0       	ldi	r18, 0x01	; 1
    43b2:	0e 94 26 19 	call	0x324c	; 0x324c <write_me_char>
    43b6:	9c 01       	movw	r18, r24
    43b8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ba:	9c 81       	ldd	r25, Y+4	; 0x04
    43bc:	82 0f       	add	r24, r18
    43be:	93 1f       	adc	r25, r19
    43c0:	9c 83       	std	Y+4, r25	; 0x04
    43c2:	8b 83       	std	Y+3, r24	; 0x03

		//x+= write_me_char('D', x, y, dd);
		//x+= write_me_char('T', x, y, dd);


		if(x >= 64)
    43c4:	89 85       	ldd	r24, Y+9	; 0x09
    43c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c8:	80 34       	cpi	r24, 0x40	; 64
    43ca:	91 05       	cpc	r25, r1
    43cc:	54 f0       	brlt	.+20     	; 0x43e2 <main+0x2e4>
		{
			x = 0;
    43ce:	1a 86       	std	Y+10, r1	; 0x0a
    43d0:	19 86       	std	Y+9, r1	; 0x09
			dd = !dd;
    43d2:	1c 86       	std	Y+12, r1	; 0x0c
    43d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    43d6:	88 23       	and	r24, r24
    43d8:	11 f4       	brne	.+4      	; 0x43de <main+0x2e0>
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	8c 87       	std	Y+12, r24	; 0x0c
    43de:	8c 85       	ldd	r24, Y+12	; 0x0c
    43e0:	8b 87       	std	Y+11, r24	; 0x0b

		}


		if(y == 8)
    43e2:	8f 81       	ldd	r24, Y+7	; 0x07
    43e4:	98 85       	ldd	r25, Y+8	; 0x08
    43e6:	88 30       	cpi	r24, 0x08	; 8
    43e8:	91 05       	cpc	r25, r1
    43ea:	49 f4       	brne	.+18     	; 0x43fe <main+0x300>
		{
			y = 0;
    43ec:	18 86       	std	Y+8, r1	; 0x08
    43ee:	1f 82       	std	Y+7, r1	; 0x07
			if(dd == left)
    43f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    43f2:	88 23       	and	r24, r24
    43f4:	19 f4       	brne	.+6      	; 0x43fc <main+0x2fe>
				dd = right;
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	8b 87       	std	Y+11, r24	; 0x0b
    43fa:	01 c0       	rjmp	.+2      	; 0x43fe <main+0x300>
			else
				dd = left;
    43fc:	1b 86       	std	Y+11, r1	; 0x0b
		}
		countxright = 0;
    43fe:	1c 82       	std	Y+4, r1	; 0x04
    4400:	1b 82       	std	Y+3, r1	; 0x03
		countxleft = 0;
    4402:	1e 82       	std	Y+6, r1	; 0x06
    4404:	1d 82       	std	Y+5, r1	; 0x05
    4406:	a8 ce       	rjmp	.-688    	; 0x4158 <main+0x5a>

00004408 <__udivmodqi4>:
    4408:	99 1b       	sub	r25, r25
    440a:	79 e0       	ldi	r23, 0x09	; 9
    440c:	04 c0       	rjmp	.+8      	; 0x4416 <__udivmodqi4_ep>

0000440e <__udivmodqi4_loop>:
    440e:	99 1f       	adc	r25, r25
    4410:	96 17       	cp	r25, r22
    4412:	08 f0       	brcs	.+2      	; 0x4416 <__udivmodqi4_ep>
    4414:	96 1b       	sub	r25, r22

00004416 <__udivmodqi4_ep>:
    4416:	88 1f       	adc	r24, r24
    4418:	7a 95       	dec	r23
    441a:	c9 f7       	brne	.-14     	; 0x440e <__udivmodqi4_loop>
    441c:	80 95       	com	r24
    441e:	08 95       	ret

00004420 <__udivmodhi4>:
    4420:	aa 1b       	sub	r26, r26
    4422:	bb 1b       	sub	r27, r27
    4424:	51 e1       	ldi	r21, 0x11	; 17
    4426:	07 c0       	rjmp	.+14     	; 0x4436 <__udivmodhi4_ep>

00004428 <__udivmodhi4_loop>:
    4428:	aa 1f       	adc	r26, r26
    442a:	bb 1f       	adc	r27, r27
    442c:	a6 17       	cp	r26, r22
    442e:	b7 07       	cpc	r27, r23
    4430:	10 f0       	brcs	.+4      	; 0x4436 <__udivmodhi4_ep>
    4432:	a6 1b       	sub	r26, r22
    4434:	b7 0b       	sbc	r27, r23

00004436 <__udivmodhi4_ep>:
    4436:	88 1f       	adc	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	5a 95       	dec	r21
    443c:	a9 f7       	brne	.-22     	; 0x4428 <__udivmodhi4_loop>
    443e:	80 95       	com	r24
    4440:	90 95       	com	r25
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	08 95       	ret

00004448 <__divmodhi4>:
    4448:	97 fb       	bst	r25, 7
    444a:	09 2e       	mov	r0, r25
    444c:	07 26       	eor	r0, r23
    444e:	0a d0       	rcall	.+20     	; 0x4464 <__divmodhi4_neg1>
    4450:	77 fd       	sbrc	r23, 7
    4452:	04 d0       	rcall	.+8      	; 0x445c <__divmodhi4_neg2>
    4454:	e5 df       	rcall	.-54     	; 0x4420 <__udivmodhi4>
    4456:	06 d0       	rcall	.+12     	; 0x4464 <__divmodhi4_neg1>
    4458:	00 20       	and	r0, r0
    445a:	1a f4       	brpl	.+6      	; 0x4462 <__divmodhi4_exit>

0000445c <__divmodhi4_neg2>:
    445c:	70 95       	com	r23
    445e:	61 95       	neg	r22
    4460:	7f 4f       	sbci	r23, 0xFF	; 255

00004462 <__divmodhi4_exit>:
    4462:	08 95       	ret

00004464 <__divmodhi4_neg1>:
    4464:	f6 f7       	brtc	.-4      	; 0x4462 <__divmodhi4_exit>
    4466:	90 95       	com	r25
    4468:	81 95       	neg	r24
    446a:	9f 4f       	sbci	r25, 0xFF	; 255
    446c:	08 95       	ret

0000446e <__prologue_saves__>:
    446e:	2f 92       	push	r2
    4470:	3f 92       	push	r3
    4472:	4f 92       	push	r4
    4474:	5f 92       	push	r5
    4476:	6f 92       	push	r6
    4478:	7f 92       	push	r7
    447a:	8f 92       	push	r8
    447c:	9f 92       	push	r9
    447e:	af 92       	push	r10
    4480:	bf 92       	push	r11
    4482:	cf 92       	push	r12
    4484:	df 92       	push	r13
    4486:	ef 92       	push	r14
    4488:	ff 92       	push	r15
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	ca 1b       	sub	r28, r26
    4498:	db 0b       	sbc	r29, r27
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	f8 94       	cli
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	cd bf       	out	0x3d, r28	; 61
    44a4:	09 94       	ijmp

000044a6 <__epilogue_restores__>:
    44a6:	2a 88       	ldd	r2, Y+18	; 0x12
    44a8:	39 88       	ldd	r3, Y+17	; 0x11
    44aa:	48 88       	ldd	r4, Y+16	; 0x10
    44ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    44ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    44b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    44b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    44b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    44b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    44b8:	b9 84       	ldd	r11, Y+9	; 0x09
    44ba:	c8 84       	ldd	r12, Y+8	; 0x08
    44bc:	df 80       	ldd	r13, Y+7	; 0x07
    44be:	ee 80       	ldd	r14, Y+6	; 0x06
    44c0:	fd 80       	ldd	r15, Y+5	; 0x05
    44c2:	0c 81       	ldd	r16, Y+4	; 0x04
    44c4:	1b 81       	ldd	r17, Y+3	; 0x03
    44c6:	aa 81       	ldd	r26, Y+2	; 0x02
    44c8:	b9 81       	ldd	r27, Y+1	; 0x01
    44ca:	ce 0f       	add	r28, r30
    44cc:	d1 1d       	adc	r29, r1
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	ed 01       	movw	r28, r26
    44da:	08 95       	ret

000044dc <_exit>:
    44dc:	f8 94       	cli

000044de <__stop_program>:
    44de:	ff cf       	rjmp	.-2      	; 0x44de <__stop_program>
